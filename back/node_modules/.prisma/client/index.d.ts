
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library';
type UnwrapPromise<P extends any> = P extends Promise<infer R> ? R : P
type UnwrapTuple<Tuple extends readonly unknown[]> = {
  [K in keyof Tuple]: K extends `${number}` ? Tuple[K] extends Prisma.PrismaPromise<infer X> ? X : UnwrapPromise<Tuple[K]> : UnwrapPromise<Tuple[K]>
};

export type PrismaPromise<T> = runtime.Types.Public.PrismaPromise<T>


/**
 * Model User
 * 
 */
export type User = {
  id: number
  createdAt: Date
  updatedAt: Date
  name: string
  hash: string
  wins: number
  losses: number
  ladder_level: number
  oauthId: string
  connected: boolean
}

/**
 * Model UserBlock
 * 
 */
export type UserBlock = {
  id: number
  userId: number
  blockedId: number
  createdAt: Date
}

/**
 * Model UserFriend
 * 
 */
export type UserFriend = {
  id: number
  userId: number
  friendId: number
  createdAt: Date
}

/**
 * Model MatchHistory
 * 
 */
export type MatchHistory = {
  id: number
  userId: number
  userName: string
  opponentName: string
  createdAt: Date
  ladder: number
  won: boolean
}

/**
 * Model Chat
 * 
 */
export type Chat = {
  id: number
  createdAt: Date
  updatedAt: Date
  name: string
  type: ChatType
  password: string | null
}

/**
 * Model Message
 * 
 */
export type Message = {
  id: number
  createdAt: Date
  content: string
  userId: number
  chatId: number
}

/**
 * Model UserChat
 * 
 */
export type UserChat = {
  userId: number
  chatId: number
  isOwner: boolean
  isBlocked: boolean
  permissions: string
}


/**
 * Enums
 */

// Based on
// https://github.com/microsoft/TypeScript/issues/3192#issuecomment-261720275

export const ChatType: {
  PUBLIC: 'PUBLIC',
  PRIVATE: 'PRIVATE',
  PASSWORD: 'PASSWORD'
};

export type ChatType = (typeof ChatType)[keyof typeof ChatType]


/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Users
 * const users = await prisma.user.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never,
  GlobalReject extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined = 'rejectOnNotFound' extends keyof T
    ? T['rejectOnNotFound']
    : false
      > {
    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Users
   * const users = await prisma.user.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<T, Prisma.PrismaClientOptions>);
  $on<V extends (U | 'beforeExit')>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : V extends 'beforeExit' ? () => Promise<void> : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): Promise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): Promise<void>;

  /**
   * Add a middleware
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): Promise<UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<this, "$connect" | "$disconnect" | "$on" | "$transaction" | "$use">) => Promise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): Promise<R>

      /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<GlobalReject>;

  /**
   * `prisma.userBlock`: Exposes CRUD operations for the **UserBlock** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more UserBlocks
    * const userBlocks = await prisma.userBlock.findMany()
    * ```
    */
  get userBlock(): Prisma.UserBlockDelegate<GlobalReject>;

  /**
   * `prisma.userFriend`: Exposes CRUD operations for the **UserFriend** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more UserFriends
    * const userFriends = await prisma.userFriend.findMany()
    * ```
    */
  get userFriend(): Prisma.UserFriendDelegate<GlobalReject>;

  /**
   * `prisma.matchHistory`: Exposes CRUD operations for the **MatchHistory** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more MatchHistories
    * const matchHistories = await prisma.matchHistory.findMany()
    * ```
    */
  get matchHistory(): Prisma.MatchHistoryDelegate<GlobalReject>;

  /**
   * `prisma.chat`: Exposes CRUD operations for the **Chat** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Chats
    * const chats = await prisma.chat.findMany()
    * ```
    */
  get chat(): Prisma.ChatDelegate<GlobalReject>;

  /**
   * `prisma.message`: Exposes CRUD operations for the **Message** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Messages
    * const messages = await prisma.message.findMany()
    * ```
    */
  get message(): Prisma.MessageDelegate<GlobalReject>;

  /**
   * `prisma.userChat`: Exposes CRUD operations for the **UserChat** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more UserChats
    * const userChats = await prisma.userChat.findMany()
    * ```
    */
  get userChat(): Prisma.UserChatDelegate<GlobalReject>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = runtime.Types.Public.PrismaPromise<T>

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket


  /**
   * Prisma Client JS version: 4.13.0
   * Query Engine version: 1e7af066ee9cb95cf3a403c78d9aab3e6b04f37a
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | JsonObject | JsonArray | null

  /**
   * Matches a JSON object.
   * Unlike `JsonObject`, this type allows undefined and read-only properties.
   */
  export type InputJsonObject = {readonly [Key in string]?: InputJsonValue | null}

  /**
   * Matches a JSON array.
   * Unlike `JsonArray`, readonly arrays are assignable to this type.
   */
  export interface InputJsonArray extends ReadonlyArray<InputJsonValue | null> {}

  /**
   * Matches any valid value that can be used as an input for operations like
   * create and update as the value of a JSON field. Unlike `JsonValue`, this
   * type allows read-only arrays and read-only object properties and disallows
   * `null` at the top level.
   *
   * `null` cannot be used as the value of a JSON field because its meaning
   * would be ambiguous. Use `Prisma.JsonNull` to store the JSON null value or
   * `Prisma.DbNull` to clear the JSON value and set the field to the database
   * NULL value instead.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
   */
  export type InputJsonValue = string | number | boolean | InputJsonObject | InputJsonArray

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }
  type HasSelect = {
    select: any
  }
  type HasInclude = {
    include: any
  }
  type CheckSelect<T, S, U> = T extends SelectAndInclude
    ? 'Please either choose `select` or `include`'
    : T extends HasSelect
    ? U
    : T extends HasInclude
    ? U
    : S

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => Promise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;

  export function validator<V>(): <S>(select: runtime.Types.Utils.LegacyExact<S, V>) => S;

  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but with an array
   */
  type PickArray<T, K extends Array<keyof T>> = Prisma__Pick<T, TupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    User: 'User',
    UserBlock: 'UserBlock',
    UserFriend: 'UserFriend',
    MatchHistory: 'MatchHistory',
    Chat: 'Chat',
    Message: 'Message',
    UserChat: 'UserChat'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  export type DefaultPrismaClient = PrismaClient
  export type RejectOnNotFound = boolean | ((error: Error) => Error)
  export type RejectPerModel = { [P in ModelName]?: RejectOnNotFound }
  export type RejectPerOperation =  { [P in "findUnique" | "findFirst"]?: RejectPerModel | RejectOnNotFound } 
  type IsReject<T> = T extends true ? True : T extends (err: Error) => Error ? True : False
  export type HasReject<
    GlobalRejectSettings extends Prisma.PrismaClientOptions['rejectOnNotFound'],
    LocalRejectSettings,
    Action extends PrismaAction,
    Model extends ModelName
  > = LocalRejectSettings extends RejectOnNotFound
    ? IsReject<LocalRejectSettings>
    : GlobalRejectSettings extends RejectPerOperation
    ? Action extends keyof GlobalRejectSettings
      ? GlobalRejectSettings[Action] extends RejectOnNotFound
        ? IsReject<GlobalRejectSettings[Action]>
        : GlobalRejectSettings[Action] extends RejectPerModel
        ? Model extends keyof GlobalRejectSettings[Action]
          ? IsReject<GlobalRejectSettings[Action][Model]>
          : False
        : False
      : False
    : IsReject<GlobalRejectSettings>
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'

  export interface PrismaClientOptions {
    /**
     * Configure findUnique/findFirst to throw an error if the query returns null. 
     * @deprecated since 4.0.0. Use `findUniqueOrThrow`/`findFirstOrThrow` methods instead.
     * @example
     * ```
     * // Reject on both findUnique/findFirst
     * rejectOnNotFound: true
     * // Reject only on findFirst with a custom error
     * rejectOnNotFound: { findFirst: (err) => new Error("Custom Error")}
     * // Reject on user.findUnique with a custom error
     * rejectOnNotFound: { findUnique: {User: (err) => new Error("User not found")}}
     * ```
     */
    rejectOnNotFound?: RejectOnNotFound | RejectPerOperation
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources

    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat

    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *  { emit: 'stdout', level: 'query' },
     *  { emit: 'stdout', level: 'info' },
     *  { emit: 'stdout', level: 'warn' }
     *  { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: Array<LogLevel | LogDefinition>
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findMany'
    | 'findFirst'
    | 'create'
    | 'createMany'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => Promise<T>,
  ) => Promise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, '$connect' | '$disconnect' | '$on' | '$transaction' | '$use'>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type UserCountOutputType
   */


  export type UserCountOutputType = {
    userFriends: number
    friendUsers: number
    userBlocks: number
    blockedUsers: number
    history: number
    chats: number
    messages: number
  }

  export type UserCountOutputTypeSelect = {
    userFriends?: boolean
    friendUsers?: boolean
    userBlocks?: boolean
    blockedUsers?: boolean
    history?: boolean
    chats?: boolean
    messages?: boolean
  }

  export type UserCountOutputTypeGetPayload<S extends boolean | null | undefined | UserCountOutputTypeArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? UserCountOutputType :
    S extends undefined ? never :
    S extends { include: any } & (UserCountOutputTypeArgs)
    ? UserCountOutputType 
    : S extends { select: any } & (UserCountOutputTypeArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
    P extends keyof UserCountOutputType ? UserCountOutputType[P] : never
  } 
      : UserCountOutputType




  // Custom InputTypes

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     */
    select?: UserCountOutputTypeSelect | null
  }



  /**
   * Count Type ChatCountOutputType
   */


  export type ChatCountOutputType = {
    messages: number
    users: number
  }

  export type ChatCountOutputTypeSelect = {
    messages?: boolean
    users?: boolean
  }

  export type ChatCountOutputTypeGetPayload<S extends boolean | null | undefined | ChatCountOutputTypeArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? ChatCountOutputType :
    S extends undefined ? never :
    S extends { include: any } & (ChatCountOutputTypeArgs)
    ? ChatCountOutputType 
    : S extends { select: any } & (ChatCountOutputTypeArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
    P extends keyof ChatCountOutputType ? ChatCountOutputType[P] : never
  } 
      : ChatCountOutputType




  // Custom InputTypes

  /**
   * ChatCountOutputType without action
   */
  export type ChatCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the ChatCountOutputType
     */
    select?: ChatCountOutputTypeSelect | null
  }



  /**
   * Models
   */

  /**
   * Model User
   */


  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserAvgAggregateOutputType = {
    id: number | null
    wins: number | null
    losses: number | null
    ladder_level: number | null
  }

  export type UserSumAggregateOutputType = {
    id: number | null
    wins: number | null
    losses: number | null
    ladder_level: number | null
  }

  export type UserMinAggregateOutputType = {
    id: number | null
    createdAt: Date | null
    updatedAt: Date | null
    name: string | null
    hash: string | null
    wins: number | null
    losses: number | null
    ladder_level: number | null
    oauthId: string | null
    connected: boolean | null
  }

  export type UserMaxAggregateOutputType = {
    id: number | null
    createdAt: Date | null
    updatedAt: Date | null
    name: string | null
    hash: string | null
    wins: number | null
    losses: number | null
    ladder_level: number | null
    oauthId: string | null
    connected: boolean | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    createdAt: number
    updatedAt: number
    name: number
    hash: number
    wins: number
    losses: number
    ladder_level: number
    oauthId: number
    connected: number
    _all: number
  }


  export type UserAvgAggregateInputType = {
    id?: true
    wins?: true
    losses?: true
    ladder_level?: true
  }

  export type UserSumAggregateInputType = {
    id?: true
    wins?: true
    losses?: true
    ladder_level?: true
  }

  export type UserMinAggregateInputType = {
    id?: true
    createdAt?: true
    updatedAt?: true
    name?: true
    hash?: true
    wins?: true
    losses?: true
    ladder_level?: true
    oauthId?: true
    connected?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    createdAt?: true
    updatedAt?: true
    name?: true
    hash?: true
    wins?: true
    losses?: true
    ladder_level?: true
    oauthId?: true
    connected?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    createdAt?: true
    updatedAt?: true
    name?: true
    hash?: true
    wins?: true
    losses?: true
    ladder_level?: true
    oauthId?: true
    connected?: true
    _all?: true
  }

  export type UserAggregateArgs = {
    /**
     * Filter which User to aggregate.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: Enumerable<UserOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UserAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UserSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs = {
    where?: UserWhereInput
    orderBy?: Enumerable<UserOrderByWithAggregationInput>
    by: UserScalarFieldEnum[]
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _avg?: UserAvgAggregateInputType
    _sum?: UserSumAggregateInputType
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }


  export type UserGroupByOutputType = {
    id: number
    createdAt: Date
    updatedAt: Date
    name: string
    hash: string
    wins: number
    losses: number
    ladder_level: number
    oauthId: string
    connected: boolean
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect = {
    id?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    name?: boolean
    hash?: boolean
    wins?: boolean
    losses?: boolean
    ladder_level?: boolean
    oauthId?: boolean
    connected?: boolean
    userFriends?: boolean | User$userFriendsArgs
    friendUsers?: boolean | User$friendUsersArgs
    userBlocks?: boolean | User$userBlocksArgs
    blockedUsers?: boolean | User$blockedUsersArgs
    history?: boolean | User$historyArgs
    chats?: boolean | User$chatsArgs
    messages?: boolean | User$messagesArgs
    _count?: boolean | UserCountOutputTypeArgs
  }


  export type UserInclude = {
    userFriends?: boolean | User$userFriendsArgs
    friendUsers?: boolean | User$friendUsersArgs
    userBlocks?: boolean | User$userBlocksArgs
    blockedUsers?: boolean | User$blockedUsersArgs
    history?: boolean | User$historyArgs
    chats?: boolean | User$chatsArgs
    messages?: boolean | User$messagesArgs
    _count?: boolean | UserCountOutputTypeArgs
  }

  export type UserGetPayload<S extends boolean | null | undefined | UserArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? User :
    S extends undefined ? never :
    S extends { include: any } & (UserArgs | UserFindManyArgs)
    ? User  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'userFriends' ? Array < UserFriendGetPayload<S['include'][P]>>  :
        P extends 'friendUsers' ? Array < UserFriendGetPayload<S['include'][P]>>  :
        P extends 'userBlocks' ? Array < UserBlockGetPayload<S['include'][P]>>  :
        P extends 'blockedUsers' ? Array < UserBlockGetPayload<S['include'][P]>>  :
        P extends 'history' ? Array < MatchHistoryGetPayload<S['include'][P]>>  :
        P extends 'chats' ? Array < UserChatGetPayload<S['include'][P]>>  :
        P extends 'messages' ? Array < MessageGetPayload<S['include'][P]>>  :
        P extends '_count' ? UserCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (UserArgs | UserFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'userFriends' ? Array < UserFriendGetPayload<S['select'][P]>>  :
        P extends 'friendUsers' ? Array < UserFriendGetPayload<S['select'][P]>>  :
        P extends 'userBlocks' ? Array < UserBlockGetPayload<S['select'][P]>>  :
        P extends 'blockedUsers' ? Array < UserBlockGetPayload<S['select'][P]>>  :
        P extends 'history' ? Array < MatchHistoryGetPayload<S['select'][P]>>  :
        P extends 'chats' ? Array < UserChatGetPayload<S['select'][P]>>  :
        P extends 'messages' ? Array < MessageGetPayload<S['select'][P]>>  :
        P extends '_count' ? UserCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof User ? User[P] : never
  } 
      : User


  type UserCountArgs = 
    Omit<UserFindManyArgs, 'select' | 'include'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface UserDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends UserFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, UserFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'User'> extends True ? Prisma__UserClient<UserGetPayload<T>> : Prisma__UserClient<UserGetPayload<T> | null, null>

    /**
     * Find one User that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, UserFindUniqueOrThrowArgs>
    ): Prisma__UserClient<UserGetPayload<T>>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends UserFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, UserFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'User'> extends True ? Prisma__UserClient<UserGetPayload<T>> : Prisma__UserClient<UserGetPayload<T> | null, null>

    /**
     * Find the first User that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs>(
      args?: SelectSubset<T, UserFindFirstOrThrowArgs>
    ): Prisma__UserClient<UserGetPayload<T>>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends UserFindManyArgs>(
      args?: SelectSubset<T, UserFindManyArgs>
    ): Prisma.PrismaPromise<Array<UserGetPayload<T>>>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
    **/
    create<T extends UserCreateArgs>(
      args: SelectSubset<T, UserCreateArgs>
    ): Prisma__UserClient<UserGetPayload<T>>

    /**
     * Create many Users.
     *     @param {UserCreateManyArgs} args - Arguments to create many Users.
     *     @example
     *     // Create many Users
     *     const user = await prisma.user.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends UserCreateManyArgs>(
      args?: SelectSubset<T, UserCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
    **/
    delete<T extends UserDeleteArgs>(
      args: SelectSubset<T, UserDeleteArgs>
    ): Prisma__UserClient<UserGetPayload<T>>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends UserUpdateArgs>(
      args: SelectSubset<T, UserUpdateArgs>
    ): Prisma__UserClient<UserGetPayload<T>>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends UserDeleteManyArgs>(
      args?: SelectSubset<T, UserDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends UserUpdateManyArgs>(
      args: SelectSubset<T, UserUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
    **/
    upsert<T extends UserUpsertArgs>(
      args: SelectSubset<T, UserUpsertArgs>
    ): Prisma__UserClient<UserGetPayload<T>>

    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__UserClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    userFriends<T extends User$userFriendsArgs= {}>(args?: Subset<T, User$userFriendsArgs>): Prisma.PrismaPromise<Array<UserFriendGetPayload<T>>| Null>;

    friendUsers<T extends User$friendUsersArgs= {}>(args?: Subset<T, User$friendUsersArgs>): Prisma.PrismaPromise<Array<UserFriendGetPayload<T>>| Null>;

    userBlocks<T extends User$userBlocksArgs= {}>(args?: Subset<T, User$userBlocksArgs>): Prisma.PrismaPromise<Array<UserBlockGetPayload<T>>| Null>;

    blockedUsers<T extends User$blockedUsersArgs= {}>(args?: Subset<T, User$blockedUsersArgs>): Prisma.PrismaPromise<Array<UserBlockGetPayload<T>>| Null>;

    history<T extends User$historyArgs= {}>(args?: Subset<T, User$historyArgs>): Prisma.PrismaPromise<Array<MatchHistoryGetPayload<T>>| Null>;

    chats<T extends User$chatsArgs= {}>(args?: Subset<T, User$chatsArgs>): Prisma.PrismaPromise<Array<UserChatGetPayload<T>>| Null>;

    messages<T extends User$messagesArgs= {}>(args?: Subset<T, User$messagesArgs>): Prisma.PrismaPromise<Array<MessageGetPayload<T>>| Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * User base type for findUnique actions
   */
  export type UserFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findUnique
   */
  export interface UserFindUniqueArgs extends UserFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * User findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }


  /**
   * User base type for findFirst actions
   */
  export type UserFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: Enumerable<UserOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: Enumerable<UserScalarFieldEnum>
  }

  /**
   * User findFirst
   */
  export interface UserFindFirstArgs extends UserFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * User findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: Enumerable<UserOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: Enumerable<UserScalarFieldEnum>
  }


  /**
   * User findMany
   */
  export type UserFindManyArgs = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: Enumerable<UserOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: Enumerable<UserScalarFieldEnum>
  }


  /**
   * User create
   */
  export type UserCreateArgs = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude | null
    /**
     * The data needed to create a User.
     */
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }


  /**
   * User createMany
   */
  export type UserCreateManyArgs = {
    /**
     * The data used to create many Users.
     */
    data: Enumerable<UserCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * User update
   */
  export type UserUpdateArgs = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude | null
    /**
     * The data needed to update a User.
     */
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     */
    where: UserWhereUniqueInput
  }


  /**
   * User updateMany
   */
  export type UserUpdateManyArgs = {
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
  }


  /**
   * User upsert
   */
  export type UserUpsertArgs = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude | null
    /**
     * The filter to search for the User to update in case it exists.
     */
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     */
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }


  /**
   * User delete
   */
  export type UserDeleteArgs = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude | null
    /**
     * Filter which User to delete.
     */
    where: UserWhereUniqueInput
  }


  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs = {
    /**
     * Filter which Users to delete
     */
    where?: UserWhereInput
  }


  /**
   * User.userFriends
   */
  export type User$userFriendsArgs = {
    /**
     * Select specific fields to fetch from the UserFriend
     */
    select?: UserFriendSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserFriendInclude | null
    where?: UserFriendWhereInput
    orderBy?: Enumerable<UserFriendOrderByWithRelationInput>
    cursor?: UserFriendWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<UserFriendScalarFieldEnum>
  }


  /**
   * User.friendUsers
   */
  export type User$friendUsersArgs = {
    /**
     * Select specific fields to fetch from the UserFriend
     */
    select?: UserFriendSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserFriendInclude | null
    where?: UserFriendWhereInput
    orderBy?: Enumerable<UserFriendOrderByWithRelationInput>
    cursor?: UserFriendWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<UserFriendScalarFieldEnum>
  }


  /**
   * User.userBlocks
   */
  export type User$userBlocksArgs = {
    /**
     * Select specific fields to fetch from the UserBlock
     */
    select?: UserBlockSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserBlockInclude | null
    where?: UserBlockWhereInput
    orderBy?: Enumerable<UserBlockOrderByWithRelationInput>
    cursor?: UserBlockWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<UserBlockScalarFieldEnum>
  }


  /**
   * User.blockedUsers
   */
  export type User$blockedUsersArgs = {
    /**
     * Select specific fields to fetch from the UserBlock
     */
    select?: UserBlockSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserBlockInclude | null
    where?: UserBlockWhereInput
    orderBy?: Enumerable<UserBlockOrderByWithRelationInput>
    cursor?: UserBlockWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<UserBlockScalarFieldEnum>
  }


  /**
   * User.history
   */
  export type User$historyArgs = {
    /**
     * Select specific fields to fetch from the MatchHistory
     */
    select?: MatchHistorySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MatchHistoryInclude | null
    where?: MatchHistoryWhereInput
    orderBy?: Enumerable<MatchHistoryOrderByWithRelationInput>
    cursor?: MatchHistoryWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<MatchHistoryScalarFieldEnum>
  }


  /**
   * User.chats
   */
  export type User$chatsArgs = {
    /**
     * Select specific fields to fetch from the UserChat
     */
    select?: UserChatSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserChatInclude | null
    where?: UserChatWhereInput
    orderBy?: Enumerable<UserChatOrderByWithRelationInput>
    cursor?: UserChatWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<UserChatScalarFieldEnum>
  }


  /**
   * User.messages
   */
  export type User$messagesArgs = {
    /**
     * Select specific fields to fetch from the Message
     */
    select?: MessageSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MessageInclude | null
    where?: MessageWhereInput
    orderBy?: Enumerable<MessageOrderByWithRelationInput>
    cursor?: MessageWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<MessageScalarFieldEnum>
  }


  /**
   * User without action
   */
  export type UserArgs = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude | null
  }



  /**
   * Model UserBlock
   */


  export type AggregateUserBlock = {
    _count: UserBlockCountAggregateOutputType | null
    _avg: UserBlockAvgAggregateOutputType | null
    _sum: UserBlockSumAggregateOutputType | null
    _min: UserBlockMinAggregateOutputType | null
    _max: UserBlockMaxAggregateOutputType | null
  }

  export type UserBlockAvgAggregateOutputType = {
    id: number | null
    userId: number | null
    blockedId: number | null
  }

  export type UserBlockSumAggregateOutputType = {
    id: number | null
    userId: number | null
    blockedId: number | null
  }

  export type UserBlockMinAggregateOutputType = {
    id: number | null
    userId: number | null
    blockedId: number | null
    createdAt: Date | null
  }

  export type UserBlockMaxAggregateOutputType = {
    id: number | null
    userId: number | null
    blockedId: number | null
    createdAt: Date | null
  }

  export type UserBlockCountAggregateOutputType = {
    id: number
    userId: number
    blockedId: number
    createdAt: number
    _all: number
  }


  export type UserBlockAvgAggregateInputType = {
    id?: true
    userId?: true
    blockedId?: true
  }

  export type UserBlockSumAggregateInputType = {
    id?: true
    userId?: true
    blockedId?: true
  }

  export type UserBlockMinAggregateInputType = {
    id?: true
    userId?: true
    blockedId?: true
    createdAt?: true
  }

  export type UserBlockMaxAggregateInputType = {
    id?: true
    userId?: true
    blockedId?: true
    createdAt?: true
  }

  export type UserBlockCountAggregateInputType = {
    id?: true
    userId?: true
    blockedId?: true
    createdAt?: true
    _all?: true
  }

  export type UserBlockAggregateArgs = {
    /**
     * Filter which UserBlock to aggregate.
     */
    where?: UserBlockWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserBlocks to fetch.
     */
    orderBy?: Enumerable<UserBlockOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserBlockWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserBlocks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserBlocks.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned UserBlocks
    **/
    _count?: true | UserBlockCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UserBlockAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UserBlockSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserBlockMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserBlockMaxAggregateInputType
  }

  export type GetUserBlockAggregateType<T extends UserBlockAggregateArgs> = {
        [P in keyof T & keyof AggregateUserBlock]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUserBlock[P]>
      : GetScalarType<T[P], AggregateUserBlock[P]>
  }




  export type UserBlockGroupByArgs = {
    where?: UserBlockWhereInput
    orderBy?: Enumerable<UserBlockOrderByWithAggregationInput>
    by: UserBlockScalarFieldEnum[]
    having?: UserBlockScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserBlockCountAggregateInputType | true
    _avg?: UserBlockAvgAggregateInputType
    _sum?: UserBlockSumAggregateInputType
    _min?: UserBlockMinAggregateInputType
    _max?: UserBlockMaxAggregateInputType
  }


  export type UserBlockGroupByOutputType = {
    id: number
    userId: number
    blockedId: number
    createdAt: Date
    _count: UserBlockCountAggregateOutputType | null
    _avg: UserBlockAvgAggregateOutputType | null
    _sum: UserBlockSumAggregateOutputType | null
    _min: UserBlockMinAggregateOutputType | null
    _max: UserBlockMaxAggregateOutputType | null
  }

  type GetUserBlockGroupByPayload<T extends UserBlockGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<UserBlockGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserBlockGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserBlockGroupByOutputType[P]>
            : GetScalarType<T[P], UserBlockGroupByOutputType[P]>
        }
      >
    >


  export type UserBlockSelect = {
    id?: boolean
    userId?: boolean
    blockedId?: boolean
    createdAt?: boolean
    user?: boolean | UserArgs
    blockedUser?: boolean | UserArgs
  }


  export type UserBlockInclude = {
    user?: boolean | UserArgs
    blockedUser?: boolean | UserArgs
  }

  export type UserBlockGetPayload<S extends boolean | null | undefined | UserBlockArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? UserBlock :
    S extends undefined ? never :
    S extends { include: any } & (UserBlockArgs | UserBlockFindManyArgs)
    ? UserBlock  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'user' ? UserGetPayload<S['include'][P]> :
        P extends 'blockedUser' ? UserGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (UserBlockArgs | UserBlockFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'user' ? UserGetPayload<S['select'][P]> :
        P extends 'blockedUser' ? UserGetPayload<S['select'][P]> :  P extends keyof UserBlock ? UserBlock[P] : never
  } 
      : UserBlock


  type UserBlockCountArgs = 
    Omit<UserBlockFindManyArgs, 'select' | 'include'> & {
      select?: UserBlockCountAggregateInputType | true
    }

  export interface UserBlockDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one UserBlock that matches the filter.
     * @param {UserBlockFindUniqueArgs} args - Arguments to find a UserBlock
     * @example
     * // Get one UserBlock
     * const userBlock = await prisma.userBlock.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends UserBlockFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, UserBlockFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'UserBlock'> extends True ? Prisma__UserBlockClient<UserBlockGetPayload<T>> : Prisma__UserBlockClient<UserBlockGetPayload<T> | null, null>

    /**
     * Find one UserBlock that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {UserBlockFindUniqueOrThrowArgs} args - Arguments to find a UserBlock
     * @example
     * // Get one UserBlock
     * const userBlock = await prisma.userBlock.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends UserBlockFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, UserBlockFindUniqueOrThrowArgs>
    ): Prisma__UserBlockClient<UserBlockGetPayload<T>>

    /**
     * Find the first UserBlock that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserBlockFindFirstArgs} args - Arguments to find a UserBlock
     * @example
     * // Get one UserBlock
     * const userBlock = await prisma.userBlock.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends UserBlockFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, UserBlockFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'UserBlock'> extends True ? Prisma__UserBlockClient<UserBlockGetPayload<T>> : Prisma__UserBlockClient<UserBlockGetPayload<T> | null, null>

    /**
     * Find the first UserBlock that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserBlockFindFirstOrThrowArgs} args - Arguments to find a UserBlock
     * @example
     * // Get one UserBlock
     * const userBlock = await prisma.userBlock.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends UserBlockFindFirstOrThrowArgs>(
      args?: SelectSubset<T, UserBlockFindFirstOrThrowArgs>
    ): Prisma__UserBlockClient<UserBlockGetPayload<T>>

    /**
     * Find zero or more UserBlocks that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserBlockFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all UserBlocks
     * const userBlocks = await prisma.userBlock.findMany()
     * 
     * // Get first 10 UserBlocks
     * const userBlocks = await prisma.userBlock.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userBlockWithIdOnly = await prisma.userBlock.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends UserBlockFindManyArgs>(
      args?: SelectSubset<T, UserBlockFindManyArgs>
    ): Prisma.PrismaPromise<Array<UserBlockGetPayload<T>>>

    /**
     * Create a UserBlock.
     * @param {UserBlockCreateArgs} args - Arguments to create a UserBlock.
     * @example
     * // Create one UserBlock
     * const UserBlock = await prisma.userBlock.create({
     *   data: {
     *     // ... data to create a UserBlock
     *   }
     * })
     * 
    **/
    create<T extends UserBlockCreateArgs>(
      args: SelectSubset<T, UserBlockCreateArgs>
    ): Prisma__UserBlockClient<UserBlockGetPayload<T>>

    /**
     * Create many UserBlocks.
     *     @param {UserBlockCreateManyArgs} args - Arguments to create many UserBlocks.
     *     @example
     *     // Create many UserBlocks
     *     const userBlock = await prisma.userBlock.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends UserBlockCreateManyArgs>(
      args?: SelectSubset<T, UserBlockCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a UserBlock.
     * @param {UserBlockDeleteArgs} args - Arguments to delete one UserBlock.
     * @example
     * // Delete one UserBlock
     * const UserBlock = await prisma.userBlock.delete({
     *   where: {
     *     // ... filter to delete one UserBlock
     *   }
     * })
     * 
    **/
    delete<T extends UserBlockDeleteArgs>(
      args: SelectSubset<T, UserBlockDeleteArgs>
    ): Prisma__UserBlockClient<UserBlockGetPayload<T>>

    /**
     * Update one UserBlock.
     * @param {UserBlockUpdateArgs} args - Arguments to update one UserBlock.
     * @example
     * // Update one UserBlock
     * const userBlock = await prisma.userBlock.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends UserBlockUpdateArgs>(
      args: SelectSubset<T, UserBlockUpdateArgs>
    ): Prisma__UserBlockClient<UserBlockGetPayload<T>>

    /**
     * Delete zero or more UserBlocks.
     * @param {UserBlockDeleteManyArgs} args - Arguments to filter UserBlocks to delete.
     * @example
     * // Delete a few UserBlocks
     * const { count } = await prisma.userBlock.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends UserBlockDeleteManyArgs>(
      args?: SelectSubset<T, UserBlockDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more UserBlocks.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserBlockUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many UserBlocks
     * const userBlock = await prisma.userBlock.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends UserBlockUpdateManyArgs>(
      args: SelectSubset<T, UserBlockUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one UserBlock.
     * @param {UserBlockUpsertArgs} args - Arguments to update or create a UserBlock.
     * @example
     * // Update or create a UserBlock
     * const userBlock = await prisma.userBlock.upsert({
     *   create: {
     *     // ... data to create a UserBlock
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the UserBlock we want to update
     *   }
     * })
    **/
    upsert<T extends UserBlockUpsertArgs>(
      args: SelectSubset<T, UserBlockUpsertArgs>
    ): Prisma__UserBlockClient<UserBlockGetPayload<T>>

    /**
     * Count the number of UserBlocks.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserBlockCountArgs} args - Arguments to filter UserBlocks to count.
     * @example
     * // Count the number of UserBlocks
     * const count = await prisma.userBlock.count({
     *   where: {
     *     // ... the filter for the UserBlocks we want to count
     *   }
     * })
    **/
    count<T extends UserBlockCountArgs>(
      args?: Subset<T, UserBlockCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserBlockCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a UserBlock.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserBlockAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserBlockAggregateArgs>(args: Subset<T, UserBlockAggregateArgs>): Prisma.PrismaPromise<GetUserBlockAggregateType<T>>

    /**
     * Group by UserBlock.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserBlockGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserBlockGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserBlockGroupByArgs['orderBy'] }
        : { orderBy?: UserBlockGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserBlockGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserBlockGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for UserBlock.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__UserBlockClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    user<T extends UserArgs= {}>(args?: Subset<T, UserArgs>): Prisma__UserClient<UserGetPayload<T> | Null>;

    blockedUser<T extends UserArgs= {}>(args?: Subset<T, UserArgs>): Prisma__UserClient<UserGetPayload<T> | Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * UserBlock base type for findUnique actions
   */
  export type UserBlockFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the UserBlock
     */
    select?: UserBlockSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserBlockInclude | null
    /**
     * Filter, which UserBlock to fetch.
     */
    where: UserBlockWhereUniqueInput
  }

  /**
   * UserBlock findUnique
   */
  export interface UserBlockFindUniqueArgs extends UserBlockFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * UserBlock findUniqueOrThrow
   */
  export type UserBlockFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the UserBlock
     */
    select?: UserBlockSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserBlockInclude | null
    /**
     * Filter, which UserBlock to fetch.
     */
    where: UserBlockWhereUniqueInput
  }


  /**
   * UserBlock base type for findFirst actions
   */
  export type UserBlockFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the UserBlock
     */
    select?: UserBlockSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserBlockInclude | null
    /**
     * Filter, which UserBlock to fetch.
     */
    where?: UserBlockWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserBlocks to fetch.
     */
    orderBy?: Enumerable<UserBlockOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UserBlocks.
     */
    cursor?: UserBlockWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserBlocks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserBlocks.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UserBlocks.
     */
    distinct?: Enumerable<UserBlockScalarFieldEnum>
  }

  /**
   * UserBlock findFirst
   */
  export interface UserBlockFindFirstArgs extends UserBlockFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * UserBlock findFirstOrThrow
   */
  export type UserBlockFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the UserBlock
     */
    select?: UserBlockSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserBlockInclude | null
    /**
     * Filter, which UserBlock to fetch.
     */
    where?: UserBlockWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserBlocks to fetch.
     */
    orderBy?: Enumerable<UserBlockOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UserBlocks.
     */
    cursor?: UserBlockWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserBlocks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserBlocks.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UserBlocks.
     */
    distinct?: Enumerable<UserBlockScalarFieldEnum>
  }


  /**
   * UserBlock findMany
   */
  export type UserBlockFindManyArgs = {
    /**
     * Select specific fields to fetch from the UserBlock
     */
    select?: UserBlockSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserBlockInclude | null
    /**
     * Filter, which UserBlocks to fetch.
     */
    where?: UserBlockWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserBlocks to fetch.
     */
    orderBy?: Enumerable<UserBlockOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing UserBlocks.
     */
    cursor?: UserBlockWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserBlocks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserBlocks.
     */
    skip?: number
    distinct?: Enumerable<UserBlockScalarFieldEnum>
  }


  /**
   * UserBlock create
   */
  export type UserBlockCreateArgs = {
    /**
     * Select specific fields to fetch from the UserBlock
     */
    select?: UserBlockSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserBlockInclude | null
    /**
     * The data needed to create a UserBlock.
     */
    data: XOR<UserBlockCreateInput, UserBlockUncheckedCreateInput>
  }


  /**
   * UserBlock createMany
   */
  export type UserBlockCreateManyArgs = {
    /**
     * The data used to create many UserBlocks.
     */
    data: Enumerable<UserBlockCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * UserBlock update
   */
  export type UserBlockUpdateArgs = {
    /**
     * Select specific fields to fetch from the UserBlock
     */
    select?: UserBlockSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserBlockInclude | null
    /**
     * The data needed to update a UserBlock.
     */
    data: XOR<UserBlockUpdateInput, UserBlockUncheckedUpdateInput>
    /**
     * Choose, which UserBlock to update.
     */
    where: UserBlockWhereUniqueInput
  }


  /**
   * UserBlock updateMany
   */
  export type UserBlockUpdateManyArgs = {
    /**
     * The data used to update UserBlocks.
     */
    data: XOR<UserBlockUpdateManyMutationInput, UserBlockUncheckedUpdateManyInput>
    /**
     * Filter which UserBlocks to update
     */
    where?: UserBlockWhereInput
  }


  /**
   * UserBlock upsert
   */
  export type UserBlockUpsertArgs = {
    /**
     * Select specific fields to fetch from the UserBlock
     */
    select?: UserBlockSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserBlockInclude | null
    /**
     * The filter to search for the UserBlock to update in case it exists.
     */
    where: UserBlockWhereUniqueInput
    /**
     * In case the UserBlock found by the `where` argument doesn't exist, create a new UserBlock with this data.
     */
    create: XOR<UserBlockCreateInput, UserBlockUncheckedCreateInput>
    /**
     * In case the UserBlock was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserBlockUpdateInput, UserBlockUncheckedUpdateInput>
  }


  /**
   * UserBlock delete
   */
  export type UserBlockDeleteArgs = {
    /**
     * Select specific fields to fetch from the UserBlock
     */
    select?: UserBlockSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserBlockInclude | null
    /**
     * Filter which UserBlock to delete.
     */
    where: UserBlockWhereUniqueInput
  }


  /**
   * UserBlock deleteMany
   */
  export type UserBlockDeleteManyArgs = {
    /**
     * Filter which UserBlocks to delete
     */
    where?: UserBlockWhereInput
  }


  /**
   * UserBlock without action
   */
  export type UserBlockArgs = {
    /**
     * Select specific fields to fetch from the UserBlock
     */
    select?: UserBlockSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserBlockInclude | null
  }



  /**
   * Model UserFriend
   */


  export type AggregateUserFriend = {
    _count: UserFriendCountAggregateOutputType | null
    _avg: UserFriendAvgAggregateOutputType | null
    _sum: UserFriendSumAggregateOutputType | null
    _min: UserFriendMinAggregateOutputType | null
    _max: UserFriendMaxAggregateOutputType | null
  }

  export type UserFriendAvgAggregateOutputType = {
    id: number | null
    userId: number | null
    friendId: number | null
  }

  export type UserFriendSumAggregateOutputType = {
    id: number | null
    userId: number | null
    friendId: number | null
  }

  export type UserFriendMinAggregateOutputType = {
    id: number | null
    userId: number | null
    friendId: number | null
    createdAt: Date | null
  }

  export type UserFriendMaxAggregateOutputType = {
    id: number | null
    userId: number | null
    friendId: number | null
    createdAt: Date | null
  }

  export type UserFriendCountAggregateOutputType = {
    id: number
    userId: number
    friendId: number
    createdAt: number
    _all: number
  }


  export type UserFriendAvgAggregateInputType = {
    id?: true
    userId?: true
    friendId?: true
  }

  export type UserFriendSumAggregateInputType = {
    id?: true
    userId?: true
    friendId?: true
  }

  export type UserFriendMinAggregateInputType = {
    id?: true
    userId?: true
    friendId?: true
    createdAt?: true
  }

  export type UserFriendMaxAggregateInputType = {
    id?: true
    userId?: true
    friendId?: true
    createdAt?: true
  }

  export type UserFriendCountAggregateInputType = {
    id?: true
    userId?: true
    friendId?: true
    createdAt?: true
    _all?: true
  }

  export type UserFriendAggregateArgs = {
    /**
     * Filter which UserFriend to aggregate.
     */
    where?: UserFriendWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserFriends to fetch.
     */
    orderBy?: Enumerable<UserFriendOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserFriendWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserFriends from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserFriends.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned UserFriends
    **/
    _count?: true | UserFriendCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UserFriendAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UserFriendSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserFriendMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserFriendMaxAggregateInputType
  }

  export type GetUserFriendAggregateType<T extends UserFriendAggregateArgs> = {
        [P in keyof T & keyof AggregateUserFriend]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUserFriend[P]>
      : GetScalarType<T[P], AggregateUserFriend[P]>
  }




  export type UserFriendGroupByArgs = {
    where?: UserFriendWhereInput
    orderBy?: Enumerable<UserFriendOrderByWithAggregationInput>
    by: UserFriendScalarFieldEnum[]
    having?: UserFriendScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserFriendCountAggregateInputType | true
    _avg?: UserFriendAvgAggregateInputType
    _sum?: UserFriendSumAggregateInputType
    _min?: UserFriendMinAggregateInputType
    _max?: UserFriendMaxAggregateInputType
  }


  export type UserFriendGroupByOutputType = {
    id: number
    userId: number
    friendId: number
    createdAt: Date
    _count: UserFriendCountAggregateOutputType | null
    _avg: UserFriendAvgAggregateOutputType | null
    _sum: UserFriendSumAggregateOutputType | null
    _min: UserFriendMinAggregateOutputType | null
    _max: UserFriendMaxAggregateOutputType | null
  }

  type GetUserFriendGroupByPayload<T extends UserFriendGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<UserFriendGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserFriendGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserFriendGroupByOutputType[P]>
            : GetScalarType<T[P], UserFriendGroupByOutputType[P]>
        }
      >
    >


  export type UserFriendSelect = {
    id?: boolean
    userId?: boolean
    friendId?: boolean
    createdAt?: boolean
    user?: boolean | UserArgs
    friend?: boolean | UserArgs
  }


  export type UserFriendInclude = {
    user?: boolean | UserArgs
    friend?: boolean | UserArgs
  }

  export type UserFriendGetPayload<S extends boolean | null | undefined | UserFriendArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? UserFriend :
    S extends undefined ? never :
    S extends { include: any } & (UserFriendArgs | UserFriendFindManyArgs)
    ? UserFriend  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'user' ? UserGetPayload<S['include'][P]> :
        P extends 'friend' ? UserGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (UserFriendArgs | UserFriendFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'user' ? UserGetPayload<S['select'][P]> :
        P extends 'friend' ? UserGetPayload<S['select'][P]> :  P extends keyof UserFriend ? UserFriend[P] : never
  } 
      : UserFriend


  type UserFriendCountArgs = 
    Omit<UserFriendFindManyArgs, 'select' | 'include'> & {
      select?: UserFriendCountAggregateInputType | true
    }

  export interface UserFriendDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one UserFriend that matches the filter.
     * @param {UserFriendFindUniqueArgs} args - Arguments to find a UserFriend
     * @example
     * // Get one UserFriend
     * const userFriend = await prisma.userFriend.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends UserFriendFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, UserFriendFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'UserFriend'> extends True ? Prisma__UserFriendClient<UserFriendGetPayload<T>> : Prisma__UserFriendClient<UserFriendGetPayload<T> | null, null>

    /**
     * Find one UserFriend that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {UserFriendFindUniqueOrThrowArgs} args - Arguments to find a UserFriend
     * @example
     * // Get one UserFriend
     * const userFriend = await prisma.userFriend.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends UserFriendFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, UserFriendFindUniqueOrThrowArgs>
    ): Prisma__UserFriendClient<UserFriendGetPayload<T>>

    /**
     * Find the first UserFriend that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFriendFindFirstArgs} args - Arguments to find a UserFriend
     * @example
     * // Get one UserFriend
     * const userFriend = await prisma.userFriend.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends UserFriendFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, UserFriendFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'UserFriend'> extends True ? Prisma__UserFriendClient<UserFriendGetPayload<T>> : Prisma__UserFriendClient<UserFriendGetPayload<T> | null, null>

    /**
     * Find the first UserFriend that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFriendFindFirstOrThrowArgs} args - Arguments to find a UserFriend
     * @example
     * // Get one UserFriend
     * const userFriend = await prisma.userFriend.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends UserFriendFindFirstOrThrowArgs>(
      args?: SelectSubset<T, UserFriendFindFirstOrThrowArgs>
    ): Prisma__UserFriendClient<UserFriendGetPayload<T>>

    /**
     * Find zero or more UserFriends that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFriendFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all UserFriends
     * const userFriends = await prisma.userFriend.findMany()
     * 
     * // Get first 10 UserFriends
     * const userFriends = await prisma.userFriend.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userFriendWithIdOnly = await prisma.userFriend.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends UserFriendFindManyArgs>(
      args?: SelectSubset<T, UserFriendFindManyArgs>
    ): Prisma.PrismaPromise<Array<UserFriendGetPayload<T>>>

    /**
     * Create a UserFriend.
     * @param {UserFriendCreateArgs} args - Arguments to create a UserFriend.
     * @example
     * // Create one UserFriend
     * const UserFriend = await prisma.userFriend.create({
     *   data: {
     *     // ... data to create a UserFriend
     *   }
     * })
     * 
    **/
    create<T extends UserFriendCreateArgs>(
      args: SelectSubset<T, UserFriendCreateArgs>
    ): Prisma__UserFriendClient<UserFriendGetPayload<T>>

    /**
     * Create many UserFriends.
     *     @param {UserFriendCreateManyArgs} args - Arguments to create many UserFriends.
     *     @example
     *     // Create many UserFriends
     *     const userFriend = await prisma.userFriend.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends UserFriendCreateManyArgs>(
      args?: SelectSubset<T, UserFriendCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a UserFriend.
     * @param {UserFriendDeleteArgs} args - Arguments to delete one UserFriend.
     * @example
     * // Delete one UserFriend
     * const UserFriend = await prisma.userFriend.delete({
     *   where: {
     *     // ... filter to delete one UserFriend
     *   }
     * })
     * 
    **/
    delete<T extends UserFriendDeleteArgs>(
      args: SelectSubset<T, UserFriendDeleteArgs>
    ): Prisma__UserFriendClient<UserFriendGetPayload<T>>

    /**
     * Update one UserFriend.
     * @param {UserFriendUpdateArgs} args - Arguments to update one UserFriend.
     * @example
     * // Update one UserFriend
     * const userFriend = await prisma.userFriend.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends UserFriendUpdateArgs>(
      args: SelectSubset<T, UserFriendUpdateArgs>
    ): Prisma__UserFriendClient<UserFriendGetPayload<T>>

    /**
     * Delete zero or more UserFriends.
     * @param {UserFriendDeleteManyArgs} args - Arguments to filter UserFriends to delete.
     * @example
     * // Delete a few UserFriends
     * const { count } = await prisma.userFriend.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends UserFriendDeleteManyArgs>(
      args?: SelectSubset<T, UserFriendDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more UserFriends.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFriendUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many UserFriends
     * const userFriend = await prisma.userFriend.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends UserFriendUpdateManyArgs>(
      args: SelectSubset<T, UserFriendUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one UserFriend.
     * @param {UserFriendUpsertArgs} args - Arguments to update or create a UserFriend.
     * @example
     * // Update or create a UserFriend
     * const userFriend = await prisma.userFriend.upsert({
     *   create: {
     *     // ... data to create a UserFriend
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the UserFriend we want to update
     *   }
     * })
    **/
    upsert<T extends UserFriendUpsertArgs>(
      args: SelectSubset<T, UserFriendUpsertArgs>
    ): Prisma__UserFriendClient<UserFriendGetPayload<T>>

    /**
     * Count the number of UserFriends.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFriendCountArgs} args - Arguments to filter UserFriends to count.
     * @example
     * // Count the number of UserFriends
     * const count = await prisma.userFriend.count({
     *   where: {
     *     // ... the filter for the UserFriends we want to count
     *   }
     * })
    **/
    count<T extends UserFriendCountArgs>(
      args?: Subset<T, UserFriendCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserFriendCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a UserFriend.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFriendAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserFriendAggregateArgs>(args: Subset<T, UserFriendAggregateArgs>): Prisma.PrismaPromise<GetUserFriendAggregateType<T>>

    /**
     * Group by UserFriend.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFriendGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserFriendGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserFriendGroupByArgs['orderBy'] }
        : { orderBy?: UserFriendGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserFriendGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserFriendGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for UserFriend.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__UserFriendClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    user<T extends UserArgs= {}>(args?: Subset<T, UserArgs>): Prisma__UserClient<UserGetPayload<T> | Null>;

    friend<T extends UserArgs= {}>(args?: Subset<T, UserArgs>): Prisma__UserClient<UserGetPayload<T> | Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * UserFriend base type for findUnique actions
   */
  export type UserFriendFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the UserFriend
     */
    select?: UserFriendSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserFriendInclude | null
    /**
     * Filter, which UserFriend to fetch.
     */
    where: UserFriendWhereUniqueInput
  }

  /**
   * UserFriend findUnique
   */
  export interface UserFriendFindUniqueArgs extends UserFriendFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * UserFriend findUniqueOrThrow
   */
  export type UserFriendFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the UserFriend
     */
    select?: UserFriendSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserFriendInclude | null
    /**
     * Filter, which UserFriend to fetch.
     */
    where: UserFriendWhereUniqueInput
  }


  /**
   * UserFriend base type for findFirst actions
   */
  export type UserFriendFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the UserFriend
     */
    select?: UserFriendSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserFriendInclude | null
    /**
     * Filter, which UserFriend to fetch.
     */
    where?: UserFriendWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserFriends to fetch.
     */
    orderBy?: Enumerable<UserFriendOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UserFriends.
     */
    cursor?: UserFriendWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserFriends from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserFriends.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UserFriends.
     */
    distinct?: Enumerable<UserFriendScalarFieldEnum>
  }

  /**
   * UserFriend findFirst
   */
  export interface UserFriendFindFirstArgs extends UserFriendFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * UserFriend findFirstOrThrow
   */
  export type UserFriendFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the UserFriend
     */
    select?: UserFriendSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserFriendInclude | null
    /**
     * Filter, which UserFriend to fetch.
     */
    where?: UserFriendWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserFriends to fetch.
     */
    orderBy?: Enumerable<UserFriendOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UserFriends.
     */
    cursor?: UserFriendWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserFriends from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserFriends.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UserFriends.
     */
    distinct?: Enumerable<UserFriendScalarFieldEnum>
  }


  /**
   * UserFriend findMany
   */
  export type UserFriendFindManyArgs = {
    /**
     * Select specific fields to fetch from the UserFriend
     */
    select?: UserFriendSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserFriendInclude | null
    /**
     * Filter, which UserFriends to fetch.
     */
    where?: UserFriendWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserFriends to fetch.
     */
    orderBy?: Enumerable<UserFriendOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing UserFriends.
     */
    cursor?: UserFriendWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserFriends from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserFriends.
     */
    skip?: number
    distinct?: Enumerable<UserFriendScalarFieldEnum>
  }


  /**
   * UserFriend create
   */
  export type UserFriendCreateArgs = {
    /**
     * Select specific fields to fetch from the UserFriend
     */
    select?: UserFriendSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserFriendInclude | null
    /**
     * The data needed to create a UserFriend.
     */
    data: XOR<UserFriendCreateInput, UserFriendUncheckedCreateInput>
  }


  /**
   * UserFriend createMany
   */
  export type UserFriendCreateManyArgs = {
    /**
     * The data used to create many UserFriends.
     */
    data: Enumerable<UserFriendCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * UserFriend update
   */
  export type UserFriendUpdateArgs = {
    /**
     * Select specific fields to fetch from the UserFriend
     */
    select?: UserFriendSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserFriendInclude | null
    /**
     * The data needed to update a UserFriend.
     */
    data: XOR<UserFriendUpdateInput, UserFriendUncheckedUpdateInput>
    /**
     * Choose, which UserFriend to update.
     */
    where: UserFriendWhereUniqueInput
  }


  /**
   * UserFriend updateMany
   */
  export type UserFriendUpdateManyArgs = {
    /**
     * The data used to update UserFriends.
     */
    data: XOR<UserFriendUpdateManyMutationInput, UserFriendUncheckedUpdateManyInput>
    /**
     * Filter which UserFriends to update
     */
    where?: UserFriendWhereInput
  }


  /**
   * UserFriend upsert
   */
  export type UserFriendUpsertArgs = {
    /**
     * Select specific fields to fetch from the UserFriend
     */
    select?: UserFriendSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserFriendInclude | null
    /**
     * The filter to search for the UserFriend to update in case it exists.
     */
    where: UserFriendWhereUniqueInput
    /**
     * In case the UserFriend found by the `where` argument doesn't exist, create a new UserFriend with this data.
     */
    create: XOR<UserFriendCreateInput, UserFriendUncheckedCreateInput>
    /**
     * In case the UserFriend was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserFriendUpdateInput, UserFriendUncheckedUpdateInput>
  }


  /**
   * UserFriend delete
   */
  export type UserFriendDeleteArgs = {
    /**
     * Select specific fields to fetch from the UserFriend
     */
    select?: UserFriendSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserFriendInclude | null
    /**
     * Filter which UserFriend to delete.
     */
    where: UserFriendWhereUniqueInput
  }


  /**
   * UserFriend deleteMany
   */
  export type UserFriendDeleteManyArgs = {
    /**
     * Filter which UserFriends to delete
     */
    where?: UserFriendWhereInput
  }


  /**
   * UserFriend without action
   */
  export type UserFriendArgs = {
    /**
     * Select specific fields to fetch from the UserFriend
     */
    select?: UserFriendSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserFriendInclude | null
  }



  /**
   * Model MatchHistory
   */


  export type AggregateMatchHistory = {
    _count: MatchHistoryCountAggregateOutputType | null
    _avg: MatchHistoryAvgAggregateOutputType | null
    _sum: MatchHistorySumAggregateOutputType | null
    _min: MatchHistoryMinAggregateOutputType | null
    _max: MatchHistoryMaxAggregateOutputType | null
  }

  export type MatchHistoryAvgAggregateOutputType = {
    id: number | null
    userId: number | null
    ladder: number | null
  }

  export type MatchHistorySumAggregateOutputType = {
    id: number | null
    userId: number | null
    ladder: number | null
  }

  export type MatchHistoryMinAggregateOutputType = {
    id: number | null
    userId: number | null
    userName: string | null
    opponentName: string | null
    createdAt: Date | null
    ladder: number | null
    won: boolean | null
  }

  export type MatchHistoryMaxAggregateOutputType = {
    id: number | null
    userId: number | null
    userName: string | null
    opponentName: string | null
    createdAt: Date | null
    ladder: number | null
    won: boolean | null
  }

  export type MatchHistoryCountAggregateOutputType = {
    id: number
    userId: number
    userName: number
    opponentName: number
    createdAt: number
    ladder: number
    won: number
    _all: number
  }


  export type MatchHistoryAvgAggregateInputType = {
    id?: true
    userId?: true
    ladder?: true
  }

  export type MatchHistorySumAggregateInputType = {
    id?: true
    userId?: true
    ladder?: true
  }

  export type MatchHistoryMinAggregateInputType = {
    id?: true
    userId?: true
    userName?: true
    opponentName?: true
    createdAt?: true
    ladder?: true
    won?: true
  }

  export type MatchHistoryMaxAggregateInputType = {
    id?: true
    userId?: true
    userName?: true
    opponentName?: true
    createdAt?: true
    ladder?: true
    won?: true
  }

  export type MatchHistoryCountAggregateInputType = {
    id?: true
    userId?: true
    userName?: true
    opponentName?: true
    createdAt?: true
    ladder?: true
    won?: true
    _all?: true
  }

  export type MatchHistoryAggregateArgs = {
    /**
     * Filter which MatchHistory to aggregate.
     */
    where?: MatchHistoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MatchHistories to fetch.
     */
    orderBy?: Enumerable<MatchHistoryOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: MatchHistoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MatchHistories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MatchHistories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned MatchHistories
    **/
    _count?: true | MatchHistoryCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: MatchHistoryAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: MatchHistorySumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: MatchHistoryMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: MatchHistoryMaxAggregateInputType
  }

  export type GetMatchHistoryAggregateType<T extends MatchHistoryAggregateArgs> = {
        [P in keyof T & keyof AggregateMatchHistory]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateMatchHistory[P]>
      : GetScalarType<T[P], AggregateMatchHistory[P]>
  }




  export type MatchHistoryGroupByArgs = {
    where?: MatchHistoryWhereInput
    orderBy?: Enumerable<MatchHistoryOrderByWithAggregationInput>
    by: MatchHistoryScalarFieldEnum[]
    having?: MatchHistoryScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: MatchHistoryCountAggregateInputType | true
    _avg?: MatchHistoryAvgAggregateInputType
    _sum?: MatchHistorySumAggregateInputType
    _min?: MatchHistoryMinAggregateInputType
    _max?: MatchHistoryMaxAggregateInputType
  }


  export type MatchHistoryGroupByOutputType = {
    id: number
    userId: number
    userName: string
    opponentName: string
    createdAt: Date
    ladder: number
    won: boolean
    _count: MatchHistoryCountAggregateOutputType | null
    _avg: MatchHistoryAvgAggregateOutputType | null
    _sum: MatchHistorySumAggregateOutputType | null
    _min: MatchHistoryMinAggregateOutputType | null
    _max: MatchHistoryMaxAggregateOutputType | null
  }

  type GetMatchHistoryGroupByPayload<T extends MatchHistoryGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<MatchHistoryGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof MatchHistoryGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], MatchHistoryGroupByOutputType[P]>
            : GetScalarType<T[P], MatchHistoryGroupByOutputType[P]>
        }
      >
    >


  export type MatchHistorySelect = {
    id?: boolean
    userId?: boolean
    userName?: boolean
    opponentName?: boolean
    createdAt?: boolean
    ladder?: boolean
    won?: boolean
    user?: boolean | UserArgs
  }


  export type MatchHistoryInclude = {
    user?: boolean | UserArgs
  }

  export type MatchHistoryGetPayload<S extends boolean | null | undefined | MatchHistoryArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? MatchHistory :
    S extends undefined ? never :
    S extends { include: any } & (MatchHistoryArgs | MatchHistoryFindManyArgs)
    ? MatchHistory  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'user' ? UserGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (MatchHistoryArgs | MatchHistoryFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'user' ? UserGetPayload<S['select'][P]> :  P extends keyof MatchHistory ? MatchHistory[P] : never
  } 
      : MatchHistory


  type MatchHistoryCountArgs = 
    Omit<MatchHistoryFindManyArgs, 'select' | 'include'> & {
      select?: MatchHistoryCountAggregateInputType | true
    }

  export interface MatchHistoryDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one MatchHistory that matches the filter.
     * @param {MatchHistoryFindUniqueArgs} args - Arguments to find a MatchHistory
     * @example
     * // Get one MatchHistory
     * const matchHistory = await prisma.matchHistory.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends MatchHistoryFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, MatchHistoryFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'MatchHistory'> extends True ? Prisma__MatchHistoryClient<MatchHistoryGetPayload<T>> : Prisma__MatchHistoryClient<MatchHistoryGetPayload<T> | null, null>

    /**
     * Find one MatchHistory that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {MatchHistoryFindUniqueOrThrowArgs} args - Arguments to find a MatchHistory
     * @example
     * // Get one MatchHistory
     * const matchHistory = await prisma.matchHistory.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends MatchHistoryFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, MatchHistoryFindUniqueOrThrowArgs>
    ): Prisma__MatchHistoryClient<MatchHistoryGetPayload<T>>

    /**
     * Find the first MatchHistory that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MatchHistoryFindFirstArgs} args - Arguments to find a MatchHistory
     * @example
     * // Get one MatchHistory
     * const matchHistory = await prisma.matchHistory.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends MatchHistoryFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, MatchHistoryFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'MatchHistory'> extends True ? Prisma__MatchHistoryClient<MatchHistoryGetPayload<T>> : Prisma__MatchHistoryClient<MatchHistoryGetPayload<T> | null, null>

    /**
     * Find the first MatchHistory that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MatchHistoryFindFirstOrThrowArgs} args - Arguments to find a MatchHistory
     * @example
     * // Get one MatchHistory
     * const matchHistory = await prisma.matchHistory.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends MatchHistoryFindFirstOrThrowArgs>(
      args?: SelectSubset<T, MatchHistoryFindFirstOrThrowArgs>
    ): Prisma__MatchHistoryClient<MatchHistoryGetPayload<T>>

    /**
     * Find zero or more MatchHistories that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MatchHistoryFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all MatchHistories
     * const matchHistories = await prisma.matchHistory.findMany()
     * 
     * // Get first 10 MatchHistories
     * const matchHistories = await prisma.matchHistory.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const matchHistoryWithIdOnly = await prisma.matchHistory.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends MatchHistoryFindManyArgs>(
      args?: SelectSubset<T, MatchHistoryFindManyArgs>
    ): Prisma.PrismaPromise<Array<MatchHistoryGetPayload<T>>>

    /**
     * Create a MatchHistory.
     * @param {MatchHistoryCreateArgs} args - Arguments to create a MatchHistory.
     * @example
     * // Create one MatchHistory
     * const MatchHistory = await prisma.matchHistory.create({
     *   data: {
     *     // ... data to create a MatchHistory
     *   }
     * })
     * 
    **/
    create<T extends MatchHistoryCreateArgs>(
      args: SelectSubset<T, MatchHistoryCreateArgs>
    ): Prisma__MatchHistoryClient<MatchHistoryGetPayload<T>>

    /**
     * Create many MatchHistories.
     *     @param {MatchHistoryCreateManyArgs} args - Arguments to create many MatchHistories.
     *     @example
     *     // Create many MatchHistories
     *     const matchHistory = await prisma.matchHistory.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends MatchHistoryCreateManyArgs>(
      args?: SelectSubset<T, MatchHistoryCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a MatchHistory.
     * @param {MatchHistoryDeleteArgs} args - Arguments to delete one MatchHistory.
     * @example
     * // Delete one MatchHistory
     * const MatchHistory = await prisma.matchHistory.delete({
     *   where: {
     *     // ... filter to delete one MatchHistory
     *   }
     * })
     * 
    **/
    delete<T extends MatchHistoryDeleteArgs>(
      args: SelectSubset<T, MatchHistoryDeleteArgs>
    ): Prisma__MatchHistoryClient<MatchHistoryGetPayload<T>>

    /**
     * Update one MatchHistory.
     * @param {MatchHistoryUpdateArgs} args - Arguments to update one MatchHistory.
     * @example
     * // Update one MatchHistory
     * const matchHistory = await prisma.matchHistory.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends MatchHistoryUpdateArgs>(
      args: SelectSubset<T, MatchHistoryUpdateArgs>
    ): Prisma__MatchHistoryClient<MatchHistoryGetPayload<T>>

    /**
     * Delete zero or more MatchHistories.
     * @param {MatchHistoryDeleteManyArgs} args - Arguments to filter MatchHistories to delete.
     * @example
     * // Delete a few MatchHistories
     * const { count } = await prisma.matchHistory.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends MatchHistoryDeleteManyArgs>(
      args?: SelectSubset<T, MatchHistoryDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more MatchHistories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MatchHistoryUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many MatchHistories
     * const matchHistory = await prisma.matchHistory.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends MatchHistoryUpdateManyArgs>(
      args: SelectSubset<T, MatchHistoryUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one MatchHistory.
     * @param {MatchHistoryUpsertArgs} args - Arguments to update or create a MatchHistory.
     * @example
     * // Update or create a MatchHistory
     * const matchHistory = await prisma.matchHistory.upsert({
     *   create: {
     *     // ... data to create a MatchHistory
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the MatchHistory we want to update
     *   }
     * })
    **/
    upsert<T extends MatchHistoryUpsertArgs>(
      args: SelectSubset<T, MatchHistoryUpsertArgs>
    ): Prisma__MatchHistoryClient<MatchHistoryGetPayload<T>>

    /**
     * Count the number of MatchHistories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MatchHistoryCountArgs} args - Arguments to filter MatchHistories to count.
     * @example
     * // Count the number of MatchHistories
     * const count = await prisma.matchHistory.count({
     *   where: {
     *     // ... the filter for the MatchHistories we want to count
     *   }
     * })
    **/
    count<T extends MatchHistoryCountArgs>(
      args?: Subset<T, MatchHistoryCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], MatchHistoryCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a MatchHistory.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MatchHistoryAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends MatchHistoryAggregateArgs>(args: Subset<T, MatchHistoryAggregateArgs>): Prisma.PrismaPromise<GetMatchHistoryAggregateType<T>>

    /**
     * Group by MatchHistory.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MatchHistoryGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends MatchHistoryGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: MatchHistoryGroupByArgs['orderBy'] }
        : { orderBy?: MatchHistoryGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, MatchHistoryGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetMatchHistoryGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for MatchHistory.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__MatchHistoryClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    user<T extends UserArgs= {}>(args?: Subset<T, UserArgs>): Prisma__UserClient<UserGetPayload<T> | Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * MatchHistory base type for findUnique actions
   */
  export type MatchHistoryFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the MatchHistory
     */
    select?: MatchHistorySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MatchHistoryInclude | null
    /**
     * Filter, which MatchHistory to fetch.
     */
    where: MatchHistoryWhereUniqueInput
  }

  /**
   * MatchHistory findUnique
   */
  export interface MatchHistoryFindUniqueArgs extends MatchHistoryFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * MatchHistory findUniqueOrThrow
   */
  export type MatchHistoryFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the MatchHistory
     */
    select?: MatchHistorySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MatchHistoryInclude | null
    /**
     * Filter, which MatchHistory to fetch.
     */
    where: MatchHistoryWhereUniqueInput
  }


  /**
   * MatchHistory base type for findFirst actions
   */
  export type MatchHistoryFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the MatchHistory
     */
    select?: MatchHistorySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MatchHistoryInclude | null
    /**
     * Filter, which MatchHistory to fetch.
     */
    where?: MatchHistoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MatchHistories to fetch.
     */
    orderBy?: Enumerable<MatchHistoryOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for MatchHistories.
     */
    cursor?: MatchHistoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MatchHistories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MatchHistories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of MatchHistories.
     */
    distinct?: Enumerable<MatchHistoryScalarFieldEnum>
  }

  /**
   * MatchHistory findFirst
   */
  export interface MatchHistoryFindFirstArgs extends MatchHistoryFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * MatchHistory findFirstOrThrow
   */
  export type MatchHistoryFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the MatchHistory
     */
    select?: MatchHistorySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MatchHistoryInclude | null
    /**
     * Filter, which MatchHistory to fetch.
     */
    where?: MatchHistoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MatchHistories to fetch.
     */
    orderBy?: Enumerable<MatchHistoryOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for MatchHistories.
     */
    cursor?: MatchHistoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MatchHistories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MatchHistories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of MatchHistories.
     */
    distinct?: Enumerable<MatchHistoryScalarFieldEnum>
  }


  /**
   * MatchHistory findMany
   */
  export type MatchHistoryFindManyArgs = {
    /**
     * Select specific fields to fetch from the MatchHistory
     */
    select?: MatchHistorySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MatchHistoryInclude | null
    /**
     * Filter, which MatchHistories to fetch.
     */
    where?: MatchHistoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MatchHistories to fetch.
     */
    orderBy?: Enumerable<MatchHistoryOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing MatchHistories.
     */
    cursor?: MatchHistoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MatchHistories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MatchHistories.
     */
    skip?: number
    distinct?: Enumerable<MatchHistoryScalarFieldEnum>
  }


  /**
   * MatchHistory create
   */
  export type MatchHistoryCreateArgs = {
    /**
     * Select specific fields to fetch from the MatchHistory
     */
    select?: MatchHistorySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MatchHistoryInclude | null
    /**
     * The data needed to create a MatchHistory.
     */
    data: XOR<MatchHistoryCreateInput, MatchHistoryUncheckedCreateInput>
  }


  /**
   * MatchHistory createMany
   */
  export type MatchHistoryCreateManyArgs = {
    /**
     * The data used to create many MatchHistories.
     */
    data: Enumerable<MatchHistoryCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * MatchHistory update
   */
  export type MatchHistoryUpdateArgs = {
    /**
     * Select specific fields to fetch from the MatchHistory
     */
    select?: MatchHistorySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MatchHistoryInclude | null
    /**
     * The data needed to update a MatchHistory.
     */
    data: XOR<MatchHistoryUpdateInput, MatchHistoryUncheckedUpdateInput>
    /**
     * Choose, which MatchHistory to update.
     */
    where: MatchHistoryWhereUniqueInput
  }


  /**
   * MatchHistory updateMany
   */
  export type MatchHistoryUpdateManyArgs = {
    /**
     * The data used to update MatchHistories.
     */
    data: XOR<MatchHistoryUpdateManyMutationInput, MatchHistoryUncheckedUpdateManyInput>
    /**
     * Filter which MatchHistories to update
     */
    where?: MatchHistoryWhereInput
  }


  /**
   * MatchHistory upsert
   */
  export type MatchHistoryUpsertArgs = {
    /**
     * Select specific fields to fetch from the MatchHistory
     */
    select?: MatchHistorySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MatchHistoryInclude | null
    /**
     * The filter to search for the MatchHistory to update in case it exists.
     */
    where: MatchHistoryWhereUniqueInput
    /**
     * In case the MatchHistory found by the `where` argument doesn't exist, create a new MatchHistory with this data.
     */
    create: XOR<MatchHistoryCreateInput, MatchHistoryUncheckedCreateInput>
    /**
     * In case the MatchHistory was found with the provided `where` argument, update it with this data.
     */
    update: XOR<MatchHistoryUpdateInput, MatchHistoryUncheckedUpdateInput>
  }


  /**
   * MatchHistory delete
   */
  export type MatchHistoryDeleteArgs = {
    /**
     * Select specific fields to fetch from the MatchHistory
     */
    select?: MatchHistorySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MatchHistoryInclude | null
    /**
     * Filter which MatchHistory to delete.
     */
    where: MatchHistoryWhereUniqueInput
  }


  /**
   * MatchHistory deleteMany
   */
  export type MatchHistoryDeleteManyArgs = {
    /**
     * Filter which MatchHistories to delete
     */
    where?: MatchHistoryWhereInput
  }


  /**
   * MatchHistory without action
   */
  export type MatchHistoryArgs = {
    /**
     * Select specific fields to fetch from the MatchHistory
     */
    select?: MatchHistorySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MatchHistoryInclude | null
  }



  /**
   * Model Chat
   */


  export type AggregateChat = {
    _count: ChatCountAggregateOutputType | null
    _avg: ChatAvgAggregateOutputType | null
    _sum: ChatSumAggregateOutputType | null
    _min: ChatMinAggregateOutputType | null
    _max: ChatMaxAggregateOutputType | null
  }

  export type ChatAvgAggregateOutputType = {
    id: number | null
  }

  export type ChatSumAggregateOutputType = {
    id: number | null
  }

  export type ChatMinAggregateOutputType = {
    id: number | null
    createdAt: Date | null
    updatedAt: Date | null
    name: string | null
    type: ChatType | null
    password: string | null
  }

  export type ChatMaxAggregateOutputType = {
    id: number | null
    createdAt: Date | null
    updatedAt: Date | null
    name: string | null
    type: ChatType | null
    password: string | null
  }

  export type ChatCountAggregateOutputType = {
    id: number
    createdAt: number
    updatedAt: number
    name: number
    type: number
    password: number
    _all: number
  }


  export type ChatAvgAggregateInputType = {
    id?: true
  }

  export type ChatSumAggregateInputType = {
    id?: true
  }

  export type ChatMinAggregateInputType = {
    id?: true
    createdAt?: true
    updatedAt?: true
    name?: true
    type?: true
    password?: true
  }

  export type ChatMaxAggregateInputType = {
    id?: true
    createdAt?: true
    updatedAt?: true
    name?: true
    type?: true
    password?: true
  }

  export type ChatCountAggregateInputType = {
    id?: true
    createdAt?: true
    updatedAt?: true
    name?: true
    type?: true
    password?: true
    _all?: true
  }

  export type ChatAggregateArgs = {
    /**
     * Filter which Chat to aggregate.
     */
    where?: ChatWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Chats to fetch.
     */
    orderBy?: Enumerable<ChatOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ChatWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Chats from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Chats.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Chats
    **/
    _count?: true | ChatCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ChatAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ChatSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ChatMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ChatMaxAggregateInputType
  }

  export type GetChatAggregateType<T extends ChatAggregateArgs> = {
        [P in keyof T & keyof AggregateChat]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateChat[P]>
      : GetScalarType<T[P], AggregateChat[P]>
  }




  export type ChatGroupByArgs = {
    where?: ChatWhereInput
    orderBy?: Enumerable<ChatOrderByWithAggregationInput>
    by: ChatScalarFieldEnum[]
    having?: ChatScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ChatCountAggregateInputType | true
    _avg?: ChatAvgAggregateInputType
    _sum?: ChatSumAggregateInputType
    _min?: ChatMinAggregateInputType
    _max?: ChatMaxAggregateInputType
  }


  export type ChatGroupByOutputType = {
    id: number
    createdAt: Date
    updatedAt: Date
    name: string
    type: ChatType
    password: string | null
    _count: ChatCountAggregateOutputType | null
    _avg: ChatAvgAggregateOutputType | null
    _sum: ChatSumAggregateOutputType | null
    _min: ChatMinAggregateOutputType | null
    _max: ChatMaxAggregateOutputType | null
  }

  type GetChatGroupByPayload<T extends ChatGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<ChatGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ChatGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ChatGroupByOutputType[P]>
            : GetScalarType<T[P], ChatGroupByOutputType[P]>
        }
      >
    >


  export type ChatSelect = {
    id?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    name?: boolean
    type?: boolean
    password?: boolean
    messages?: boolean | Chat$messagesArgs
    users?: boolean | Chat$usersArgs
    _count?: boolean | ChatCountOutputTypeArgs
  }


  export type ChatInclude = {
    messages?: boolean | Chat$messagesArgs
    users?: boolean | Chat$usersArgs
    _count?: boolean | ChatCountOutputTypeArgs
  }

  export type ChatGetPayload<S extends boolean | null | undefined | ChatArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? Chat :
    S extends undefined ? never :
    S extends { include: any } & (ChatArgs | ChatFindManyArgs)
    ? Chat  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'messages' ? Array < MessageGetPayload<S['include'][P]>>  :
        P extends 'users' ? Array < UserChatGetPayload<S['include'][P]>>  :
        P extends '_count' ? ChatCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (ChatArgs | ChatFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'messages' ? Array < MessageGetPayload<S['select'][P]>>  :
        P extends 'users' ? Array < UserChatGetPayload<S['select'][P]>>  :
        P extends '_count' ? ChatCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof Chat ? Chat[P] : never
  } 
      : Chat


  type ChatCountArgs = 
    Omit<ChatFindManyArgs, 'select' | 'include'> & {
      select?: ChatCountAggregateInputType | true
    }

  export interface ChatDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one Chat that matches the filter.
     * @param {ChatFindUniqueArgs} args - Arguments to find a Chat
     * @example
     * // Get one Chat
     * const chat = await prisma.chat.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends ChatFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, ChatFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Chat'> extends True ? Prisma__ChatClient<ChatGetPayload<T>> : Prisma__ChatClient<ChatGetPayload<T> | null, null>

    /**
     * Find one Chat that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {ChatFindUniqueOrThrowArgs} args - Arguments to find a Chat
     * @example
     * // Get one Chat
     * const chat = await prisma.chat.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends ChatFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, ChatFindUniqueOrThrowArgs>
    ): Prisma__ChatClient<ChatGetPayload<T>>

    /**
     * Find the first Chat that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChatFindFirstArgs} args - Arguments to find a Chat
     * @example
     * // Get one Chat
     * const chat = await prisma.chat.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends ChatFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, ChatFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Chat'> extends True ? Prisma__ChatClient<ChatGetPayload<T>> : Prisma__ChatClient<ChatGetPayload<T> | null, null>

    /**
     * Find the first Chat that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChatFindFirstOrThrowArgs} args - Arguments to find a Chat
     * @example
     * // Get one Chat
     * const chat = await prisma.chat.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends ChatFindFirstOrThrowArgs>(
      args?: SelectSubset<T, ChatFindFirstOrThrowArgs>
    ): Prisma__ChatClient<ChatGetPayload<T>>

    /**
     * Find zero or more Chats that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChatFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Chats
     * const chats = await prisma.chat.findMany()
     * 
     * // Get first 10 Chats
     * const chats = await prisma.chat.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const chatWithIdOnly = await prisma.chat.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends ChatFindManyArgs>(
      args?: SelectSubset<T, ChatFindManyArgs>
    ): Prisma.PrismaPromise<Array<ChatGetPayload<T>>>

    /**
     * Create a Chat.
     * @param {ChatCreateArgs} args - Arguments to create a Chat.
     * @example
     * // Create one Chat
     * const Chat = await prisma.chat.create({
     *   data: {
     *     // ... data to create a Chat
     *   }
     * })
     * 
    **/
    create<T extends ChatCreateArgs>(
      args: SelectSubset<T, ChatCreateArgs>
    ): Prisma__ChatClient<ChatGetPayload<T>>

    /**
     * Create many Chats.
     *     @param {ChatCreateManyArgs} args - Arguments to create many Chats.
     *     @example
     *     // Create many Chats
     *     const chat = await prisma.chat.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends ChatCreateManyArgs>(
      args?: SelectSubset<T, ChatCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Chat.
     * @param {ChatDeleteArgs} args - Arguments to delete one Chat.
     * @example
     * // Delete one Chat
     * const Chat = await prisma.chat.delete({
     *   where: {
     *     // ... filter to delete one Chat
     *   }
     * })
     * 
    **/
    delete<T extends ChatDeleteArgs>(
      args: SelectSubset<T, ChatDeleteArgs>
    ): Prisma__ChatClient<ChatGetPayload<T>>

    /**
     * Update one Chat.
     * @param {ChatUpdateArgs} args - Arguments to update one Chat.
     * @example
     * // Update one Chat
     * const chat = await prisma.chat.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends ChatUpdateArgs>(
      args: SelectSubset<T, ChatUpdateArgs>
    ): Prisma__ChatClient<ChatGetPayload<T>>

    /**
     * Delete zero or more Chats.
     * @param {ChatDeleteManyArgs} args - Arguments to filter Chats to delete.
     * @example
     * // Delete a few Chats
     * const { count } = await prisma.chat.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends ChatDeleteManyArgs>(
      args?: SelectSubset<T, ChatDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Chats.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChatUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Chats
     * const chat = await prisma.chat.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends ChatUpdateManyArgs>(
      args: SelectSubset<T, ChatUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Chat.
     * @param {ChatUpsertArgs} args - Arguments to update or create a Chat.
     * @example
     * // Update or create a Chat
     * const chat = await prisma.chat.upsert({
     *   create: {
     *     // ... data to create a Chat
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Chat we want to update
     *   }
     * })
    **/
    upsert<T extends ChatUpsertArgs>(
      args: SelectSubset<T, ChatUpsertArgs>
    ): Prisma__ChatClient<ChatGetPayload<T>>

    /**
     * Count the number of Chats.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChatCountArgs} args - Arguments to filter Chats to count.
     * @example
     * // Count the number of Chats
     * const count = await prisma.chat.count({
     *   where: {
     *     // ... the filter for the Chats we want to count
     *   }
     * })
    **/
    count<T extends ChatCountArgs>(
      args?: Subset<T, ChatCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ChatCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Chat.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChatAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ChatAggregateArgs>(args: Subset<T, ChatAggregateArgs>): Prisma.PrismaPromise<GetChatAggregateType<T>>

    /**
     * Group by Chat.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChatGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ChatGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ChatGroupByArgs['orderBy'] }
        : { orderBy?: ChatGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ChatGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetChatGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Chat.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__ChatClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    messages<T extends Chat$messagesArgs= {}>(args?: Subset<T, Chat$messagesArgs>): Prisma.PrismaPromise<Array<MessageGetPayload<T>>| Null>;

    users<T extends Chat$usersArgs= {}>(args?: Subset<T, Chat$usersArgs>): Prisma.PrismaPromise<Array<UserChatGetPayload<T>>| Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Chat base type for findUnique actions
   */
  export type ChatFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the Chat
     */
    select?: ChatSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ChatInclude | null
    /**
     * Filter, which Chat to fetch.
     */
    where: ChatWhereUniqueInput
  }

  /**
   * Chat findUnique
   */
  export interface ChatFindUniqueArgs extends ChatFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Chat findUniqueOrThrow
   */
  export type ChatFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Chat
     */
    select?: ChatSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ChatInclude | null
    /**
     * Filter, which Chat to fetch.
     */
    where: ChatWhereUniqueInput
  }


  /**
   * Chat base type for findFirst actions
   */
  export type ChatFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the Chat
     */
    select?: ChatSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ChatInclude | null
    /**
     * Filter, which Chat to fetch.
     */
    where?: ChatWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Chats to fetch.
     */
    orderBy?: Enumerable<ChatOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Chats.
     */
    cursor?: ChatWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Chats from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Chats.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Chats.
     */
    distinct?: Enumerable<ChatScalarFieldEnum>
  }

  /**
   * Chat findFirst
   */
  export interface ChatFindFirstArgs extends ChatFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Chat findFirstOrThrow
   */
  export type ChatFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Chat
     */
    select?: ChatSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ChatInclude | null
    /**
     * Filter, which Chat to fetch.
     */
    where?: ChatWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Chats to fetch.
     */
    orderBy?: Enumerable<ChatOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Chats.
     */
    cursor?: ChatWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Chats from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Chats.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Chats.
     */
    distinct?: Enumerable<ChatScalarFieldEnum>
  }


  /**
   * Chat findMany
   */
  export type ChatFindManyArgs = {
    /**
     * Select specific fields to fetch from the Chat
     */
    select?: ChatSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ChatInclude | null
    /**
     * Filter, which Chats to fetch.
     */
    where?: ChatWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Chats to fetch.
     */
    orderBy?: Enumerable<ChatOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Chats.
     */
    cursor?: ChatWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Chats from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Chats.
     */
    skip?: number
    distinct?: Enumerable<ChatScalarFieldEnum>
  }


  /**
   * Chat create
   */
  export type ChatCreateArgs = {
    /**
     * Select specific fields to fetch from the Chat
     */
    select?: ChatSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ChatInclude | null
    /**
     * The data needed to create a Chat.
     */
    data: XOR<ChatCreateInput, ChatUncheckedCreateInput>
  }


  /**
   * Chat createMany
   */
  export type ChatCreateManyArgs = {
    /**
     * The data used to create many Chats.
     */
    data: Enumerable<ChatCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Chat update
   */
  export type ChatUpdateArgs = {
    /**
     * Select specific fields to fetch from the Chat
     */
    select?: ChatSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ChatInclude | null
    /**
     * The data needed to update a Chat.
     */
    data: XOR<ChatUpdateInput, ChatUncheckedUpdateInput>
    /**
     * Choose, which Chat to update.
     */
    where: ChatWhereUniqueInput
  }


  /**
   * Chat updateMany
   */
  export type ChatUpdateManyArgs = {
    /**
     * The data used to update Chats.
     */
    data: XOR<ChatUpdateManyMutationInput, ChatUncheckedUpdateManyInput>
    /**
     * Filter which Chats to update
     */
    where?: ChatWhereInput
  }


  /**
   * Chat upsert
   */
  export type ChatUpsertArgs = {
    /**
     * Select specific fields to fetch from the Chat
     */
    select?: ChatSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ChatInclude | null
    /**
     * The filter to search for the Chat to update in case it exists.
     */
    where: ChatWhereUniqueInput
    /**
     * In case the Chat found by the `where` argument doesn't exist, create a new Chat with this data.
     */
    create: XOR<ChatCreateInput, ChatUncheckedCreateInput>
    /**
     * In case the Chat was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ChatUpdateInput, ChatUncheckedUpdateInput>
  }


  /**
   * Chat delete
   */
  export type ChatDeleteArgs = {
    /**
     * Select specific fields to fetch from the Chat
     */
    select?: ChatSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ChatInclude | null
    /**
     * Filter which Chat to delete.
     */
    where: ChatWhereUniqueInput
  }


  /**
   * Chat deleteMany
   */
  export type ChatDeleteManyArgs = {
    /**
     * Filter which Chats to delete
     */
    where?: ChatWhereInput
  }


  /**
   * Chat.messages
   */
  export type Chat$messagesArgs = {
    /**
     * Select specific fields to fetch from the Message
     */
    select?: MessageSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MessageInclude | null
    where?: MessageWhereInput
    orderBy?: Enumerable<MessageOrderByWithRelationInput>
    cursor?: MessageWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<MessageScalarFieldEnum>
  }


  /**
   * Chat.users
   */
  export type Chat$usersArgs = {
    /**
     * Select specific fields to fetch from the UserChat
     */
    select?: UserChatSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserChatInclude | null
    where?: UserChatWhereInput
    orderBy?: Enumerable<UserChatOrderByWithRelationInput>
    cursor?: UserChatWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<UserChatScalarFieldEnum>
  }


  /**
   * Chat without action
   */
  export type ChatArgs = {
    /**
     * Select specific fields to fetch from the Chat
     */
    select?: ChatSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ChatInclude | null
  }



  /**
   * Model Message
   */


  export type AggregateMessage = {
    _count: MessageCountAggregateOutputType | null
    _avg: MessageAvgAggregateOutputType | null
    _sum: MessageSumAggregateOutputType | null
    _min: MessageMinAggregateOutputType | null
    _max: MessageMaxAggregateOutputType | null
  }

  export type MessageAvgAggregateOutputType = {
    id: number | null
    userId: number | null
    chatId: number | null
  }

  export type MessageSumAggregateOutputType = {
    id: number | null
    userId: number | null
    chatId: number | null
  }

  export type MessageMinAggregateOutputType = {
    id: number | null
    createdAt: Date | null
    content: string | null
    userId: number | null
    chatId: number | null
  }

  export type MessageMaxAggregateOutputType = {
    id: number | null
    createdAt: Date | null
    content: string | null
    userId: number | null
    chatId: number | null
  }

  export type MessageCountAggregateOutputType = {
    id: number
    createdAt: number
    content: number
    userId: number
    chatId: number
    _all: number
  }


  export type MessageAvgAggregateInputType = {
    id?: true
    userId?: true
    chatId?: true
  }

  export type MessageSumAggregateInputType = {
    id?: true
    userId?: true
    chatId?: true
  }

  export type MessageMinAggregateInputType = {
    id?: true
    createdAt?: true
    content?: true
    userId?: true
    chatId?: true
  }

  export type MessageMaxAggregateInputType = {
    id?: true
    createdAt?: true
    content?: true
    userId?: true
    chatId?: true
  }

  export type MessageCountAggregateInputType = {
    id?: true
    createdAt?: true
    content?: true
    userId?: true
    chatId?: true
    _all?: true
  }

  export type MessageAggregateArgs = {
    /**
     * Filter which Message to aggregate.
     */
    where?: MessageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Messages to fetch.
     */
    orderBy?: Enumerable<MessageOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: MessageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Messages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Messages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Messages
    **/
    _count?: true | MessageCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: MessageAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: MessageSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: MessageMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: MessageMaxAggregateInputType
  }

  export type GetMessageAggregateType<T extends MessageAggregateArgs> = {
        [P in keyof T & keyof AggregateMessage]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateMessage[P]>
      : GetScalarType<T[P], AggregateMessage[P]>
  }




  export type MessageGroupByArgs = {
    where?: MessageWhereInput
    orderBy?: Enumerable<MessageOrderByWithAggregationInput>
    by: MessageScalarFieldEnum[]
    having?: MessageScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: MessageCountAggregateInputType | true
    _avg?: MessageAvgAggregateInputType
    _sum?: MessageSumAggregateInputType
    _min?: MessageMinAggregateInputType
    _max?: MessageMaxAggregateInputType
  }


  export type MessageGroupByOutputType = {
    id: number
    createdAt: Date
    content: string
    userId: number
    chatId: number
    _count: MessageCountAggregateOutputType | null
    _avg: MessageAvgAggregateOutputType | null
    _sum: MessageSumAggregateOutputType | null
    _min: MessageMinAggregateOutputType | null
    _max: MessageMaxAggregateOutputType | null
  }

  type GetMessageGroupByPayload<T extends MessageGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<MessageGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof MessageGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], MessageGroupByOutputType[P]>
            : GetScalarType<T[P], MessageGroupByOutputType[P]>
        }
      >
    >


  export type MessageSelect = {
    id?: boolean
    createdAt?: boolean
    content?: boolean
    userId?: boolean
    chatId?: boolean
    sender?: boolean | UserArgs
    chat?: boolean | ChatArgs
  }


  export type MessageInclude = {
    sender?: boolean | UserArgs
    chat?: boolean | ChatArgs
  }

  export type MessageGetPayload<S extends boolean | null | undefined | MessageArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? Message :
    S extends undefined ? never :
    S extends { include: any } & (MessageArgs | MessageFindManyArgs)
    ? Message  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'sender' ? UserGetPayload<S['include'][P]> :
        P extends 'chat' ? ChatGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (MessageArgs | MessageFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'sender' ? UserGetPayload<S['select'][P]> :
        P extends 'chat' ? ChatGetPayload<S['select'][P]> :  P extends keyof Message ? Message[P] : never
  } 
      : Message


  type MessageCountArgs = 
    Omit<MessageFindManyArgs, 'select' | 'include'> & {
      select?: MessageCountAggregateInputType | true
    }

  export interface MessageDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one Message that matches the filter.
     * @param {MessageFindUniqueArgs} args - Arguments to find a Message
     * @example
     * // Get one Message
     * const message = await prisma.message.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends MessageFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, MessageFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Message'> extends True ? Prisma__MessageClient<MessageGetPayload<T>> : Prisma__MessageClient<MessageGetPayload<T> | null, null>

    /**
     * Find one Message that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {MessageFindUniqueOrThrowArgs} args - Arguments to find a Message
     * @example
     * // Get one Message
     * const message = await prisma.message.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends MessageFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, MessageFindUniqueOrThrowArgs>
    ): Prisma__MessageClient<MessageGetPayload<T>>

    /**
     * Find the first Message that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MessageFindFirstArgs} args - Arguments to find a Message
     * @example
     * // Get one Message
     * const message = await prisma.message.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends MessageFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, MessageFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Message'> extends True ? Prisma__MessageClient<MessageGetPayload<T>> : Prisma__MessageClient<MessageGetPayload<T> | null, null>

    /**
     * Find the first Message that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MessageFindFirstOrThrowArgs} args - Arguments to find a Message
     * @example
     * // Get one Message
     * const message = await prisma.message.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends MessageFindFirstOrThrowArgs>(
      args?: SelectSubset<T, MessageFindFirstOrThrowArgs>
    ): Prisma__MessageClient<MessageGetPayload<T>>

    /**
     * Find zero or more Messages that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MessageFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Messages
     * const messages = await prisma.message.findMany()
     * 
     * // Get first 10 Messages
     * const messages = await prisma.message.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const messageWithIdOnly = await prisma.message.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends MessageFindManyArgs>(
      args?: SelectSubset<T, MessageFindManyArgs>
    ): Prisma.PrismaPromise<Array<MessageGetPayload<T>>>

    /**
     * Create a Message.
     * @param {MessageCreateArgs} args - Arguments to create a Message.
     * @example
     * // Create one Message
     * const Message = await prisma.message.create({
     *   data: {
     *     // ... data to create a Message
     *   }
     * })
     * 
    **/
    create<T extends MessageCreateArgs>(
      args: SelectSubset<T, MessageCreateArgs>
    ): Prisma__MessageClient<MessageGetPayload<T>>

    /**
     * Create many Messages.
     *     @param {MessageCreateManyArgs} args - Arguments to create many Messages.
     *     @example
     *     // Create many Messages
     *     const message = await prisma.message.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends MessageCreateManyArgs>(
      args?: SelectSubset<T, MessageCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Message.
     * @param {MessageDeleteArgs} args - Arguments to delete one Message.
     * @example
     * // Delete one Message
     * const Message = await prisma.message.delete({
     *   where: {
     *     // ... filter to delete one Message
     *   }
     * })
     * 
    **/
    delete<T extends MessageDeleteArgs>(
      args: SelectSubset<T, MessageDeleteArgs>
    ): Prisma__MessageClient<MessageGetPayload<T>>

    /**
     * Update one Message.
     * @param {MessageUpdateArgs} args - Arguments to update one Message.
     * @example
     * // Update one Message
     * const message = await prisma.message.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends MessageUpdateArgs>(
      args: SelectSubset<T, MessageUpdateArgs>
    ): Prisma__MessageClient<MessageGetPayload<T>>

    /**
     * Delete zero or more Messages.
     * @param {MessageDeleteManyArgs} args - Arguments to filter Messages to delete.
     * @example
     * // Delete a few Messages
     * const { count } = await prisma.message.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends MessageDeleteManyArgs>(
      args?: SelectSubset<T, MessageDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Messages.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MessageUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Messages
     * const message = await prisma.message.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends MessageUpdateManyArgs>(
      args: SelectSubset<T, MessageUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Message.
     * @param {MessageUpsertArgs} args - Arguments to update or create a Message.
     * @example
     * // Update or create a Message
     * const message = await prisma.message.upsert({
     *   create: {
     *     // ... data to create a Message
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Message we want to update
     *   }
     * })
    **/
    upsert<T extends MessageUpsertArgs>(
      args: SelectSubset<T, MessageUpsertArgs>
    ): Prisma__MessageClient<MessageGetPayload<T>>

    /**
     * Count the number of Messages.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MessageCountArgs} args - Arguments to filter Messages to count.
     * @example
     * // Count the number of Messages
     * const count = await prisma.message.count({
     *   where: {
     *     // ... the filter for the Messages we want to count
     *   }
     * })
    **/
    count<T extends MessageCountArgs>(
      args?: Subset<T, MessageCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], MessageCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Message.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MessageAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends MessageAggregateArgs>(args: Subset<T, MessageAggregateArgs>): Prisma.PrismaPromise<GetMessageAggregateType<T>>

    /**
     * Group by Message.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MessageGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends MessageGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: MessageGroupByArgs['orderBy'] }
        : { orderBy?: MessageGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, MessageGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetMessageGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Message.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__MessageClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    sender<T extends UserArgs= {}>(args?: Subset<T, UserArgs>): Prisma__UserClient<UserGetPayload<T> | Null>;

    chat<T extends ChatArgs= {}>(args?: Subset<T, ChatArgs>): Prisma__ChatClient<ChatGetPayload<T> | Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Message base type for findUnique actions
   */
  export type MessageFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the Message
     */
    select?: MessageSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MessageInclude | null
    /**
     * Filter, which Message to fetch.
     */
    where: MessageWhereUniqueInput
  }

  /**
   * Message findUnique
   */
  export interface MessageFindUniqueArgs extends MessageFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Message findUniqueOrThrow
   */
  export type MessageFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Message
     */
    select?: MessageSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MessageInclude | null
    /**
     * Filter, which Message to fetch.
     */
    where: MessageWhereUniqueInput
  }


  /**
   * Message base type for findFirst actions
   */
  export type MessageFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the Message
     */
    select?: MessageSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MessageInclude | null
    /**
     * Filter, which Message to fetch.
     */
    where?: MessageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Messages to fetch.
     */
    orderBy?: Enumerable<MessageOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Messages.
     */
    cursor?: MessageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Messages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Messages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Messages.
     */
    distinct?: Enumerable<MessageScalarFieldEnum>
  }

  /**
   * Message findFirst
   */
  export interface MessageFindFirstArgs extends MessageFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Message findFirstOrThrow
   */
  export type MessageFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Message
     */
    select?: MessageSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MessageInclude | null
    /**
     * Filter, which Message to fetch.
     */
    where?: MessageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Messages to fetch.
     */
    orderBy?: Enumerable<MessageOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Messages.
     */
    cursor?: MessageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Messages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Messages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Messages.
     */
    distinct?: Enumerable<MessageScalarFieldEnum>
  }


  /**
   * Message findMany
   */
  export type MessageFindManyArgs = {
    /**
     * Select specific fields to fetch from the Message
     */
    select?: MessageSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MessageInclude | null
    /**
     * Filter, which Messages to fetch.
     */
    where?: MessageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Messages to fetch.
     */
    orderBy?: Enumerable<MessageOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Messages.
     */
    cursor?: MessageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Messages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Messages.
     */
    skip?: number
    distinct?: Enumerable<MessageScalarFieldEnum>
  }


  /**
   * Message create
   */
  export type MessageCreateArgs = {
    /**
     * Select specific fields to fetch from the Message
     */
    select?: MessageSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MessageInclude | null
    /**
     * The data needed to create a Message.
     */
    data: XOR<MessageCreateInput, MessageUncheckedCreateInput>
  }


  /**
   * Message createMany
   */
  export type MessageCreateManyArgs = {
    /**
     * The data used to create many Messages.
     */
    data: Enumerable<MessageCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Message update
   */
  export type MessageUpdateArgs = {
    /**
     * Select specific fields to fetch from the Message
     */
    select?: MessageSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MessageInclude | null
    /**
     * The data needed to update a Message.
     */
    data: XOR<MessageUpdateInput, MessageUncheckedUpdateInput>
    /**
     * Choose, which Message to update.
     */
    where: MessageWhereUniqueInput
  }


  /**
   * Message updateMany
   */
  export type MessageUpdateManyArgs = {
    /**
     * The data used to update Messages.
     */
    data: XOR<MessageUpdateManyMutationInput, MessageUncheckedUpdateManyInput>
    /**
     * Filter which Messages to update
     */
    where?: MessageWhereInput
  }


  /**
   * Message upsert
   */
  export type MessageUpsertArgs = {
    /**
     * Select specific fields to fetch from the Message
     */
    select?: MessageSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MessageInclude | null
    /**
     * The filter to search for the Message to update in case it exists.
     */
    where: MessageWhereUniqueInput
    /**
     * In case the Message found by the `where` argument doesn't exist, create a new Message with this data.
     */
    create: XOR<MessageCreateInput, MessageUncheckedCreateInput>
    /**
     * In case the Message was found with the provided `where` argument, update it with this data.
     */
    update: XOR<MessageUpdateInput, MessageUncheckedUpdateInput>
  }


  /**
   * Message delete
   */
  export type MessageDeleteArgs = {
    /**
     * Select specific fields to fetch from the Message
     */
    select?: MessageSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MessageInclude | null
    /**
     * Filter which Message to delete.
     */
    where: MessageWhereUniqueInput
  }


  /**
   * Message deleteMany
   */
  export type MessageDeleteManyArgs = {
    /**
     * Filter which Messages to delete
     */
    where?: MessageWhereInput
  }


  /**
   * Message without action
   */
  export type MessageArgs = {
    /**
     * Select specific fields to fetch from the Message
     */
    select?: MessageSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MessageInclude | null
  }



  /**
   * Model UserChat
   */


  export type AggregateUserChat = {
    _count: UserChatCountAggregateOutputType | null
    _avg: UserChatAvgAggregateOutputType | null
    _sum: UserChatSumAggregateOutputType | null
    _min: UserChatMinAggregateOutputType | null
    _max: UserChatMaxAggregateOutputType | null
  }

  export type UserChatAvgAggregateOutputType = {
    userId: number | null
    chatId: number | null
  }

  export type UserChatSumAggregateOutputType = {
    userId: number | null
    chatId: number | null
  }

  export type UserChatMinAggregateOutputType = {
    userId: number | null
    chatId: number | null
    isOwner: boolean | null
    isBlocked: boolean | null
    permissions: string | null
  }

  export type UserChatMaxAggregateOutputType = {
    userId: number | null
    chatId: number | null
    isOwner: boolean | null
    isBlocked: boolean | null
    permissions: string | null
  }

  export type UserChatCountAggregateOutputType = {
    userId: number
    chatId: number
    isOwner: number
    isBlocked: number
    permissions: number
    _all: number
  }


  export type UserChatAvgAggregateInputType = {
    userId?: true
    chatId?: true
  }

  export type UserChatSumAggregateInputType = {
    userId?: true
    chatId?: true
  }

  export type UserChatMinAggregateInputType = {
    userId?: true
    chatId?: true
    isOwner?: true
    isBlocked?: true
    permissions?: true
  }

  export type UserChatMaxAggregateInputType = {
    userId?: true
    chatId?: true
    isOwner?: true
    isBlocked?: true
    permissions?: true
  }

  export type UserChatCountAggregateInputType = {
    userId?: true
    chatId?: true
    isOwner?: true
    isBlocked?: true
    permissions?: true
    _all?: true
  }

  export type UserChatAggregateArgs = {
    /**
     * Filter which UserChat to aggregate.
     */
    where?: UserChatWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserChats to fetch.
     */
    orderBy?: Enumerable<UserChatOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserChatWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserChats from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserChats.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned UserChats
    **/
    _count?: true | UserChatCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UserChatAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UserChatSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserChatMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserChatMaxAggregateInputType
  }

  export type GetUserChatAggregateType<T extends UserChatAggregateArgs> = {
        [P in keyof T & keyof AggregateUserChat]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUserChat[P]>
      : GetScalarType<T[P], AggregateUserChat[P]>
  }




  export type UserChatGroupByArgs = {
    where?: UserChatWhereInput
    orderBy?: Enumerable<UserChatOrderByWithAggregationInput>
    by: UserChatScalarFieldEnum[]
    having?: UserChatScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserChatCountAggregateInputType | true
    _avg?: UserChatAvgAggregateInputType
    _sum?: UserChatSumAggregateInputType
    _min?: UserChatMinAggregateInputType
    _max?: UserChatMaxAggregateInputType
  }


  export type UserChatGroupByOutputType = {
    userId: number
    chatId: number
    isOwner: boolean
    isBlocked: boolean
    permissions: string
    _count: UserChatCountAggregateOutputType | null
    _avg: UserChatAvgAggregateOutputType | null
    _sum: UserChatSumAggregateOutputType | null
    _min: UserChatMinAggregateOutputType | null
    _max: UserChatMaxAggregateOutputType | null
  }

  type GetUserChatGroupByPayload<T extends UserChatGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<UserChatGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserChatGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserChatGroupByOutputType[P]>
            : GetScalarType<T[P], UserChatGroupByOutputType[P]>
        }
      >
    >


  export type UserChatSelect = {
    userId?: boolean
    chatId?: boolean
    isOwner?: boolean
    isBlocked?: boolean
    permissions?: boolean
    user?: boolean | UserArgs
    chat?: boolean | ChatArgs
  }


  export type UserChatInclude = {
    user?: boolean | UserArgs
    chat?: boolean | ChatArgs
  }

  export type UserChatGetPayload<S extends boolean | null | undefined | UserChatArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? UserChat :
    S extends undefined ? never :
    S extends { include: any } & (UserChatArgs | UserChatFindManyArgs)
    ? UserChat  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'user' ? UserGetPayload<S['include'][P]> :
        P extends 'chat' ? ChatGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (UserChatArgs | UserChatFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'user' ? UserGetPayload<S['select'][P]> :
        P extends 'chat' ? ChatGetPayload<S['select'][P]> :  P extends keyof UserChat ? UserChat[P] : never
  } 
      : UserChat


  type UserChatCountArgs = 
    Omit<UserChatFindManyArgs, 'select' | 'include'> & {
      select?: UserChatCountAggregateInputType | true
    }

  export interface UserChatDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one UserChat that matches the filter.
     * @param {UserChatFindUniqueArgs} args - Arguments to find a UserChat
     * @example
     * // Get one UserChat
     * const userChat = await prisma.userChat.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends UserChatFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, UserChatFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'UserChat'> extends True ? Prisma__UserChatClient<UserChatGetPayload<T>> : Prisma__UserChatClient<UserChatGetPayload<T> | null, null>

    /**
     * Find one UserChat that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {UserChatFindUniqueOrThrowArgs} args - Arguments to find a UserChat
     * @example
     * // Get one UserChat
     * const userChat = await prisma.userChat.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends UserChatFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, UserChatFindUniqueOrThrowArgs>
    ): Prisma__UserChatClient<UserChatGetPayload<T>>

    /**
     * Find the first UserChat that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserChatFindFirstArgs} args - Arguments to find a UserChat
     * @example
     * // Get one UserChat
     * const userChat = await prisma.userChat.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends UserChatFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, UserChatFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'UserChat'> extends True ? Prisma__UserChatClient<UserChatGetPayload<T>> : Prisma__UserChatClient<UserChatGetPayload<T> | null, null>

    /**
     * Find the first UserChat that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserChatFindFirstOrThrowArgs} args - Arguments to find a UserChat
     * @example
     * // Get one UserChat
     * const userChat = await prisma.userChat.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends UserChatFindFirstOrThrowArgs>(
      args?: SelectSubset<T, UserChatFindFirstOrThrowArgs>
    ): Prisma__UserChatClient<UserChatGetPayload<T>>

    /**
     * Find zero or more UserChats that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserChatFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all UserChats
     * const userChats = await prisma.userChat.findMany()
     * 
     * // Get first 10 UserChats
     * const userChats = await prisma.userChat.findMany({ take: 10 })
     * 
     * // Only select the `userId`
     * const userChatWithUserIdOnly = await prisma.userChat.findMany({ select: { userId: true } })
     * 
    **/
    findMany<T extends UserChatFindManyArgs>(
      args?: SelectSubset<T, UserChatFindManyArgs>
    ): Prisma.PrismaPromise<Array<UserChatGetPayload<T>>>

    /**
     * Create a UserChat.
     * @param {UserChatCreateArgs} args - Arguments to create a UserChat.
     * @example
     * // Create one UserChat
     * const UserChat = await prisma.userChat.create({
     *   data: {
     *     // ... data to create a UserChat
     *   }
     * })
     * 
    **/
    create<T extends UserChatCreateArgs>(
      args: SelectSubset<T, UserChatCreateArgs>
    ): Prisma__UserChatClient<UserChatGetPayload<T>>

    /**
     * Create many UserChats.
     *     @param {UserChatCreateManyArgs} args - Arguments to create many UserChats.
     *     @example
     *     // Create many UserChats
     *     const userChat = await prisma.userChat.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends UserChatCreateManyArgs>(
      args?: SelectSubset<T, UserChatCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a UserChat.
     * @param {UserChatDeleteArgs} args - Arguments to delete one UserChat.
     * @example
     * // Delete one UserChat
     * const UserChat = await prisma.userChat.delete({
     *   where: {
     *     // ... filter to delete one UserChat
     *   }
     * })
     * 
    **/
    delete<T extends UserChatDeleteArgs>(
      args: SelectSubset<T, UserChatDeleteArgs>
    ): Prisma__UserChatClient<UserChatGetPayload<T>>

    /**
     * Update one UserChat.
     * @param {UserChatUpdateArgs} args - Arguments to update one UserChat.
     * @example
     * // Update one UserChat
     * const userChat = await prisma.userChat.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends UserChatUpdateArgs>(
      args: SelectSubset<T, UserChatUpdateArgs>
    ): Prisma__UserChatClient<UserChatGetPayload<T>>

    /**
     * Delete zero or more UserChats.
     * @param {UserChatDeleteManyArgs} args - Arguments to filter UserChats to delete.
     * @example
     * // Delete a few UserChats
     * const { count } = await prisma.userChat.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends UserChatDeleteManyArgs>(
      args?: SelectSubset<T, UserChatDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more UserChats.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserChatUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many UserChats
     * const userChat = await prisma.userChat.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends UserChatUpdateManyArgs>(
      args: SelectSubset<T, UserChatUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one UserChat.
     * @param {UserChatUpsertArgs} args - Arguments to update or create a UserChat.
     * @example
     * // Update or create a UserChat
     * const userChat = await prisma.userChat.upsert({
     *   create: {
     *     // ... data to create a UserChat
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the UserChat we want to update
     *   }
     * })
    **/
    upsert<T extends UserChatUpsertArgs>(
      args: SelectSubset<T, UserChatUpsertArgs>
    ): Prisma__UserChatClient<UserChatGetPayload<T>>

    /**
     * Count the number of UserChats.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserChatCountArgs} args - Arguments to filter UserChats to count.
     * @example
     * // Count the number of UserChats
     * const count = await prisma.userChat.count({
     *   where: {
     *     // ... the filter for the UserChats we want to count
     *   }
     * })
    **/
    count<T extends UserChatCountArgs>(
      args?: Subset<T, UserChatCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserChatCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a UserChat.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserChatAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserChatAggregateArgs>(args: Subset<T, UserChatAggregateArgs>): Prisma.PrismaPromise<GetUserChatAggregateType<T>>

    /**
     * Group by UserChat.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserChatGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserChatGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserChatGroupByArgs['orderBy'] }
        : { orderBy?: UserChatGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserChatGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserChatGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for UserChat.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__UserChatClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    user<T extends UserArgs= {}>(args?: Subset<T, UserArgs>): Prisma__UserClient<UserGetPayload<T> | Null>;

    chat<T extends ChatArgs= {}>(args?: Subset<T, ChatArgs>): Prisma__ChatClient<ChatGetPayload<T> | Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * UserChat base type for findUnique actions
   */
  export type UserChatFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the UserChat
     */
    select?: UserChatSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserChatInclude | null
    /**
     * Filter, which UserChat to fetch.
     */
    where: UserChatWhereUniqueInput
  }

  /**
   * UserChat findUnique
   */
  export interface UserChatFindUniqueArgs extends UserChatFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * UserChat findUniqueOrThrow
   */
  export type UserChatFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the UserChat
     */
    select?: UserChatSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserChatInclude | null
    /**
     * Filter, which UserChat to fetch.
     */
    where: UserChatWhereUniqueInput
  }


  /**
   * UserChat base type for findFirst actions
   */
  export type UserChatFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the UserChat
     */
    select?: UserChatSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserChatInclude | null
    /**
     * Filter, which UserChat to fetch.
     */
    where?: UserChatWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserChats to fetch.
     */
    orderBy?: Enumerable<UserChatOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UserChats.
     */
    cursor?: UserChatWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserChats from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserChats.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UserChats.
     */
    distinct?: Enumerable<UserChatScalarFieldEnum>
  }

  /**
   * UserChat findFirst
   */
  export interface UserChatFindFirstArgs extends UserChatFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * UserChat findFirstOrThrow
   */
  export type UserChatFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the UserChat
     */
    select?: UserChatSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserChatInclude | null
    /**
     * Filter, which UserChat to fetch.
     */
    where?: UserChatWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserChats to fetch.
     */
    orderBy?: Enumerable<UserChatOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UserChats.
     */
    cursor?: UserChatWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserChats from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserChats.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UserChats.
     */
    distinct?: Enumerable<UserChatScalarFieldEnum>
  }


  /**
   * UserChat findMany
   */
  export type UserChatFindManyArgs = {
    /**
     * Select specific fields to fetch from the UserChat
     */
    select?: UserChatSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserChatInclude | null
    /**
     * Filter, which UserChats to fetch.
     */
    where?: UserChatWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserChats to fetch.
     */
    orderBy?: Enumerable<UserChatOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing UserChats.
     */
    cursor?: UserChatWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserChats from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserChats.
     */
    skip?: number
    distinct?: Enumerable<UserChatScalarFieldEnum>
  }


  /**
   * UserChat create
   */
  export type UserChatCreateArgs = {
    /**
     * Select specific fields to fetch from the UserChat
     */
    select?: UserChatSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserChatInclude | null
    /**
     * The data needed to create a UserChat.
     */
    data: XOR<UserChatCreateInput, UserChatUncheckedCreateInput>
  }


  /**
   * UserChat createMany
   */
  export type UserChatCreateManyArgs = {
    /**
     * The data used to create many UserChats.
     */
    data: Enumerable<UserChatCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * UserChat update
   */
  export type UserChatUpdateArgs = {
    /**
     * Select specific fields to fetch from the UserChat
     */
    select?: UserChatSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserChatInclude | null
    /**
     * The data needed to update a UserChat.
     */
    data: XOR<UserChatUpdateInput, UserChatUncheckedUpdateInput>
    /**
     * Choose, which UserChat to update.
     */
    where: UserChatWhereUniqueInput
  }


  /**
   * UserChat updateMany
   */
  export type UserChatUpdateManyArgs = {
    /**
     * The data used to update UserChats.
     */
    data: XOR<UserChatUpdateManyMutationInput, UserChatUncheckedUpdateManyInput>
    /**
     * Filter which UserChats to update
     */
    where?: UserChatWhereInput
  }


  /**
   * UserChat upsert
   */
  export type UserChatUpsertArgs = {
    /**
     * Select specific fields to fetch from the UserChat
     */
    select?: UserChatSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserChatInclude | null
    /**
     * The filter to search for the UserChat to update in case it exists.
     */
    where: UserChatWhereUniqueInput
    /**
     * In case the UserChat found by the `where` argument doesn't exist, create a new UserChat with this data.
     */
    create: XOR<UserChatCreateInput, UserChatUncheckedCreateInput>
    /**
     * In case the UserChat was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserChatUpdateInput, UserChatUncheckedUpdateInput>
  }


  /**
   * UserChat delete
   */
  export type UserChatDeleteArgs = {
    /**
     * Select specific fields to fetch from the UserChat
     */
    select?: UserChatSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserChatInclude | null
    /**
     * Filter which UserChat to delete.
     */
    where: UserChatWhereUniqueInput
  }


  /**
   * UserChat deleteMany
   */
  export type UserChatDeleteManyArgs = {
    /**
     * Filter which UserChats to delete
     */
    where?: UserChatWhereInput
  }


  /**
   * UserChat without action
   */
  export type UserChatArgs = {
    /**
     * Select specific fields to fetch from the UserChat
     */
    select?: UserChatSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserChatInclude | null
  }



  /**
   * Enums
   */

  // Based on
  // https://github.com/microsoft/TypeScript/issues/3192#issuecomment-261720275

  export const ChatScalarFieldEnum: {
    id: 'id',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    name: 'name',
    type: 'type',
    password: 'password'
  };

  export type ChatScalarFieldEnum = (typeof ChatScalarFieldEnum)[keyof typeof ChatScalarFieldEnum]


  export const MatchHistoryScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    userName: 'userName',
    opponentName: 'opponentName',
    createdAt: 'createdAt',
    ladder: 'ladder',
    won: 'won'
  };

  export type MatchHistoryScalarFieldEnum = (typeof MatchHistoryScalarFieldEnum)[keyof typeof MatchHistoryScalarFieldEnum]


  export const MessageScalarFieldEnum: {
    id: 'id',
    createdAt: 'createdAt',
    content: 'content',
    userId: 'userId',
    chatId: 'chatId'
  };

  export type MessageScalarFieldEnum = (typeof MessageScalarFieldEnum)[keyof typeof MessageScalarFieldEnum]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const UserBlockScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    blockedId: 'blockedId',
    createdAt: 'createdAt'
  };

  export type UserBlockScalarFieldEnum = (typeof UserBlockScalarFieldEnum)[keyof typeof UserBlockScalarFieldEnum]


  export const UserChatScalarFieldEnum: {
    userId: 'userId',
    chatId: 'chatId',
    isOwner: 'isOwner',
    isBlocked: 'isBlocked',
    permissions: 'permissions'
  };

  export type UserChatScalarFieldEnum = (typeof UserChatScalarFieldEnum)[keyof typeof UserChatScalarFieldEnum]


  export const UserFriendScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    friendId: 'friendId',
    createdAt: 'createdAt'
  };

  export type UserFriendScalarFieldEnum = (typeof UserFriendScalarFieldEnum)[keyof typeof UserFriendScalarFieldEnum]


  export const UserScalarFieldEnum: {
    id: 'id',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    name: 'name',
    hash: 'hash',
    wins: 'wins',
    losses: 'losses',
    ladder_level: 'ladder_level',
    oauthId: 'oauthId',
    connected: 'connected'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  /**
   * Deep Input Types
   */


  export type UserWhereInput = {
    AND?: Enumerable<UserWhereInput>
    OR?: Enumerable<UserWhereInput>
    NOT?: Enumerable<UserWhereInput>
    id?: IntFilter | number
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
    name?: StringFilter | string
    hash?: StringFilter | string
    wins?: IntFilter | number
    losses?: IntFilter | number
    ladder_level?: IntFilter | number
    oauthId?: StringFilter | string
    connected?: BoolFilter | boolean
    userFriends?: UserFriendListRelationFilter
    friendUsers?: UserFriendListRelationFilter
    userBlocks?: UserBlockListRelationFilter
    blockedUsers?: UserBlockListRelationFilter
    history?: MatchHistoryListRelationFilter
    chats?: UserChatListRelationFilter
    messages?: MessageListRelationFilter
  }

  export type UserOrderByWithRelationInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    name?: SortOrder
    hash?: SortOrder
    wins?: SortOrder
    losses?: SortOrder
    ladder_level?: SortOrder
    oauthId?: SortOrder
    connected?: SortOrder
    userFriends?: UserFriendOrderByRelationAggregateInput
    friendUsers?: UserFriendOrderByRelationAggregateInput
    userBlocks?: UserBlockOrderByRelationAggregateInput
    blockedUsers?: UserBlockOrderByRelationAggregateInput
    history?: MatchHistoryOrderByRelationAggregateInput
    chats?: UserChatOrderByRelationAggregateInput
    messages?: MessageOrderByRelationAggregateInput
  }

  export type UserWhereUniqueInput = {
    id?: number
    name?: string
    oauthId?: string
  }

  export type UserOrderByWithAggregationInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    name?: SortOrder
    hash?: SortOrder
    wins?: SortOrder
    losses?: SortOrder
    ladder_level?: SortOrder
    oauthId?: SortOrder
    connected?: SortOrder
    _count?: UserCountOrderByAggregateInput
    _avg?: UserAvgOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
    _sum?: UserSumOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: Enumerable<UserScalarWhereWithAggregatesInput>
    OR?: Enumerable<UserScalarWhereWithAggregatesInput>
    NOT?: Enumerable<UserScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    createdAt?: DateTimeWithAggregatesFilter | Date | string
    updatedAt?: DateTimeWithAggregatesFilter | Date | string
    name?: StringWithAggregatesFilter | string
    hash?: StringWithAggregatesFilter | string
    wins?: IntWithAggregatesFilter | number
    losses?: IntWithAggregatesFilter | number
    ladder_level?: IntWithAggregatesFilter | number
    oauthId?: StringWithAggregatesFilter | string
    connected?: BoolWithAggregatesFilter | boolean
  }

  export type UserBlockWhereInput = {
    AND?: Enumerable<UserBlockWhereInput>
    OR?: Enumerable<UserBlockWhereInput>
    NOT?: Enumerable<UserBlockWhereInput>
    id?: IntFilter | number
    userId?: IntFilter | number
    blockedId?: IntFilter | number
    createdAt?: DateTimeFilter | Date | string
    user?: XOR<UserRelationFilter, UserWhereInput>
    blockedUser?: XOR<UserRelationFilter, UserWhereInput>
  }

  export type UserBlockOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    blockedId?: SortOrder
    createdAt?: SortOrder
    user?: UserOrderByWithRelationInput
    blockedUser?: UserOrderByWithRelationInput
  }

  export type UserBlockWhereUniqueInput = {
    id?: number
  }

  export type UserBlockOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    blockedId?: SortOrder
    createdAt?: SortOrder
    _count?: UserBlockCountOrderByAggregateInput
    _avg?: UserBlockAvgOrderByAggregateInput
    _max?: UserBlockMaxOrderByAggregateInput
    _min?: UserBlockMinOrderByAggregateInput
    _sum?: UserBlockSumOrderByAggregateInput
  }

  export type UserBlockScalarWhereWithAggregatesInput = {
    AND?: Enumerable<UserBlockScalarWhereWithAggregatesInput>
    OR?: Enumerable<UserBlockScalarWhereWithAggregatesInput>
    NOT?: Enumerable<UserBlockScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    userId?: IntWithAggregatesFilter | number
    blockedId?: IntWithAggregatesFilter | number
    createdAt?: DateTimeWithAggregatesFilter | Date | string
  }

  export type UserFriendWhereInput = {
    AND?: Enumerable<UserFriendWhereInput>
    OR?: Enumerable<UserFriendWhereInput>
    NOT?: Enumerable<UserFriendWhereInput>
    id?: IntFilter | number
    userId?: IntFilter | number
    friendId?: IntFilter | number
    createdAt?: DateTimeFilter | Date | string
    user?: XOR<UserRelationFilter, UserWhereInput>
    friend?: XOR<UserRelationFilter, UserWhereInput>
  }

  export type UserFriendOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    friendId?: SortOrder
    createdAt?: SortOrder
    user?: UserOrderByWithRelationInput
    friend?: UserOrderByWithRelationInput
  }

  export type UserFriendWhereUniqueInput = {
    id?: number
  }

  export type UserFriendOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    friendId?: SortOrder
    createdAt?: SortOrder
    _count?: UserFriendCountOrderByAggregateInput
    _avg?: UserFriendAvgOrderByAggregateInput
    _max?: UserFriendMaxOrderByAggregateInput
    _min?: UserFriendMinOrderByAggregateInput
    _sum?: UserFriendSumOrderByAggregateInput
  }

  export type UserFriendScalarWhereWithAggregatesInput = {
    AND?: Enumerable<UserFriendScalarWhereWithAggregatesInput>
    OR?: Enumerable<UserFriendScalarWhereWithAggregatesInput>
    NOT?: Enumerable<UserFriendScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    userId?: IntWithAggregatesFilter | number
    friendId?: IntWithAggregatesFilter | number
    createdAt?: DateTimeWithAggregatesFilter | Date | string
  }

  export type MatchHistoryWhereInput = {
    AND?: Enumerable<MatchHistoryWhereInput>
    OR?: Enumerable<MatchHistoryWhereInput>
    NOT?: Enumerable<MatchHistoryWhereInput>
    id?: IntFilter | number
    userId?: IntFilter | number
    userName?: StringFilter | string
    opponentName?: StringFilter | string
    createdAt?: DateTimeFilter | Date | string
    ladder?: IntFilter | number
    won?: BoolFilter | boolean
    user?: XOR<UserRelationFilter, UserWhereInput>
  }

  export type MatchHistoryOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    userName?: SortOrder
    opponentName?: SortOrder
    createdAt?: SortOrder
    ladder?: SortOrder
    won?: SortOrder
    user?: UserOrderByWithRelationInput
  }

  export type MatchHistoryWhereUniqueInput = {
    id?: number
  }

  export type MatchHistoryOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    userName?: SortOrder
    opponentName?: SortOrder
    createdAt?: SortOrder
    ladder?: SortOrder
    won?: SortOrder
    _count?: MatchHistoryCountOrderByAggregateInput
    _avg?: MatchHistoryAvgOrderByAggregateInput
    _max?: MatchHistoryMaxOrderByAggregateInput
    _min?: MatchHistoryMinOrderByAggregateInput
    _sum?: MatchHistorySumOrderByAggregateInput
  }

  export type MatchHistoryScalarWhereWithAggregatesInput = {
    AND?: Enumerable<MatchHistoryScalarWhereWithAggregatesInput>
    OR?: Enumerable<MatchHistoryScalarWhereWithAggregatesInput>
    NOT?: Enumerable<MatchHistoryScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    userId?: IntWithAggregatesFilter | number
    userName?: StringWithAggregatesFilter | string
    opponentName?: StringWithAggregatesFilter | string
    createdAt?: DateTimeWithAggregatesFilter | Date | string
    ladder?: IntWithAggregatesFilter | number
    won?: BoolWithAggregatesFilter | boolean
  }

  export type ChatWhereInput = {
    AND?: Enumerable<ChatWhereInput>
    OR?: Enumerable<ChatWhereInput>
    NOT?: Enumerable<ChatWhereInput>
    id?: IntFilter | number
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
    name?: StringFilter | string
    type?: EnumChatTypeFilter | ChatType
    password?: StringNullableFilter | string | null
    messages?: MessageListRelationFilter
    users?: UserChatListRelationFilter
  }

  export type ChatOrderByWithRelationInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    name?: SortOrder
    type?: SortOrder
    password?: SortOrder
    messages?: MessageOrderByRelationAggregateInput
    users?: UserChatOrderByRelationAggregateInput
  }

  export type ChatWhereUniqueInput = {
    id?: number
    name?: string
  }

  export type ChatOrderByWithAggregationInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    name?: SortOrder
    type?: SortOrder
    password?: SortOrder
    _count?: ChatCountOrderByAggregateInput
    _avg?: ChatAvgOrderByAggregateInput
    _max?: ChatMaxOrderByAggregateInput
    _min?: ChatMinOrderByAggregateInput
    _sum?: ChatSumOrderByAggregateInput
  }

  export type ChatScalarWhereWithAggregatesInput = {
    AND?: Enumerable<ChatScalarWhereWithAggregatesInput>
    OR?: Enumerable<ChatScalarWhereWithAggregatesInput>
    NOT?: Enumerable<ChatScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    createdAt?: DateTimeWithAggregatesFilter | Date | string
    updatedAt?: DateTimeWithAggregatesFilter | Date | string
    name?: StringWithAggregatesFilter | string
    type?: EnumChatTypeWithAggregatesFilter | ChatType
    password?: StringNullableWithAggregatesFilter | string | null
  }

  export type MessageWhereInput = {
    AND?: Enumerable<MessageWhereInput>
    OR?: Enumerable<MessageWhereInput>
    NOT?: Enumerable<MessageWhereInput>
    id?: IntFilter | number
    createdAt?: DateTimeFilter | Date | string
    content?: StringFilter | string
    userId?: IntFilter | number
    chatId?: IntFilter | number
    sender?: XOR<UserRelationFilter, UserWhereInput>
    chat?: XOR<ChatRelationFilter, ChatWhereInput>
  }

  export type MessageOrderByWithRelationInput = {
    id?: SortOrder
    createdAt?: SortOrder
    content?: SortOrder
    userId?: SortOrder
    chatId?: SortOrder
    sender?: UserOrderByWithRelationInput
    chat?: ChatOrderByWithRelationInput
  }

  export type MessageWhereUniqueInput = {
    id?: number
  }

  export type MessageOrderByWithAggregationInput = {
    id?: SortOrder
    createdAt?: SortOrder
    content?: SortOrder
    userId?: SortOrder
    chatId?: SortOrder
    _count?: MessageCountOrderByAggregateInput
    _avg?: MessageAvgOrderByAggregateInput
    _max?: MessageMaxOrderByAggregateInput
    _min?: MessageMinOrderByAggregateInput
    _sum?: MessageSumOrderByAggregateInput
  }

  export type MessageScalarWhereWithAggregatesInput = {
    AND?: Enumerable<MessageScalarWhereWithAggregatesInput>
    OR?: Enumerable<MessageScalarWhereWithAggregatesInput>
    NOT?: Enumerable<MessageScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    createdAt?: DateTimeWithAggregatesFilter | Date | string
    content?: StringWithAggregatesFilter | string
    userId?: IntWithAggregatesFilter | number
    chatId?: IntWithAggregatesFilter | number
  }

  export type UserChatWhereInput = {
    AND?: Enumerable<UserChatWhereInput>
    OR?: Enumerable<UserChatWhereInput>
    NOT?: Enumerable<UserChatWhereInput>
    userId?: IntFilter | number
    chatId?: IntFilter | number
    isOwner?: BoolFilter | boolean
    isBlocked?: BoolFilter | boolean
    permissions?: StringFilter | string
    user?: XOR<UserRelationFilter, UserWhereInput>
    chat?: XOR<ChatRelationFilter, ChatWhereInput>
  }

  export type UserChatOrderByWithRelationInput = {
    userId?: SortOrder
    chatId?: SortOrder
    isOwner?: SortOrder
    isBlocked?: SortOrder
    permissions?: SortOrder
    user?: UserOrderByWithRelationInput
    chat?: ChatOrderByWithRelationInput
  }

  export type UserChatWhereUniqueInput = {
    userId_chatId?: UserChatUserIdChatIdCompoundUniqueInput
  }

  export type UserChatOrderByWithAggregationInput = {
    userId?: SortOrder
    chatId?: SortOrder
    isOwner?: SortOrder
    isBlocked?: SortOrder
    permissions?: SortOrder
    _count?: UserChatCountOrderByAggregateInput
    _avg?: UserChatAvgOrderByAggregateInput
    _max?: UserChatMaxOrderByAggregateInput
    _min?: UserChatMinOrderByAggregateInput
    _sum?: UserChatSumOrderByAggregateInput
  }

  export type UserChatScalarWhereWithAggregatesInput = {
    AND?: Enumerable<UserChatScalarWhereWithAggregatesInput>
    OR?: Enumerable<UserChatScalarWhereWithAggregatesInput>
    NOT?: Enumerable<UserChatScalarWhereWithAggregatesInput>
    userId?: IntWithAggregatesFilter | number
    chatId?: IntWithAggregatesFilter | number
    isOwner?: BoolWithAggregatesFilter | boolean
    isBlocked?: BoolWithAggregatesFilter | boolean
    permissions?: StringWithAggregatesFilter | string
  }

  export type UserCreateInput = {
    createdAt?: Date | string
    updatedAt?: Date | string
    name: string
    hash: string
    wins?: number
    losses?: number
    ladder_level?: number
    oauthId: string
    connected?: boolean
    userFriends?: UserFriendCreateNestedManyWithoutUserInput
    friendUsers?: UserFriendCreateNestedManyWithoutFriendInput
    userBlocks?: UserBlockCreateNestedManyWithoutUserInput
    blockedUsers?: UserBlockCreateNestedManyWithoutBlockedUserInput
    history?: MatchHistoryCreateNestedManyWithoutUserInput
    chats?: UserChatCreateNestedManyWithoutUserInput
    messages?: MessageCreateNestedManyWithoutSenderInput
  }

  export type UserUncheckedCreateInput = {
    id?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    name: string
    hash: string
    wins?: number
    losses?: number
    ladder_level?: number
    oauthId: string
    connected?: boolean
    userFriends?: UserFriendUncheckedCreateNestedManyWithoutUserInput
    friendUsers?: UserFriendUncheckedCreateNestedManyWithoutFriendInput
    userBlocks?: UserBlockUncheckedCreateNestedManyWithoutUserInput
    blockedUsers?: UserBlockUncheckedCreateNestedManyWithoutBlockedUserInput
    history?: MatchHistoryUncheckedCreateNestedManyWithoutUserInput
    chats?: UserChatUncheckedCreateNestedManyWithoutUserInput
    messages?: MessageUncheckedCreateNestedManyWithoutSenderInput
  }

  export type UserUpdateInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    name?: StringFieldUpdateOperationsInput | string
    hash?: StringFieldUpdateOperationsInput | string
    wins?: IntFieldUpdateOperationsInput | number
    losses?: IntFieldUpdateOperationsInput | number
    ladder_level?: IntFieldUpdateOperationsInput | number
    oauthId?: StringFieldUpdateOperationsInput | string
    connected?: BoolFieldUpdateOperationsInput | boolean
    userFriends?: UserFriendUpdateManyWithoutUserNestedInput
    friendUsers?: UserFriendUpdateManyWithoutFriendNestedInput
    userBlocks?: UserBlockUpdateManyWithoutUserNestedInput
    blockedUsers?: UserBlockUpdateManyWithoutBlockedUserNestedInput
    history?: MatchHistoryUpdateManyWithoutUserNestedInput
    chats?: UserChatUpdateManyWithoutUserNestedInput
    messages?: MessageUpdateManyWithoutSenderNestedInput
  }

  export type UserUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    name?: StringFieldUpdateOperationsInput | string
    hash?: StringFieldUpdateOperationsInput | string
    wins?: IntFieldUpdateOperationsInput | number
    losses?: IntFieldUpdateOperationsInput | number
    ladder_level?: IntFieldUpdateOperationsInput | number
    oauthId?: StringFieldUpdateOperationsInput | string
    connected?: BoolFieldUpdateOperationsInput | boolean
    userFriends?: UserFriendUncheckedUpdateManyWithoutUserNestedInput
    friendUsers?: UserFriendUncheckedUpdateManyWithoutFriendNestedInput
    userBlocks?: UserBlockUncheckedUpdateManyWithoutUserNestedInput
    blockedUsers?: UserBlockUncheckedUpdateManyWithoutBlockedUserNestedInput
    history?: MatchHistoryUncheckedUpdateManyWithoutUserNestedInput
    chats?: UserChatUncheckedUpdateManyWithoutUserNestedInput
    messages?: MessageUncheckedUpdateManyWithoutSenderNestedInput
  }

  export type UserCreateManyInput = {
    id?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    name: string
    hash: string
    wins?: number
    losses?: number
    ladder_level?: number
    oauthId: string
    connected?: boolean
  }

  export type UserUpdateManyMutationInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    name?: StringFieldUpdateOperationsInput | string
    hash?: StringFieldUpdateOperationsInput | string
    wins?: IntFieldUpdateOperationsInput | number
    losses?: IntFieldUpdateOperationsInput | number
    ladder_level?: IntFieldUpdateOperationsInput | number
    oauthId?: StringFieldUpdateOperationsInput | string
    connected?: BoolFieldUpdateOperationsInput | boolean
  }

  export type UserUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    name?: StringFieldUpdateOperationsInput | string
    hash?: StringFieldUpdateOperationsInput | string
    wins?: IntFieldUpdateOperationsInput | number
    losses?: IntFieldUpdateOperationsInput | number
    ladder_level?: IntFieldUpdateOperationsInput | number
    oauthId?: StringFieldUpdateOperationsInput | string
    connected?: BoolFieldUpdateOperationsInput | boolean
  }

  export type UserBlockCreateInput = {
    createdAt?: Date | string
    user: UserCreateNestedOneWithoutUserBlocksInput
    blockedUser: UserCreateNestedOneWithoutBlockedUsersInput
  }

  export type UserBlockUncheckedCreateInput = {
    id?: number
    userId: number
    blockedId: number
    createdAt?: Date | string
  }

  export type UserBlockUpdateInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutUserBlocksNestedInput
    blockedUser?: UserUpdateOneRequiredWithoutBlockedUsersNestedInput
  }

  export type UserBlockUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    blockedId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserBlockCreateManyInput = {
    id?: number
    userId: number
    blockedId: number
    createdAt?: Date | string
  }

  export type UserBlockUpdateManyMutationInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserBlockUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    blockedId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserFriendCreateInput = {
    createdAt?: Date | string
    user: UserCreateNestedOneWithoutUserFriendsInput
    friend: UserCreateNestedOneWithoutFriendUsersInput
  }

  export type UserFriendUncheckedCreateInput = {
    id?: number
    userId: number
    friendId: number
    createdAt?: Date | string
  }

  export type UserFriendUpdateInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutUserFriendsNestedInput
    friend?: UserUpdateOneRequiredWithoutFriendUsersNestedInput
  }

  export type UserFriendUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    friendId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserFriendCreateManyInput = {
    id?: number
    userId: number
    friendId: number
    createdAt?: Date | string
  }

  export type UserFriendUpdateManyMutationInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserFriendUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    friendId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MatchHistoryCreateInput = {
    userName: string
    opponentName: string
    createdAt?: Date | string
    ladder: number
    won?: boolean
    user: UserCreateNestedOneWithoutHistoryInput
  }

  export type MatchHistoryUncheckedCreateInput = {
    id?: number
    userId: number
    userName: string
    opponentName: string
    createdAt?: Date | string
    ladder: number
    won?: boolean
  }

  export type MatchHistoryUpdateInput = {
    userName?: StringFieldUpdateOperationsInput | string
    opponentName?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    ladder?: IntFieldUpdateOperationsInput | number
    won?: BoolFieldUpdateOperationsInput | boolean
    user?: UserUpdateOneRequiredWithoutHistoryNestedInput
  }

  export type MatchHistoryUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    userName?: StringFieldUpdateOperationsInput | string
    opponentName?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    ladder?: IntFieldUpdateOperationsInput | number
    won?: BoolFieldUpdateOperationsInput | boolean
  }

  export type MatchHistoryCreateManyInput = {
    id?: number
    userId: number
    userName: string
    opponentName: string
    createdAt?: Date | string
    ladder: number
    won?: boolean
  }

  export type MatchHistoryUpdateManyMutationInput = {
    userName?: StringFieldUpdateOperationsInput | string
    opponentName?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    ladder?: IntFieldUpdateOperationsInput | number
    won?: BoolFieldUpdateOperationsInput | boolean
  }

  export type MatchHistoryUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    userName?: StringFieldUpdateOperationsInput | string
    opponentName?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    ladder?: IntFieldUpdateOperationsInput | number
    won?: BoolFieldUpdateOperationsInput | boolean
  }

  export type ChatCreateInput = {
    createdAt?: Date | string
    updatedAt?: Date | string
    name: string
    type?: ChatType
    password?: string | null
    messages?: MessageCreateNestedManyWithoutChatInput
    users?: UserChatCreateNestedManyWithoutChatInput
  }

  export type ChatUncheckedCreateInput = {
    id?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    name: string
    type?: ChatType
    password?: string | null
    messages?: MessageUncheckedCreateNestedManyWithoutChatInput
    users?: UserChatUncheckedCreateNestedManyWithoutChatInput
  }

  export type ChatUpdateInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    name?: StringFieldUpdateOperationsInput | string
    type?: EnumChatTypeFieldUpdateOperationsInput | ChatType
    password?: NullableStringFieldUpdateOperationsInput | string | null
    messages?: MessageUpdateManyWithoutChatNestedInput
    users?: UserChatUpdateManyWithoutChatNestedInput
  }

  export type ChatUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    name?: StringFieldUpdateOperationsInput | string
    type?: EnumChatTypeFieldUpdateOperationsInput | ChatType
    password?: NullableStringFieldUpdateOperationsInput | string | null
    messages?: MessageUncheckedUpdateManyWithoutChatNestedInput
    users?: UserChatUncheckedUpdateManyWithoutChatNestedInput
  }

  export type ChatCreateManyInput = {
    id?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    name: string
    type?: ChatType
    password?: string | null
  }

  export type ChatUpdateManyMutationInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    name?: StringFieldUpdateOperationsInput | string
    type?: EnumChatTypeFieldUpdateOperationsInput | ChatType
    password?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ChatUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    name?: StringFieldUpdateOperationsInput | string
    type?: EnumChatTypeFieldUpdateOperationsInput | ChatType
    password?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type MessageCreateInput = {
    createdAt?: Date | string
    content: string
    sender: UserCreateNestedOneWithoutMessagesInput
    chat: ChatCreateNestedOneWithoutMessagesInput
  }

  export type MessageUncheckedCreateInput = {
    id?: number
    createdAt?: Date | string
    content: string
    userId: number
    chatId: number
  }

  export type MessageUpdateInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    content?: StringFieldUpdateOperationsInput | string
    sender?: UserUpdateOneRequiredWithoutMessagesNestedInput
    chat?: ChatUpdateOneRequiredWithoutMessagesNestedInput
  }

  export type MessageUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    content?: StringFieldUpdateOperationsInput | string
    userId?: IntFieldUpdateOperationsInput | number
    chatId?: IntFieldUpdateOperationsInput | number
  }

  export type MessageCreateManyInput = {
    id?: number
    createdAt?: Date | string
    content: string
    userId: number
    chatId: number
  }

  export type MessageUpdateManyMutationInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    content?: StringFieldUpdateOperationsInput | string
  }

  export type MessageUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    content?: StringFieldUpdateOperationsInput | string
    userId?: IntFieldUpdateOperationsInput | number
    chatId?: IntFieldUpdateOperationsInput | number
  }

  export type UserChatCreateInput = {
    isOwner: boolean
    isBlocked: boolean
    permissions: string
    user: UserCreateNestedOneWithoutChatsInput
    chat: ChatCreateNestedOneWithoutUsersInput
  }

  export type UserChatUncheckedCreateInput = {
    userId: number
    chatId: number
    isOwner: boolean
    isBlocked: boolean
    permissions: string
  }

  export type UserChatUpdateInput = {
    isOwner?: BoolFieldUpdateOperationsInput | boolean
    isBlocked?: BoolFieldUpdateOperationsInput | boolean
    permissions?: StringFieldUpdateOperationsInput | string
    user?: UserUpdateOneRequiredWithoutChatsNestedInput
    chat?: ChatUpdateOneRequiredWithoutUsersNestedInput
  }

  export type UserChatUncheckedUpdateInput = {
    userId?: IntFieldUpdateOperationsInput | number
    chatId?: IntFieldUpdateOperationsInput | number
    isOwner?: BoolFieldUpdateOperationsInput | boolean
    isBlocked?: BoolFieldUpdateOperationsInput | boolean
    permissions?: StringFieldUpdateOperationsInput | string
  }

  export type UserChatCreateManyInput = {
    userId: number
    chatId: number
    isOwner: boolean
    isBlocked: boolean
    permissions: string
  }

  export type UserChatUpdateManyMutationInput = {
    isOwner?: BoolFieldUpdateOperationsInput | boolean
    isBlocked?: BoolFieldUpdateOperationsInput | boolean
    permissions?: StringFieldUpdateOperationsInput | string
  }

  export type UserChatUncheckedUpdateManyInput = {
    userId?: IntFieldUpdateOperationsInput | number
    chatId?: IntFieldUpdateOperationsInput | number
    isOwner?: BoolFieldUpdateOperationsInput | boolean
    isBlocked?: BoolFieldUpdateOperationsInput | boolean
    permissions?: StringFieldUpdateOperationsInput | string
  }

  export type IntFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type DateTimeFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeFilter | Date | string
  }

  export type StringFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringFilter | string
  }

  export type BoolFilter = {
    equals?: boolean
    not?: NestedBoolFilter | boolean
  }

  export type UserFriendListRelationFilter = {
    every?: UserFriendWhereInput
    some?: UserFriendWhereInput
    none?: UserFriendWhereInput
  }

  export type UserBlockListRelationFilter = {
    every?: UserBlockWhereInput
    some?: UserBlockWhereInput
    none?: UserBlockWhereInput
  }

  export type MatchHistoryListRelationFilter = {
    every?: MatchHistoryWhereInput
    some?: MatchHistoryWhereInput
    none?: MatchHistoryWhereInput
  }

  export type UserChatListRelationFilter = {
    every?: UserChatWhereInput
    some?: UserChatWhereInput
    none?: UserChatWhereInput
  }

  export type MessageListRelationFilter = {
    every?: MessageWhereInput
    some?: MessageWhereInput
    none?: MessageWhereInput
  }

  export type UserFriendOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserBlockOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type MatchHistoryOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserChatOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type MessageOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserCountOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    name?: SortOrder
    hash?: SortOrder
    wins?: SortOrder
    losses?: SortOrder
    ladder_level?: SortOrder
    oauthId?: SortOrder
    connected?: SortOrder
  }

  export type UserAvgOrderByAggregateInput = {
    id?: SortOrder
    wins?: SortOrder
    losses?: SortOrder
    ladder_level?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    name?: SortOrder
    hash?: SortOrder
    wins?: SortOrder
    losses?: SortOrder
    ladder_level?: SortOrder
    oauthId?: SortOrder
    connected?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    name?: SortOrder
    hash?: SortOrder
    wins?: SortOrder
    losses?: SortOrder
    ladder_level?: SortOrder
    oauthId?: SortOrder
    connected?: SortOrder
  }

  export type UserSumOrderByAggregateInput = {
    id?: SortOrder
    wins?: SortOrder
    losses?: SortOrder
    ladder_level?: SortOrder
  }

  export type IntWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedIntFilter
    _min?: NestedIntFilter
    _max?: NestedIntFilter
  }

  export type DateTimeWithAggregatesFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeWithAggregatesFilter | Date | string
    _count?: NestedIntFilter
    _min?: NestedDateTimeFilter
    _max?: NestedDateTimeFilter
  }

  export type StringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter | string
    _count?: NestedIntFilter
    _min?: NestedStringFilter
    _max?: NestedStringFilter
  }

  export type BoolWithAggregatesFilter = {
    equals?: boolean
    not?: NestedBoolWithAggregatesFilter | boolean
    _count?: NestedIntFilter
    _min?: NestedBoolFilter
    _max?: NestedBoolFilter
  }

  export type UserRelationFilter = {
    is?: UserWhereInput
    isNot?: UserWhereInput
  }

  export type UserBlockCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    blockedId?: SortOrder
    createdAt?: SortOrder
  }

  export type UserBlockAvgOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    blockedId?: SortOrder
  }

  export type UserBlockMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    blockedId?: SortOrder
    createdAt?: SortOrder
  }

  export type UserBlockMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    blockedId?: SortOrder
    createdAt?: SortOrder
  }

  export type UserBlockSumOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    blockedId?: SortOrder
  }

  export type UserFriendCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    friendId?: SortOrder
    createdAt?: SortOrder
  }

  export type UserFriendAvgOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    friendId?: SortOrder
  }

  export type UserFriendMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    friendId?: SortOrder
    createdAt?: SortOrder
  }

  export type UserFriendMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    friendId?: SortOrder
    createdAt?: SortOrder
  }

  export type UserFriendSumOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    friendId?: SortOrder
  }

  export type MatchHistoryCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    userName?: SortOrder
    opponentName?: SortOrder
    createdAt?: SortOrder
    ladder?: SortOrder
    won?: SortOrder
  }

  export type MatchHistoryAvgOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    ladder?: SortOrder
  }

  export type MatchHistoryMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    userName?: SortOrder
    opponentName?: SortOrder
    createdAt?: SortOrder
    ladder?: SortOrder
    won?: SortOrder
  }

  export type MatchHistoryMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    userName?: SortOrder
    opponentName?: SortOrder
    createdAt?: SortOrder
    ladder?: SortOrder
    won?: SortOrder
  }

  export type MatchHistorySumOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    ladder?: SortOrder
  }

  export type EnumChatTypeFilter = {
    equals?: ChatType
    in?: Enumerable<ChatType>
    notIn?: Enumerable<ChatType>
    not?: NestedEnumChatTypeFilter | ChatType
  }

  export type StringNullableFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringNullableFilter | string | null
  }

  export type ChatCountOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    name?: SortOrder
    type?: SortOrder
    password?: SortOrder
  }

  export type ChatAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type ChatMaxOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    name?: SortOrder
    type?: SortOrder
    password?: SortOrder
  }

  export type ChatMinOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    name?: SortOrder
    type?: SortOrder
    password?: SortOrder
  }

  export type ChatSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type EnumChatTypeWithAggregatesFilter = {
    equals?: ChatType
    in?: Enumerable<ChatType>
    notIn?: Enumerable<ChatType>
    not?: NestedEnumChatTypeWithAggregatesFilter | ChatType
    _count?: NestedIntFilter
    _min?: NestedEnumChatTypeFilter
    _max?: NestedEnumChatTypeFilter
  }

  export type StringNullableWithAggregatesFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter | string | null
    _count?: NestedIntNullableFilter
    _min?: NestedStringNullableFilter
    _max?: NestedStringNullableFilter
  }

  export type ChatRelationFilter = {
    is?: ChatWhereInput
    isNot?: ChatWhereInput
  }

  export type MessageCountOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    content?: SortOrder
    userId?: SortOrder
    chatId?: SortOrder
  }

  export type MessageAvgOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    chatId?: SortOrder
  }

  export type MessageMaxOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    content?: SortOrder
    userId?: SortOrder
    chatId?: SortOrder
  }

  export type MessageMinOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    content?: SortOrder
    userId?: SortOrder
    chatId?: SortOrder
  }

  export type MessageSumOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    chatId?: SortOrder
  }

  export type UserChatUserIdChatIdCompoundUniqueInput = {
    userId: number
    chatId: number
  }

  export type UserChatCountOrderByAggregateInput = {
    userId?: SortOrder
    chatId?: SortOrder
    isOwner?: SortOrder
    isBlocked?: SortOrder
    permissions?: SortOrder
  }

  export type UserChatAvgOrderByAggregateInput = {
    userId?: SortOrder
    chatId?: SortOrder
  }

  export type UserChatMaxOrderByAggregateInput = {
    userId?: SortOrder
    chatId?: SortOrder
    isOwner?: SortOrder
    isBlocked?: SortOrder
    permissions?: SortOrder
  }

  export type UserChatMinOrderByAggregateInput = {
    userId?: SortOrder
    chatId?: SortOrder
    isOwner?: SortOrder
    isBlocked?: SortOrder
    permissions?: SortOrder
  }

  export type UserChatSumOrderByAggregateInput = {
    userId?: SortOrder
    chatId?: SortOrder
  }

  export type UserFriendCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<UserFriendCreateWithoutUserInput>, Enumerable<UserFriendUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<UserFriendCreateOrConnectWithoutUserInput>
    createMany?: UserFriendCreateManyUserInputEnvelope
    connect?: Enumerable<UserFriendWhereUniqueInput>
  }

  export type UserFriendCreateNestedManyWithoutFriendInput = {
    create?: XOR<Enumerable<UserFriendCreateWithoutFriendInput>, Enumerable<UserFriendUncheckedCreateWithoutFriendInput>>
    connectOrCreate?: Enumerable<UserFriendCreateOrConnectWithoutFriendInput>
    createMany?: UserFriendCreateManyFriendInputEnvelope
    connect?: Enumerable<UserFriendWhereUniqueInput>
  }

  export type UserBlockCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<UserBlockCreateWithoutUserInput>, Enumerable<UserBlockUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<UserBlockCreateOrConnectWithoutUserInput>
    createMany?: UserBlockCreateManyUserInputEnvelope
    connect?: Enumerable<UserBlockWhereUniqueInput>
  }

  export type UserBlockCreateNestedManyWithoutBlockedUserInput = {
    create?: XOR<Enumerable<UserBlockCreateWithoutBlockedUserInput>, Enumerable<UserBlockUncheckedCreateWithoutBlockedUserInput>>
    connectOrCreate?: Enumerable<UserBlockCreateOrConnectWithoutBlockedUserInput>
    createMany?: UserBlockCreateManyBlockedUserInputEnvelope
    connect?: Enumerable<UserBlockWhereUniqueInput>
  }

  export type MatchHistoryCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<MatchHistoryCreateWithoutUserInput>, Enumerable<MatchHistoryUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<MatchHistoryCreateOrConnectWithoutUserInput>
    createMany?: MatchHistoryCreateManyUserInputEnvelope
    connect?: Enumerable<MatchHistoryWhereUniqueInput>
  }

  export type UserChatCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<UserChatCreateWithoutUserInput>, Enumerable<UserChatUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<UserChatCreateOrConnectWithoutUserInput>
    createMany?: UserChatCreateManyUserInputEnvelope
    connect?: Enumerable<UserChatWhereUniqueInput>
  }

  export type MessageCreateNestedManyWithoutSenderInput = {
    create?: XOR<Enumerable<MessageCreateWithoutSenderInput>, Enumerable<MessageUncheckedCreateWithoutSenderInput>>
    connectOrCreate?: Enumerable<MessageCreateOrConnectWithoutSenderInput>
    createMany?: MessageCreateManySenderInputEnvelope
    connect?: Enumerable<MessageWhereUniqueInput>
  }

  export type UserFriendUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<UserFriendCreateWithoutUserInput>, Enumerable<UserFriendUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<UserFriendCreateOrConnectWithoutUserInput>
    createMany?: UserFriendCreateManyUserInputEnvelope
    connect?: Enumerable<UserFriendWhereUniqueInput>
  }

  export type UserFriendUncheckedCreateNestedManyWithoutFriendInput = {
    create?: XOR<Enumerable<UserFriendCreateWithoutFriendInput>, Enumerable<UserFriendUncheckedCreateWithoutFriendInput>>
    connectOrCreate?: Enumerable<UserFriendCreateOrConnectWithoutFriendInput>
    createMany?: UserFriendCreateManyFriendInputEnvelope
    connect?: Enumerable<UserFriendWhereUniqueInput>
  }

  export type UserBlockUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<UserBlockCreateWithoutUserInput>, Enumerable<UserBlockUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<UserBlockCreateOrConnectWithoutUserInput>
    createMany?: UserBlockCreateManyUserInputEnvelope
    connect?: Enumerable<UserBlockWhereUniqueInput>
  }

  export type UserBlockUncheckedCreateNestedManyWithoutBlockedUserInput = {
    create?: XOR<Enumerable<UserBlockCreateWithoutBlockedUserInput>, Enumerable<UserBlockUncheckedCreateWithoutBlockedUserInput>>
    connectOrCreate?: Enumerable<UserBlockCreateOrConnectWithoutBlockedUserInput>
    createMany?: UserBlockCreateManyBlockedUserInputEnvelope
    connect?: Enumerable<UserBlockWhereUniqueInput>
  }

  export type MatchHistoryUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<MatchHistoryCreateWithoutUserInput>, Enumerable<MatchHistoryUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<MatchHistoryCreateOrConnectWithoutUserInput>
    createMany?: MatchHistoryCreateManyUserInputEnvelope
    connect?: Enumerable<MatchHistoryWhereUniqueInput>
  }

  export type UserChatUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<UserChatCreateWithoutUserInput>, Enumerable<UserChatUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<UserChatCreateOrConnectWithoutUserInput>
    createMany?: UserChatCreateManyUserInputEnvelope
    connect?: Enumerable<UserChatWhereUniqueInput>
  }

  export type MessageUncheckedCreateNestedManyWithoutSenderInput = {
    create?: XOR<Enumerable<MessageCreateWithoutSenderInput>, Enumerable<MessageUncheckedCreateWithoutSenderInput>>
    connectOrCreate?: Enumerable<MessageCreateOrConnectWithoutSenderInput>
    createMany?: MessageCreateManySenderInputEnvelope
    connect?: Enumerable<MessageWhereUniqueInput>
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type UserFriendUpdateManyWithoutUserNestedInput = {
    create?: XOR<Enumerable<UserFriendCreateWithoutUserInput>, Enumerable<UserFriendUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<UserFriendCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<UserFriendUpsertWithWhereUniqueWithoutUserInput>
    createMany?: UserFriendCreateManyUserInputEnvelope
    set?: Enumerable<UserFriendWhereUniqueInput>
    disconnect?: Enumerable<UserFriendWhereUniqueInput>
    delete?: Enumerable<UserFriendWhereUniqueInput>
    connect?: Enumerable<UserFriendWhereUniqueInput>
    update?: Enumerable<UserFriendUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<UserFriendUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<UserFriendScalarWhereInput>
  }

  export type UserFriendUpdateManyWithoutFriendNestedInput = {
    create?: XOR<Enumerable<UserFriendCreateWithoutFriendInput>, Enumerable<UserFriendUncheckedCreateWithoutFriendInput>>
    connectOrCreate?: Enumerable<UserFriendCreateOrConnectWithoutFriendInput>
    upsert?: Enumerable<UserFriendUpsertWithWhereUniqueWithoutFriendInput>
    createMany?: UserFriendCreateManyFriendInputEnvelope
    set?: Enumerable<UserFriendWhereUniqueInput>
    disconnect?: Enumerable<UserFriendWhereUniqueInput>
    delete?: Enumerable<UserFriendWhereUniqueInput>
    connect?: Enumerable<UserFriendWhereUniqueInput>
    update?: Enumerable<UserFriendUpdateWithWhereUniqueWithoutFriendInput>
    updateMany?: Enumerable<UserFriendUpdateManyWithWhereWithoutFriendInput>
    deleteMany?: Enumerable<UserFriendScalarWhereInput>
  }

  export type UserBlockUpdateManyWithoutUserNestedInput = {
    create?: XOR<Enumerable<UserBlockCreateWithoutUserInput>, Enumerable<UserBlockUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<UserBlockCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<UserBlockUpsertWithWhereUniqueWithoutUserInput>
    createMany?: UserBlockCreateManyUserInputEnvelope
    set?: Enumerable<UserBlockWhereUniqueInput>
    disconnect?: Enumerable<UserBlockWhereUniqueInput>
    delete?: Enumerable<UserBlockWhereUniqueInput>
    connect?: Enumerable<UserBlockWhereUniqueInput>
    update?: Enumerable<UserBlockUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<UserBlockUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<UserBlockScalarWhereInput>
  }

  export type UserBlockUpdateManyWithoutBlockedUserNestedInput = {
    create?: XOR<Enumerable<UserBlockCreateWithoutBlockedUserInput>, Enumerable<UserBlockUncheckedCreateWithoutBlockedUserInput>>
    connectOrCreate?: Enumerable<UserBlockCreateOrConnectWithoutBlockedUserInput>
    upsert?: Enumerable<UserBlockUpsertWithWhereUniqueWithoutBlockedUserInput>
    createMany?: UserBlockCreateManyBlockedUserInputEnvelope
    set?: Enumerable<UserBlockWhereUniqueInput>
    disconnect?: Enumerable<UserBlockWhereUniqueInput>
    delete?: Enumerable<UserBlockWhereUniqueInput>
    connect?: Enumerable<UserBlockWhereUniqueInput>
    update?: Enumerable<UserBlockUpdateWithWhereUniqueWithoutBlockedUserInput>
    updateMany?: Enumerable<UserBlockUpdateManyWithWhereWithoutBlockedUserInput>
    deleteMany?: Enumerable<UserBlockScalarWhereInput>
  }

  export type MatchHistoryUpdateManyWithoutUserNestedInput = {
    create?: XOR<Enumerable<MatchHistoryCreateWithoutUserInput>, Enumerable<MatchHistoryUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<MatchHistoryCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<MatchHistoryUpsertWithWhereUniqueWithoutUserInput>
    createMany?: MatchHistoryCreateManyUserInputEnvelope
    set?: Enumerable<MatchHistoryWhereUniqueInput>
    disconnect?: Enumerable<MatchHistoryWhereUniqueInput>
    delete?: Enumerable<MatchHistoryWhereUniqueInput>
    connect?: Enumerable<MatchHistoryWhereUniqueInput>
    update?: Enumerable<MatchHistoryUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<MatchHistoryUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<MatchHistoryScalarWhereInput>
  }

  export type UserChatUpdateManyWithoutUserNestedInput = {
    create?: XOR<Enumerable<UserChatCreateWithoutUserInput>, Enumerable<UserChatUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<UserChatCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<UserChatUpsertWithWhereUniqueWithoutUserInput>
    createMany?: UserChatCreateManyUserInputEnvelope
    set?: Enumerable<UserChatWhereUniqueInput>
    disconnect?: Enumerable<UserChatWhereUniqueInput>
    delete?: Enumerable<UserChatWhereUniqueInput>
    connect?: Enumerable<UserChatWhereUniqueInput>
    update?: Enumerable<UserChatUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<UserChatUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<UserChatScalarWhereInput>
  }

  export type MessageUpdateManyWithoutSenderNestedInput = {
    create?: XOR<Enumerable<MessageCreateWithoutSenderInput>, Enumerable<MessageUncheckedCreateWithoutSenderInput>>
    connectOrCreate?: Enumerable<MessageCreateOrConnectWithoutSenderInput>
    upsert?: Enumerable<MessageUpsertWithWhereUniqueWithoutSenderInput>
    createMany?: MessageCreateManySenderInputEnvelope
    set?: Enumerable<MessageWhereUniqueInput>
    disconnect?: Enumerable<MessageWhereUniqueInput>
    delete?: Enumerable<MessageWhereUniqueInput>
    connect?: Enumerable<MessageWhereUniqueInput>
    update?: Enumerable<MessageUpdateWithWhereUniqueWithoutSenderInput>
    updateMany?: Enumerable<MessageUpdateManyWithWhereWithoutSenderInput>
    deleteMany?: Enumerable<MessageScalarWhereInput>
  }

  export type UserFriendUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<Enumerable<UserFriendCreateWithoutUserInput>, Enumerable<UserFriendUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<UserFriendCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<UserFriendUpsertWithWhereUniqueWithoutUserInput>
    createMany?: UserFriendCreateManyUserInputEnvelope
    set?: Enumerable<UserFriendWhereUniqueInput>
    disconnect?: Enumerable<UserFriendWhereUniqueInput>
    delete?: Enumerable<UserFriendWhereUniqueInput>
    connect?: Enumerable<UserFriendWhereUniqueInput>
    update?: Enumerable<UserFriendUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<UserFriendUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<UserFriendScalarWhereInput>
  }

  export type UserFriendUncheckedUpdateManyWithoutFriendNestedInput = {
    create?: XOR<Enumerable<UserFriendCreateWithoutFriendInput>, Enumerable<UserFriendUncheckedCreateWithoutFriendInput>>
    connectOrCreate?: Enumerable<UserFriendCreateOrConnectWithoutFriendInput>
    upsert?: Enumerable<UserFriendUpsertWithWhereUniqueWithoutFriendInput>
    createMany?: UserFriendCreateManyFriendInputEnvelope
    set?: Enumerable<UserFriendWhereUniqueInput>
    disconnect?: Enumerable<UserFriendWhereUniqueInput>
    delete?: Enumerable<UserFriendWhereUniqueInput>
    connect?: Enumerable<UserFriendWhereUniqueInput>
    update?: Enumerable<UserFriendUpdateWithWhereUniqueWithoutFriendInput>
    updateMany?: Enumerable<UserFriendUpdateManyWithWhereWithoutFriendInput>
    deleteMany?: Enumerable<UserFriendScalarWhereInput>
  }

  export type UserBlockUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<Enumerable<UserBlockCreateWithoutUserInput>, Enumerable<UserBlockUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<UserBlockCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<UserBlockUpsertWithWhereUniqueWithoutUserInput>
    createMany?: UserBlockCreateManyUserInputEnvelope
    set?: Enumerable<UserBlockWhereUniqueInput>
    disconnect?: Enumerable<UserBlockWhereUniqueInput>
    delete?: Enumerable<UserBlockWhereUniqueInput>
    connect?: Enumerable<UserBlockWhereUniqueInput>
    update?: Enumerable<UserBlockUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<UserBlockUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<UserBlockScalarWhereInput>
  }

  export type UserBlockUncheckedUpdateManyWithoutBlockedUserNestedInput = {
    create?: XOR<Enumerable<UserBlockCreateWithoutBlockedUserInput>, Enumerable<UserBlockUncheckedCreateWithoutBlockedUserInput>>
    connectOrCreate?: Enumerable<UserBlockCreateOrConnectWithoutBlockedUserInput>
    upsert?: Enumerable<UserBlockUpsertWithWhereUniqueWithoutBlockedUserInput>
    createMany?: UserBlockCreateManyBlockedUserInputEnvelope
    set?: Enumerable<UserBlockWhereUniqueInput>
    disconnect?: Enumerable<UserBlockWhereUniqueInput>
    delete?: Enumerable<UserBlockWhereUniqueInput>
    connect?: Enumerable<UserBlockWhereUniqueInput>
    update?: Enumerable<UserBlockUpdateWithWhereUniqueWithoutBlockedUserInput>
    updateMany?: Enumerable<UserBlockUpdateManyWithWhereWithoutBlockedUserInput>
    deleteMany?: Enumerable<UserBlockScalarWhereInput>
  }

  export type MatchHistoryUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<Enumerable<MatchHistoryCreateWithoutUserInput>, Enumerable<MatchHistoryUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<MatchHistoryCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<MatchHistoryUpsertWithWhereUniqueWithoutUserInput>
    createMany?: MatchHistoryCreateManyUserInputEnvelope
    set?: Enumerable<MatchHistoryWhereUniqueInput>
    disconnect?: Enumerable<MatchHistoryWhereUniqueInput>
    delete?: Enumerable<MatchHistoryWhereUniqueInput>
    connect?: Enumerable<MatchHistoryWhereUniqueInput>
    update?: Enumerable<MatchHistoryUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<MatchHistoryUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<MatchHistoryScalarWhereInput>
  }

  export type UserChatUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<Enumerable<UserChatCreateWithoutUserInput>, Enumerable<UserChatUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<UserChatCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<UserChatUpsertWithWhereUniqueWithoutUserInput>
    createMany?: UserChatCreateManyUserInputEnvelope
    set?: Enumerable<UserChatWhereUniqueInput>
    disconnect?: Enumerable<UserChatWhereUniqueInput>
    delete?: Enumerable<UserChatWhereUniqueInput>
    connect?: Enumerable<UserChatWhereUniqueInput>
    update?: Enumerable<UserChatUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<UserChatUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<UserChatScalarWhereInput>
  }

  export type MessageUncheckedUpdateManyWithoutSenderNestedInput = {
    create?: XOR<Enumerable<MessageCreateWithoutSenderInput>, Enumerable<MessageUncheckedCreateWithoutSenderInput>>
    connectOrCreate?: Enumerable<MessageCreateOrConnectWithoutSenderInput>
    upsert?: Enumerable<MessageUpsertWithWhereUniqueWithoutSenderInput>
    createMany?: MessageCreateManySenderInputEnvelope
    set?: Enumerable<MessageWhereUniqueInput>
    disconnect?: Enumerable<MessageWhereUniqueInput>
    delete?: Enumerable<MessageWhereUniqueInput>
    connect?: Enumerable<MessageWhereUniqueInput>
    update?: Enumerable<MessageUpdateWithWhereUniqueWithoutSenderInput>
    updateMany?: Enumerable<MessageUpdateManyWithWhereWithoutSenderInput>
    deleteMany?: Enumerable<MessageScalarWhereInput>
  }

  export type UserCreateNestedOneWithoutUserBlocksInput = {
    create?: XOR<UserCreateWithoutUserBlocksInput, UserUncheckedCreateWithoutUserBlocksInput>
    connectOrCreate?: UserCreateOrConnectWithoutUserBlocksInput
    connect?: UserWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutBlockedUsersInput = {
    create?: XOR<UserCreateWithoutBlockedUsersInput, UserUncheckedCreateWithoutBlockedUsersInput>
    connectOrCreate?: UserCreateOrConnectWithoutBlockedUsersInput
    connect?: UserWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutUserBlocksNestedInput = {
    create?: XOR<UserCreateWithoutUserBlocksInput, UserUncheckedCreateWithoutUserBlocksInput>
    connectOrCreate?: UserCreateOrConnectWithoutUserBlocksInput
    upsert?: UserUpsertWithoutUserBlocksInput
    connect?: UserWhereUniqueInput
    update?: XOR<UserUpdateWithoutUserBlocksInput, UserUncheckedUpdateWithoutUserBlocksInput>
  }

  export type UserUpdateOneRequiredWithoutBlockedUsersNestedInput = {
    create?: XOR<UserCreateWithoutBlockedUsersInput, UserUncheckedCreateWithoutBlockedUsersInput>
    connectOrCreate?: UserCreateOrConnectWithoutBlockedUsersInput
    upsert?: UserUpsertWithoutBlockedUsersInput
    connect?: UserWhereUniqueInput
    update?: XOR<UserUpdateWithoutBlockedUsersInput, UserUncheckedUpdateWithoutBlockedUsersInput>
  }

  export type UserCreateNestedOneWithoutUserFriendsInput = {
    create?: XOR<UserCreateWithoutUserFriendsInput, UserUncheckedCreateWithoutUserFriendsInput>
    connectOrCreate?: UserCreateOrConnectWithoutUserFriendsInput
    connect?: UserWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutFriendUsersInput = {
    create?: XOR<UserCreateWithoutFriendUsersInput, UserUncheckedCreateWithoutFriendUsersInput>
    connectOrCreate?: UserCreateOrConnectWithoutFriendUsersInput
    connect?: UserWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutUserFriendsNestedInput = {
    create?: XOR<UserCreateWithoutUserFriendsInput, UserUncheckedCreateWithoutUserFriendsInput>
    connectOrCreate?: UserCreateOrConnectWithoutUserFriendsInput
    upsert?: UserUpsertWithoutUserFriendsInput
    connect?: UserWhereUniqueInput
    update?: XOR<UserUpdateWithoutUserFriendsInput, UserUncheckedUpdateWithoutUserFriendsInput>
  }

  export type UserUpdateOneRequiredWithoutFriendUsersNestedInput = {
    create?: XOR<UserCreateWithoutFriendUsersInput, UserUncheckedCreateWithoutFriendUsersInput>
    connectOrCreate?: UserCreateOrConnectWithoutFriendUsersInput
    upsert?: UserUpsertWithoutFriendUsersInput
    connect?: UserWhereUniqueInput
    update?: XOR<UserUpdateWithoutFriendUsersInput, UserUncheckedUpdateWithoutFriendUsersInput>
  }

  export type UserCreateNestedOneWithoutHistoryInput = {
    create?: XOR<UserCreateWithoutHistoryInput, UserUncheckedCreateWithoutHistoryInput>
    connectOrCreate?: UserCreateOrConnectWithoutHistoryInput
    connect?: UserWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutHistoryNestedInput = {
    create?: XOR<UserCreateWithoutHistoryInput, UserUncheckedCreateWithoutHistoryInput>
    connectOrCreate?: UserCreateOrConnectWithoutHistoryInput
    upsert?: UserUpsertWithoutHistoryInput
    connect?: UserWhereUniqueInput
    update?: XOR<UserUpdateWithoutHistoryInput, UserUncheckedUpdateWithoutHistoryInput>
  }

  export type MessageCreateNestedManyWithoutChatInput = {
    create?: XOR<Enumerable<MessageCreateWithoutChatInput>, Enumerable<MessageUncheckedCreateWithoutChatInput>>
    connectOrCreate?: Enumerable<MessageCreateOrConnectWithoutChatInput>
    createMany?: MessageCreateManyChatInputEnvelope
    connect?: Enumerable<MessageWhereUniqueInput>
  }

  export type UserChatCreateNestedManyWithoutChatInput = {
    create?: XOR<Enumerable<UserChatCreateWithoutChatInput>, Enumerable<UserChatUncheckedCreateWithoutChatInput>>
    connectOrCreate?: Enumerable<UserChatCreateOrConnectWithoutChatInput>
    createMany?: UserChatCreateManyChatInputEnvelope
    connect?: Enumerable<UserChatWhereUniqueInput>
  }

  export type MessageUncheckedCreateNestedManyWithoutChatInput = {
    create?: XOR<Enumerable<MessageCreateWithoutChatInput>, Enumerable<MessageUncheckedCreateWithoutChatInput>>
    connectOrCreate?: Enumerable<MessageCreateOrConnectWithoutChatInput>
    createMany?: MessageCreateManyChatInputEnvelope
    connect?: Enumerable<MessageWhereUniqueInput>
  }

  export type UserChatUncheckedCreateNestedManyWithoutChatInput = {
    create?: XOR<Enumerable<UserChatCreateWithoutChatInput>, Enumerable<UserChatUncheckedCreateWithoutChatInput>>
    connectOrCreate?: Enumerable<UserChatCreateOrConnectWithoutChatInput>
    createMany?: UserChatCreateManyChatInputEnvelope
    connect?: Enumerable<UserChatWhereUniqueInput>
  }

  export type EnumChatTypeFieldUpdateOperationsInput = {
    set?: ChatType
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type MessageUpdateManyWithoutChatNestedInput = {
    create?: XOR<Enumerable<MessageCreateWithoutChatInput>, Enumerable<MessageUncheckedCreateWithoutChatInput>>
    connectOrCreate?: Enumerable<MessageCreateOrConnectWithoutChatInput>
    upsert?: Enumerable<MessageUpsertWithWhereUniqueWithoutChatInput>
    createMany?: MessageCreateManyChatInputEnvelope
    set?: Enumerable<MessageWhereUniqueInput>
    disconnect?: Enumerable<MessageWhereUniqueInput>
    delete?: Enumerable<MessageWhereUniqueInput>
    connect?: Enumerable<MessageWhereUniqueInput>
    update?: Enumerable<MessageUpdateWithWhereUniqueWithoutChatInput>
    updateMany?: Enumerable<MessageUpdateManyWithWhereWithoutChatInput>
    deleteMany?: Enumerable<MessageScalarWhereInput>
  }

  export type UserChatUpdateManyWithoutChatNestedInput = {
    create?: XOR<Enumerable<UserChatCreateWithoutChatInput>, Enumerable<UserChatUncheckedCreateWithoutChatInput>>
    connectOrCreate?: Enumerable<UserChatCreateOrConnectWithoutChatInput>
    upsert?: Enumerable<UserChatUpsertWithWhereUniqueWithoutChatInput>
    createMany?: UserChatCreateManyChatInputEnvelope
    set?: Enumerable<UserChatWhereUniqueInput>
    disconnect?: Enumerable<UserChatWhereUniqueInput>
    delete?: Enumerable<UserChatWhereUniqueInput>
    connect?: Enumerable<UserChatWhereUniqueInput>
    update?: Enumerable<UserChatUpdateWithWhereUniqueWithoutChatInput>
    updateMany?: Enumerable<UserChatUpdateManyWithWhereWithoutChatInput>
    deleteMany?: Enumerable<UserChatScalarWhereInput>
  }

  export type MessageUncheckedUpdateManyWithoutChatNestedInput = {
    create?: XOR<Enumerable<MessageCreateWithoutChatInput>, Enumerable<MessageUncheckedCreateWithoutChatInput>>
    connectOrCreate?: Enumerable<MessageCreateOrConnectWithoutChatInput>
    upsert?: Enumerable<MessageUpsertWithWhereUniqueWithoutChatInput>
    createMany?: MessageCreateManyChatInputEnvelope
    set?: Enumerable<MessageWhereUniqueInput>
    disconnect?: Enumerable<MessageWhereUniqueInput>
    delete?: Enumerable<MessageWhereUniqueInput>
    connect?: Enumerable<MessageWhereUniqueInput>
    update?: Enumerable<MessageUpdateWithWhereUniqueWithoutChatInput>
    updateMany?: Enumerable<MessageUpdateManyWithWhereWithoutChatInput>
    deleteMany?: Enumerable<MessageScalarWhereInput>
  }

  export type UserChatUncheckedUpdateManyWithoutChatNestedInput = {
    create?: XOR<Enumerable<UserChatCreateWithoutChatInput>, Enumerable<UserChatUncheckedCreateWithoutChatInput>>
    connectOrCreate?: Enumerable<UserChatCreateOrConnectWithoutChatInput>
    upsert?: Enumerable<UserChatUpsertWithWhereUniqueWithoutChatInput>
    createMany?: UserChatCreateManyChatInputEnvelope
    set?: Enumerable<UserChatWhereUniqueInput>
    disconnect?: Enumerable<UserChatWhereUniqueInput>
    delete?: Enumerable<UserChatWhereUniqueInput>
    connect?: Enumerable<UserChatWhereUniqueInput>
    update?: Enumerable<UserChatUpdateWithWhereUniqueWithoutChatInput>
    updateMany?: Enumerable<UserChatUpdateManyWithWhereWithoutChatInput>
    deleteMany?: Enumerable<UserChatScalarWhereInput>
  }

  export type UserCreateNestedOneWithoutMessagesInput = {
    create?: XOR<UserCreateWithoutMessagesInput, UserUncheckedCreateWithoutMessagesInput>
    connectOrCreate?: UserCreateOrConnectWithoutMessagesInput
    connect?: UserWhereUniqueInput
  }

  export type ChatCreateNestedOneWithoutMessagesInput = {
    create?: XOR<ChatCreateWithoutMessagesInput, ChatUncheckedCreateWithoutMessagesInput>
    connectOrCreate?: ChatCreateOrConnectWithoutMessagesInput
    connect?: ChatWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutMessagesNestedInput = {
    create?: XOR<UserCreateWithoutMessagesInput, UserUncheckedCreateWithoutMessagesInput>
    connectOrCreate?: UserCreateOrConnectWithoutMessagesInput
    upsert?: UserUpsertWithoutMessagesInput
    connect?: UserWhereUniqueInput
    update?: XOR<UserUpdateWithoutMessagesInput, UserUncheckedUpdateWithoutMessagesInput>
  }

  export type ChatUpdateOneRequiredWithoutMessagesNestedInput = {
    create?: XOR<ChatCreateWithoutMessagesInput, ChatUncheckedCreateWithoutMessagesInput>
    connectOrCreate?: ChatCreateOrConnectWithoutMessagesInput
    upsert?: ChatUpsertWithoutMessagesInput
    connect?: ChatWhereUniqueInput
    update?: XOR<ChatUpdateWithoutMessagesInput, ChatUncheckedUpdateWithoutMessagesInput>
  }

  export type UserCreateNestedOneWithoutChatsInput = {
    create?: XOR<UserCreateWithoutChatsInput, UserUncheckedCreateWithoutChatsInput>
    connectOrCreate?: UserCreateOrConnectWithoutChatsInput
    connect?: UserWhereUniqueInput
  }

  export type ChatCreateNestedOneWithoutUsersInput = {
    create?: XOR<ChatCreateWithoutUsersInput, ChatUncheckedCreateWithoutUsersInput>
    connectOrCreate?: ChatCreateOrConnectWithoutUsersInput
    connect?: ChatWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutChatsNestedInput = {
    create?: XOR<UserCreateWithoutChatsInput, UserUncheckedCreateWithoutChatsInput>
    connectOrCreate?: UserCreateOrConnectWithoutChatsInput
    upsert?: UserUpsertWithoutChatsInput
    connect?: UserWhereUniqueInput
    update?: XOR<UserUpdateWithoutChatsInput, UserUncheckedUpdateWithoutChatsInput>
  }

  export type ChatUpdateOneRequiredWithoutUsersNestedInput = {
    create?: XOR<ChatCreateWithoutUsersInput, ChatUncheckedCreateWithoutUsersInput>
    connectOrCreate?: ChatCreateOrConnectWithoutUsersInput
    upsert?: ChatUpsertWithoutUsersInput
    connect?: ChatWhereUniqueInput
    update?: XOR<ChatUpdateWithoutUsersInput, ChatUncheckedUpdateWithoutUsersInput>
  }

  export type NestedIntFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type NestedDateTimeFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeFilter | Date | string
  }

  export type NestedStringFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringFilter | string
  }

  export type NestedBoolFilter = {
    equals?: boolean
    not?: NestedBoolFilter | boolean
  }

  export type NestedIntWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedIntFilter
    _min?: NestedIntFilter
    _max?: NestedIntFilter
  }

  export type NestedFloatFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatFilter | number
  }

  export type NestedDateTimeWithAggregatesFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeWithAggregatesFilter | Date | string
    _count?: NestedIntFilter
    _min?: NestedDateTimeFilter
    _max?: NestedDateTimeFilter
  }

  export type NestedStringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringWithAggregatesFilter | string
    _count?: NestedIntFilter
    _min?: NestedStringFilter
    _max?: NestedStringFilter
  }

  export type NestedBoolWithAggregatesFilter = {
    equals?: boolean
    not?: NestedBoolWithAggregatesFilter | boolean
    _count?: NestedIntFilter
    _min?: NestedBoolFilter
    _max?: NestedBoolFilter
  }

  export type NestedEnumChatTypeFilter = {
    equals?: ChatType
    in?: Enumerable<ChatType>
    notIn?: Enumerable<ChatType>
    not?: NestedEnumChatTypeFilter | ChatType
  }

  export type NestedStringNullableFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableFilter | string | null
  }

  export type NestedEnumChatTypeWithAggregatesFilter = {
    equals?: ChatType
    in?: Enumerable<ChatType>
    notIn?: Enumerable<ChatType>
    not?: NestedEnumChatTypeWithAggregatesFilter | ChatType
    _count?: NestedIntFilter
    _min?: NestedEnumChatTypeFilter
    _max?: NestedEnumChatTypeFilter
  }

  export type NestedStringNullableWithAggregatesFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableWithAggregatesFilter | string | null
    _count?: NestedIntNullableFilter
    _min?: NestedStringNullableFilter
    _max?: NestedStringNullableFilter
  }

  export type NestedIntNullableFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableFilter | number | null
  }

  export type UserFriendCreateWithoutUserInput = {
    createdAt?: Date | string
    friend: UserCreateNestedOneWithoutFriendUsersInput
  }

  export type UserFriendUncheckedCreateWithoutUserInput = {
    id?: number
    friendId: number
    createdAt?: Date | string
  }

  export type UserFriendCreateOrConnectWithoutUserInput = {
    where: UserFriendWhereUniqueInput
    create: XOR<UserFriendCreateWithoutUserInput, UserFriendUncheckedCreateWithoutUserInput>
  }

  export type UserFriendCreateManyUserInputEnvelope = {
    data: Enumerable<UserFriendCreateManyUserInput>
    skipDuplicates?: boolean
  }

  export type UserFriendCreateWithoutFriendInput = {
    createdAt?: Date | string
    user: UserCreateNestedOneWithoutUserFriendsInput
  }

  export type UserFriendUncheckedCreateWithoutFriendInput = {
    id?: number
    userId: number
    createdAt?: Date | string
  }

  export type UserFriendCreateOrConnectWithoutFriendInput = {
    where: UserFriendWhereUniqueInput
    create: XOR<UserFriendCreateWithoutFriendInput, UserFriendUncheckedCreateWithoutFriendInput>
  }

  export type UserFriendCreateManyFriendInputEnvelope = {
    data: Enumerable<UserFriendCreateManyFriendInput>
    skipDuplicates?: boolean
  }

  export type UserBlockCreateWithoutUserInput = {
    createdAt?: Date | string
    blockedUser: UserCreateNestedOneWithoutBlockedUsersInput
  }

  export type UserBlockUncheckedCreateWithoutUserInput = {
    id?: number
    blockedId: number
    createdAt?: Date | string
  }

  export type UserBlockCreateOrConnectWithoutUserInput = {
    where: UserBlockWhereUniqueInput
    create: XOR<UserBlockCreateWithoutUserInput, UserBlockUncheckedCreateWithoutUserInput>
  }

  export type UserBlockCreateManyUserInputEnvelope = {
    data: Enumerable<UserBlockCreateManyUserInput>
    skipDuplicates?: boolean
  }

  export type UserBlockCreateWithoutBlockedUserInput = {
    createdAt?: Date | string
    user: UserCreateNestedOneWithoutUserBlocksInput
  }

  export type UserBlockUncheckedCreateWithoutBlockedUserInput = {
    id?: number
    userId: number
    createdAt?: Date | string
  }

  export type UserBlockCreateOrConnectWithoutBlockedUserInput = {
    where: UserBlockWhereUniqueInput
    create: XOR<UserBlockCreateWithoutBlockedUserInput, UserBlockUncheckedCreateWithoutBlockedUserInput>
  }

  export type UserBlockCreateManyBlockedUserInputEnvelope = {
    data: Enumerable<UserBlockCreateManyBlockedUserInput>
    skipDuplicates?: boolean
  }

  export type MatchHistoryCreateWithoutUserInput = {
    userName: string
    opponentName: string
    createdAt?: Date | string
    ladder: number
    won?: boolean
  }

  export type MatchHistoryUncheckedCreateWithoutUserInput = {
    id?: number
    userName: string
    opponentName: string
    createdAt?: Date | string
    ladder: number
    won?: boolean
  }

  export type MatchHistoryCreateOrConnectWithoutUserInput = {
    where: MatchHistoryWhereUniqueInput
    create: XOR<MatchHistoryCreateWithoutUserInput, MatchHistoryUncheckedCreateWithoutUserInput>
  }

  export type MatchHistoryCreateManyUserInputEnvelope = {
    data: Enumerable<MatchHistoryCreateManyUserInput>
    skipDuplicates?: boolean
  }

  export type UserChatCreateWithoutUserInput = {
    isOwner: boolean
    isBlocked: boolean
    permissions: string
    chat: ChatCreateNestedOneWithoutUsersInput
  }

  export type UserChatUncheckedCreateWithoutUserInput = {
    chatId: number
    isOwner: boolean
    isBlocked: boolean
    permissions: string
  }

  export type UserChatCreateOrConnectWithoutUserInput = {
    where: UserChatWhereUniqueInput
    create: XOR<UserChatCreateWithoutUserInput, UserChatUncheckedCreateWithoutUserInput>
  }

  export type UserChatCreateManyUserInputEnvelope = {
    data: Enumerable<UserChatCreateManyUserInput>
    skipDuplicates?: boolean
  }

  export type MessageCreateWithoutSenderInput = {
    createdAt?: Date | string
    content: string
    chat: ChatCreateNestedOneWithoutMessagesInput
  }

  export type MessageUncheckedCreateWithoutSenderInput = {
    id?: number
    createdAt?: Date | string
    content: string
    chatId: number
  }

  export type MessageCreateOrConnectWithoutSenderInput = {
    where: MessageWhereUniqueInput
    create: XOR<MessageCreateWithoutSenderInput, MessageUncheckedCreateWithoutSenderInput>
  }

  export type MessageCreateManySenderInputEnvelope = {
    data: Enumerable<MessageCreateManySenderInput>
    skipDuplicates?: boolean
  }

  export type UserFriendUpsertWithWhereUniqueWithoutUserInput = {
    where: UserFriendWhereUniqueInput
    update: XOR<UserFriendUpdateWithoutUserInput, UserFriendUncheckedUpdateWithoutUserInput>
    create: XOR<UserFriendCreateWithoutUserInput, UserFriendUncheckedCreateWithoutUserInput>
  }

  export type UserFriendUpdateWithWhereUniqueWithoutUserInput = {
    where: UserFriendWhereUniqueInput
    data: XOR<UserFriendUpdateWithoutUserInput, UserFriendUncheckedUpdateWithoutUserInput>
  }

  export type UserFriendUpdateManyWithWhereWithoutUserInput = {
    where: UserFriendScalarWhereInput
    data: XOR<UserFriendUpdateManyMutationInput, UserFriendUncheckedUpdateManyWithoutUserFriendsInput>
  }

  export type UserFriendScalarWhereInput = {
    AND?: Enumerable<UserFriendScalarWhereInput>
    OR?: Enumerable<UserFriendScalarWhereInput>
    NOT?: Enumerable<UserFriendScalarWhereInput>
    id?: IntFilter | number
    userId?: IntFilter | number
    friendId?: IntFilter | number
    createdAt?: DateTimeFilter | Date | string
  }

  export type UserFriendUpsertWithWhereUniqueWithoutFriendInput = {
    where: UserFriendWhereUniqueInput
    update: XOR<UserFriendUpdateWithoutFriendInput, UserFriendUncheckedUpdateWithoutFriendInput>
    create: XOR<UserFriendCreateWithoutFriendInput, UserFriendUncheckedCreateWithoutFriendInput>
  }

  export type UserFriendUpdateWithWhereUniqueWithoutFriendInput = {
    where: UserFriendWhereUniqueInput
    data: XOR<UserFriendUpdateWithoutFriendInput, UserFriendUncheckedUpdateWithoutFriendInput>
  }

  export type UserFriendUpdateManyWithWhereWithoutFriendInput = {
    where: UserFriendScalarWhereInput
    data: XOR<UserFriendUpdateManyMutationInput, UserFriendUncheckedUpdateManyWithoutFriendUsersInput>
  }

  export type UserBlockUpsertWithWhereUniqueWithoutUserInput = {
    where: UserBlockWhereUniqueInput
    update: XOR<UserBlockUpdateWithoutUserInput, UserBlockUncheckedUpdateWithoutUserInput>
    create: XOR<UserBlockCreateWithoutUserInput, UserBlockUncheckedCreateWithoutUserInput>
  }

  export type UserBlockUpdateWithWhereUniqueWithoutUserInput = {
    where: UserBlockWhereUniqueInput
    data: XOR<UserBlockUpdateWithoutUserInput, UserBlockUncheckedUpdateWithoutUserInput>
  }

  export type UserBlockUpdateManyWithWhereWithoutUserInput = {
    where: UserBlockScalarWhereInput
    data: XOR<UserBlockUpdateManyMutationInput, UserBlockUncheckedUpdateManyWithoutUserBlocksInput>
  }

  export type UserBlockScalarWhereInput = {
    AND?: Enumerable<UserBlockScalarWhereInput>
    OR?: Enumerable<UserBlockScalarWhereInput>
    NOT?: Enumerable<UserBlockScalarWhereInput>
    id?: IntFilter | number
    userId?: IntFilter | number
    blockedId?: IntFilter | number
    createdAt?: DateTimeFilter | Date | string
  }

  export type UserBlockUpsertWithWhereUniqueWithoutBlockedUserInput = {
    where: UserBlockWhereUniqueInput
    update: XOR<UserBlockUpdateWithoutBlockedUserInput, UserBlockUncheckedUpdateWithoutBlockedUserInput>
    create: XOR<UserBlockCreateWithoutBlockedUserInput, UserBlockUncheckedCreateWithoutBlockedUserInput>
  }

  export type UserBlockUpdateWithWhereUniqueWithoutBlockedUserInput = {
    where: UserBlockWhereUniqueInput
    data: XOR<UserBlockUpdateWithoutBlockedUserInput, UserBlockUncheckedUpdateWithoutBlockedUserInput>
  }

  export type UserBlockUpdateManyWithWhereWithoutBlockedUserInput = {
    where: UserBlockScalarWhereInput
    data: XOR<UserBlockUpdateManyMutationInput, UserBlockUncheckedUpdateManyWithoutBlockedUsersInput>
  }

  export type MatchHistoryUpsertWithWhereUniqueWithoutUserInput = {
    where: MatchHistoryWhereUniqueInput
    update: XOR<MatchHistoryUpdateWithoutUserInput, MatchHistoryUncheckedUpdateWithoutUserInput>
    create: XOR<MatchHistoryCreateWithoutUserInput, MatchHistoryUncheckedCreateWithoutUserInput>
  }

  export type MatchHistoryUpdateWithWhereUniqueWithoutUserInput = {
    where: MatchHistoryWhereUniqueInput
    data: XOR<MatchHistoryUpdateWithoutUserInput, MatchHistoryUncheckedUpdateWithoutUserInput>
  }

  export type MatchHistoryUpdateManyWithWhereWithoutUserInput = {
    where: MatchHistoryScalarWhereInput
    data: XOR<MatchHistoryUpdateManyMutationInput, MatchHistoryUncheckedUpdateManyWithoutHistoryInput>
  }

  export type MatchHistoryScalarWhereInput = {
    AND?: Enumerable<MatchHistoryScalarWhereInput>
    OR?: Enumerable<MatchHistoryScalarWhereInput>
    NOT?: Enumerable<MatchHistoryScalarWhereInput>
    id?: IntFilter | number
    userId?: IntFilter | number
    userName?: StringFilter | string
    opponentName?: StringFilter | string
    createdAt?: DateTimeFilter | Date | string
    ladder?: IntFilter | number
    won?: BoolFilter | boolean
  }

  export type UserChatUpsertWithWhereUniqueWithoutUserInput = {
    where: UserChatWhereUniqueInput
    update: XOR<UserChatUpdateWithoutUserInput, UserChatUncheckedUpdateWithoutUserInput>
    create: XOR<UserChatCreateWithoutUserInput, UserChatUncheckedCreateWithoutUserInput>
  }

  export type UserChatUpdateWithWhereUniqueWithoutUserInput = {
    where: UserChatWhereUniqueInput
    data: XOR<UserChatUpdateWithoutUserInput, UserChatUncheckedUpdateWithoutUserInput>
  }

  export type UserChatUpdateManyWithWhereWithoutUserInput = {
    where: UserChatScalarWhereInput
    data: XOR<UserChatUpdateManyMutationInput, UserChatUncheckedUpdateManyWithoutChatsInput>
  }

  export type UserChatScalarWhereInput = {
    AND?: Enumerable<UserChatScalarWhereInput>
    OR?: Enumerable<UserChatScalarWhereInput>
    NOT?: Enumerable<UserChatScalarWhereInput>
    userId?: IntFilter | number
    chatId?: IntFilter | number
    isOwner?: BoolFilter | boolean
    isBlocked?: BoolFilter | boolean
    permissions?: StringFilter | string
  }

  export type MessageUpsertWithWhereUniqueWithoutSenderInput = {
    where: MessageWhereUniqueInput
    update: XOR<MessageUpdateWithoutSenderInput, MessageUncheckedUpdateWithoutSenderInput>
    create: XOR<MessageCreateWithoutSenderInput, MessageUncheckedCreateWithoutSenderInput>
  }

  export type MessageUpdateWithWhereUniqueWithoutSenderInput = {
    where: MessageWhereUniqueInput
    data: XOR<MessageUpdateWithoutSenderInput, MessageUncheckedUpdateWithoutSenderInput>
  }

  export type MessageUpdateManyWithWhereWithoutSenderInput = {
    where: MessageScalarWhereInput
    data: XOR<MessageUpdateManyMutationInput, MessageUncheckedUpdateManyWithoutMessagesInput>
  }

  export type MessageScalarWhereInput = {
    AND?: Enumerable<MessageScalarWhereInput>
    OR?: Enumerable<MessageScalarWhereInput>
    NOT?: Enumerable<MessageScalarWhereInput>
    id?: IntFilter | number
    createdAt?: DateTimeFilter | Date | string
    content?: StringFilter | string
    userId?: IntFilter | number
    chatId?: IntFilter | number
  }

  export type UserCreateWithoutUserBlocksInput = {
    createdAt?: Date | string
    updatedAt?: Date | string
    name: string
    hash: string
    wins?: number
    losses?: number
    ladder_level?: number
    oauthId: string
    connected?: boolean
    userFriends?: UserFriendCreateNestedManyWithoutUserInput
    friendUsers?: UserFriendCreateNestedManyWithoutFriendInput
    blockedUsers?: UserBlockCreateNestedManyWithoutBlockedUserInput
    history?: MatchHistoryCreateNestedManyWithoutUserInput
    chats?: UserChatCreateNestedManyWithoutUserInput
    messages?: MessageCreateNestedManyWithoutSenderInput
  }

  export type UserUncheckedCreateWithoutUserBlocksInput = {
    id?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    name: string
    hash: string
    wins?: number
    losses?: number
    ladder_level?: number
    oauthId: string
    connected?: boolean
    userFriends?: UserFriendUncheckedCreateNestedManyWithoutUserInput
    friendUsers?: UserFriendUncheckedCreateNestedManyWithoutFriendInput
    blockedUsers?: UserBlockUncheckedCreateNestedManyWithoutBlockedUserInput
    history?: MatchHistoryUncheckedCreateNestedManyWithoutUserInput
    chats?: UserChatUncheckedCreateNestedManyWithoutUserInput
    messages?: MessageUncheckedCreateNestedManyWithoutSenderInput
  }

  export type UserCreateOrConnectWithoutUserBlocksInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutUserBlocksInput, UserUncheckedCreateWithoutUserBlocksInput>
  }

  export type UserCreateWithoutBlockedUsersInput = {
    createdAt?: Date | string
    updatedAt?: Date | string
    name: string
    hash: string
    wins?: number
    losses?: number
    ladder_level?: number
    oauthId: string
    connected?: boolean
    userFriends?: UserFriendCreateNestedManyWithoutUserInput
    friendUsers?: UserFriendCreateNestedManyWithoutFriendInput
    userBlocks?: UserBlockCreateNestedManyWithoutUserInput
    history?: MatchHistoryCreateNestedManyWithoutUserInput
    chats?: UserChatCreateNestedManyWithoutUserInput
    messages?: MessageCreateNestedManyWithoutSenderInput
  }

  export type UserUncheckedCreateWithoutBlockedUsersInput = {
    id?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    name: string
    hash: string
    wins?: number
    losses?: number
    ladder_level?: number
    oauthId: string
    connected?: boolean
    userFriends?: UserFriendUncheckedCreateNestedManyWithoutUserInput
    friendUsers?: UserFriendUncheckedCreateNestedManyWithoutFriendInput
    userBlocks?: UserBlockUncheckedCreateNestedManyWithoutUserInput
    history?: MatchHistoryUncheckedCreateNestedManyWithoutUserInput
    chats?: UserChatUncheckedCreateNestedManyWithoutUserInput
    messages?: MessageUncheckedCreateNestedManyWithoutSenderInput
  }

  export type UserCreateOrConnectWithoutBlockedUsersInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutBlockedUsersInput, UserUncheckedCreateWithoutBlockedUsersInput>
  }

  export type UserUpsertWithoutUserBlocksInput = {
    update: XOR<UserUpdateWithoutUserBlocksInput, UserUncheckedUpdateWithoutUserBlocksInput>
    create: XOR<UserCreateWithoutUserBlocksInput, UserUncheckedCreateWithoutUserBlocksInput>
  }

  export type UserUpdateWithoutUserBlocksInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    name?: StringFieldUpdateOperationsInput | string
    hash?: StringFieldUpdateOperationsInput | string
    wins?: IntFieldUpdateOperationsInput | number
    losses?: IntFieldUpdateOperationsInput | number
    ladder_level?: IntFieldUpdateOperationsInput | number
    oauthId?: StringFieldUpdateOperationsInput | string
    connected?: BoolFieldUpdateOperationsInput | boolean
    userFriends?: UserFriendUpdateManyWithoutUserNestedInput
    friendUsers?: UserFriendUpdateManyWithoutFriendNestedInput
    blockedUsers?: UserBlockUpdateManyWithoutBlockedUserNestedInput
    history?: MatchHistoryUpdateManyWithoutUserNestedInput
    chats?: UserChatUpdateManyWithoutUserNestedInput
    messages?: MessageUpdateManyWithoutSenderNestedInput
  }

  export type UserUncheckedUpdateWithoutUserBlocksInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    name?: StringFieldUpdateOperationsInput | string
    hash?: StringFieldUpdateOperationsInput | string
    wins?: IntFieldUpdateOperationsInput | number
    losses?: IntFieldUpdateOperationsInput | number
    ladder_level?: IntFieldUpdateOperationsInput | number
    oauthId?: StringFieldUpdateOperationsInput | string
    connected?: BoolFieldUpdateOperationsInput | boolean
    userFriends?: UserFriendUncheckedUpdateManyWithoutUserNestedInput
    friendUsers?: UserFriendUncheckedUpdateManyWithoutFriendNestedInput
    blockedUsers?: UserBlockUncheckedUpdateManyWithoutBlockedUserNestedInput
    history?: MatchHistoryUncheckedUpdateManyWithoutUserNestedInput
    chats?: UserChatUncheckedUpdateManyWithoutUserNestedInput
    messages?: MessageUncheckedUpdateManyWithoutSenderNestedInput
  }

  export type UserUpsertWithoutBlockedUsersInput = {
    update: XOR<UserUpdateWithoutBlockedUsersInput, UserUncheckedUpdateWithoutBlockedUsersInput>
    create: XOR<UserCreateWithoutBlockedUsersInput, UserUncheckedCreateWithoutBlockedUsersInput>
  }

  export type UserUpdateWithoutBlockedUsersInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    name?: StringFieldUpdateOperationsInput | string
    hash?: StringFieldUpdateOperationsInput | string
    wins?: IntFieldUpdateOperationsInput | number
    losses?: IntFieldUpdateOperationsInput | number
    ladder_level?: IntFieldUpdateOperationsInput | number
    oauthId?: StringFieldUpdateOperationsInput | string
    connected?: BoolFieldUpdateOperationsInput | boolean
    userFriends?: UserFriendUpdateManyWithoutUserNestedInput
    friendUsers?: UserFriendUpdateManyWithoutFriendNestedInput
    userBlocks?: UserBlockUpdateManyWithoutUserNestedInput
    history?: MatchHistoryUpdateManyWithoutUserNestedInput
    chats?: UserChatUpdateManyWithoutUserNestedInput
    messages?: MessageUpdateManyWithoutSenderNestedInput
  }

  export type UserUncheckedUpdateWithoutBlockedUsersInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    name?: StringFieldUpdateOperationsInput | string
    hash?: StringFieldUpdateOperationsInput | string
    wins?: IntFieldUpdateOperationsInput | number
    losses?: IntFieldUpdateOperationsInput | number
    ladder_level?: IntFieldUpdateOperationsInput | number
    oauthId?: StringFieldUpdateOperationsInput | string
    connected?: BoolFieldUpdateOperationsInput | boolean
    userFriends?: UserFriendUncheckedUpdateManyWithoutUserNestedInput
    friendUsers?: UserFriendUncheckedUpdateManyWithoutFriendNestedInput
    userBlocks?: UserBlockUncheckedUpdateManyWithoutUserNestedInput
    history?: MatchHistoryUncheckedUpdateManyWithoutUserNestedInput
    chats?: UserChatUncheckedUpdateManyWithoutUserNestedInput
    messages?: MessageUncheckedUpdateManyWithoutSenderNestedInput
  }

  export type UserCreateWithoutUserFriendsInput = {
    createdAt?: Date | string
    updatedAt?: Date | string
    name: string
    hash: string
    wins?: number
    losses?: number
    ladder_level?: number
    oauthId: string
    connected?: boolean
    friendUsers?: UserFriendCreateNestedManyWithoutFriendInput
    userBlocks?: UserBlockCreateNestedManyWithoutUserInput
    blockedUsers?: UserBlockCreateNestedManyWithoutBlockedUserInput
    history?: MatchHistoryCreateNestedManyWithoutUserInput
    chats?: UserChatCreateNestedManyWithoutUserInput
    messages?: MessageCreateNestedManyWithoutSenderInput
  }

  export type UserUncheckedCreateWithoutUserFriendsInput = {
    id?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    name: string
    hash: string
    wins?: number
    losses?: number
    ladder_level?: number
    oauthId: string
    connected?: boolean
    friendUsers?: UserFriendUncheckedCreateNestedManyWithoutFriendInput
    userBlocks?: UserBlockUncheckedCreateNestedManyWithoutUserInput
    blockedUsers?: UserBlockUncheckedCreateNestedManyWithoutBlockedUserInput
    history?: MatchHistoryUncheckedCreateNestedManyWithoutUserInput
    chats?: UserChatUncheckedCreateNestedManyWithoutUserInput
    messages?: MessageUncheckedCreateNestedManyWithoutSenderInput
  }

  export type UserCreateOrConnectWithoutUserFriendsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutUserFriendsInput, UserUncheckedCreateWithoutUserFriendsInput>
  }

  export type UserCreateWithoutFriendUsersInput = {
    createdAt?: Date | string
    updatedAt?: Date | string
    name: string
    hash: string
    wins?: number
    losses?: number
    ladder_level?: number
    oauthId: string
    connected?: boolean
    userFriends?: UserFriendCreateNestedManyWithoutUserInput
    userBlocks?: UserBlockCreateNestedManyWithoutUserInput
    blockedUsers?: UserBlockCreateNestedManyWithoutBlockedUserInput
    history?: MatchHistoryCreateNestedManyWithoutUserInput
    chats?: UserChatCreateNestedManyWithoutUserInput
    messages?: MessageCreateNestedManyWithoutSenderInput
  }

  export type UserUncheckedCreateWithoutFriendUsersInput = {
    id?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    name: string
    hash: string
    wins?: number
    losses?: number
    ladder_level?: number
    oauthId: string
    connected?: boolean
    userFriends?: UserFriendUncheckedCreateNestedManyWithoutUserInput
    userBlocks?: UserBlockUncheckedCreateNestedManyWithoutUserInput
    blockedUsers?: UserBlockUncheckedCreateNestedManyWithoutBlockedUserInput
    history?: MatchHistoryUncheckedCreateNestedManyWithoutUserInput
    chats?: UserChatUncheckedCreateNestedManyWithoutUserInput
    messages?: MessageUncheckedCreateNestedManyWithoutSenderInput
  }

  export type UserCreateOrConnectWithoutFriendUsersInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutFriendUsersInput, UserUncheckedCreateWithoutFriendUsersInput>
  }

  export type UserUpsertWithoutUserFriendsInput = {
    update: XOR<UserUpdateWithoutUserFriendsInput, UserUncheckedUpdateWithoutUserFriendsInput>
    create: XOR<UserCreateWithoutUserFriendsInput, UserUncheckedCreateWithoutUserFriendsInput>
  }

  export type UserUpdateWithoutUserFriendsInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    name?: StringFieldUpdateOperationsInput | string
    hash?: StringFieldUpdateOperationsInput | string
    wins?: IntFieldUpdateOperationsInput | number
    losses?: IntFieldUpdateOperationsInput | number
    ladder_level?: IntFieldUpdateOperationsInput | number
    oauthId?: StringFieldUpdateOperationsInput | string
    connected?: BoolFieldUpdateOperationsInput | boolean
    friendUsers?: UserFriendUpdateManyWithoutFriendNestedInput
    userBlocks?: UserBlockUpdateManyWithoutUserNestedInput
    blockedUsers?: UserBlockUpdateManyWithoutBlockedUserNestedInput
    history?: MatchHistoryUpdateManyWithoutUserNestedInput
    chats?: UserChatUpdateManyWithoutUserNestedInput
    messages?: MessageUpdateManyWithoutSenderNestedInput
  }

  export type UserUncheckedUpdateWithoutUserFriendsInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    name?: StringFieldUpdateOperationsInput | string
    hash?: StringFieldUpdateOperationsInput | string
    wins?: IntFieldUpdateOperationsInput | number
    losses?: IntFieldUpdateOperationsInput | number
    ladder_level?: IntFieldUpdateOperationsInput | number
    oauthId?: StringFieldUpdateOperationsInput | string
    connected?: BoolFieldUpdateOperationsInput | boolean
    friendUsers?: UserFriendUncheckedUpdateManyWithoutFriendNestedInput
    userBlocks?: UserBlockUncheckedUpdateManyWithoutUserNestedInput
    blockedUsers?: UserBlockUncheckedUpdateManyWithoutBlockedUserNestedInput
    history?: MatchHistoryUncheckedUpdateManyWithoutUserNestedInput
    chats?: UserChatUncheckedUpdateManyWithoutUserNestedInput
    messages?: MessageUncheckedUpdateManyWithoutSenderNestedInput
  }

  export type UserUpsertWithoutFriendUsersInput = {
    update: XOR<UserUpdateWithoutFriendUsersInput, UserUncheckedUpdateWithoutFriendUsersInput>
    create: XOR<UserCreateWithoutFriendUsersInput, UserUncheckedCreateWithoutFriendUsersInput>
  }

  export type UserUpdateWithoutFriendUsersInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    name?: StringFieldUpdateOperationsInput | string
    hash?: StringFieldUpdateOperationsInput | string
    wins?: IntFieldUpdateOperationsInput | number
    losses?: IntFieldUpdateOperationsInput | number
    ladder_level?: IntFieldUpdateOperationsInput | number
    oauthId?: StringFieldUpdateOperationsInput | string
    connected?: BoolFieldUpdateOperationsInput | boolean
    userFriends?: UserFriendUpdateManyWithoutUserNestedInput
    userBlocks?: UserBlockUpdateManyWithoutUserNestedInput
    blockedUsers?: UserBlockUpdateManyWithoutBlockedUserNestedInput
    history?: MatchHistoryUpdateManyWithoutUserNestedInput
    chats?: UserChatUpdateManyWithoutUserNestedInput
    messages?: MessageUpdateManyWithoutSenderNestedInput
  }

  export type UserUncheckedUpdateWithoutFriendUsersInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    name?: StringFieldUpdateOperationsInput | string
    hash?: StringFieldUpdateOperationsInput | string
    wins?: IntFieldUpdateOperationsInput | number
    losses?: IntFieldUpdateOperationsInput | number
    ladder_level?: IntFieldUpdateOperationsInput | number
    oauthId?: StringFieldUpdateOperationsInput | string
    connected?: BoolFieldUpdateOperationsInput | boolean
    userFriends?: UserFriendUncheckedUpdateManyWithoutUserNestedInput
    userBlocks?: UserBlockUncheckedUpdateManyWithoutUserNestedInput
    blockedUsers?: UserBlockUncheckedUpdateManyWithoutBlockedUserNestedInput
    history?: MatchHistoryUncheckedUpdateManyWithoutUserNestedInput
    chats?: UserChatUncheckedUpdateManyWithoutUserNestedInput
    messages?: MessageUncheckedUpdateManyWithoutSenderNestedInput
  }

  export type UserCreateWithoutHistoryInput = {
    createdAt?: Date | string
    updatedAt?: Date | string
    name: string
    hash: string
    wins?: number
    losses?: number
    ladder_level?: number
    oauthId: string
    connected?: boolean
    userFriends?: UserFriendCreateNestedManyWithoutUserInput
    friendUsers?: UserFriendCreateNestedManyWithoutFriendInput
    userBlocks?: UserBlockCreateNestedManyWithoutUserInput
    blockedUsers?: UserBlockCreateNestedManyWithoutBlockedUserInput
    chats?: UserChatCreateNestedManyWithoutUserInput
    messages?: MessageCreateNestedManyWithoutSenderInput
  }

  export type UserUncheckedCreateWithoutHistoryInput = {
    id?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    name: string
    hash: string
    wins?: number
    losses?: number
    ladder_level?: number
    oauthId: string
    connected?: boolean
    userFriends?: UserFriendUncheckedCreateNestedManyWithoutUserInput
    friendUsers?: UserFriendUncheckedCreateNestedManyWithoutFriendInput
    userBlocks?: UserBlockUncheckedCreateNestedManyWithoutUserInput
    blockedUsers?: UserBlockUncheckedCreateNestedManyWithoutBlockedUserInput
    chats?: UserChatUncheckedCreateNestedManyWithoutUserInput
    messages?: MessageUncheckedCreateNestedManyWithoutSenderInput
  }

  export type UserCreateOrConnectWithoutHistoryInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutHistoryInput, UserUncheckedCreateWithoutHistoryInput>
  }

  export type UserUpsertWithoutHistoryInput = {
    update: XOR<UserUpdateWithoutHistoryInput, UserUncheckedUpdateWithoutHistoryInput>
    create: XOR<UserCreateWithoutHistoryInput, UserUncheckedCreateWithoutHistoryInput>
  }

  export type UserUpdateWithoutHistoryInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    name?: StringFieldUpdateOperationsInput | string
    hash?: StringFieldUpdateOperationsInput | string
    wins?: IntFieldUpdateOperationsInput | number
    losses?: IntFieldUpdateOperationsInput | number
    ladder_level?: IntFieldUpdateOperationsInput | number
    oauthId?: StringFieldUpdateOperationsInput | string
    connected?: BoolFieldUpdateOperationsInput | boolean
    userFriends?: UserFriendUpdateManyWithoutUserNestedInput
    friendUsers?: UserFriendUpdateManyWithoutFriendNestedInput
    userBlocks?: UserBlockUpdateManyWithoutUserNestedInput
    blockedUsers?: UserBlockUpdateManyWithoutBlockedUserNestedInput
    chats?: UserChatUpdateManyWithoutUserNestedInput
    messages?: MessageUpdateManyWithoutSenderNestedInput
  }

  export type UserUncheckedUpdateWithoutHistoryInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    name?: StringFieldUpdateOperationsInput | string
    hash?: StringFieldUpdateOperationsInput | string
    wins?: IntFieldUpdateOperationsInput | number
    losses?: IntFieldUpdateOperationsInput | number
    ladder_level?: IntFieldUpdateOperationsInput | number
    oauthId?: StringFieldUpdateOperationsInput | string
    connected?: BoolFieldUpdateOperationsInput | boolean
    userFriends?: UserFriendUncheckedUpdateManyWithoutUserNestedInput
    friendUsers?: UserFriendUncheckedUpdateManyWithoutFriendNestedInput
    userBlocks?: UserBlockUncheckedUpdateManyWithoutUserNestedInput
    blockedUsers?: UserBlockUncheckedUpdateManyWithoutBlockedUserNestedInput
    chats?: UserChatUncheckedUpdateManyWithoutUserNestedInput
    messages?: MessageUncheckedUpdateManyWithoutSenderNestedInput
  }

  export type MessageCreateWithoutChatInput = {
    createdAt?: Date | string
    content: string
    sender: UserCreateNestedOneWithoutMessagesInput
  }

  export type MessageUncheckedCreateWithoutChatInput = {
    id?: number
    createdAt?: Date | string
    content: string
    userId: number
  }

  export type MessageCreateOrConnectWithoutChatInput = {
    where: MessageWhereUniqueInput
    create: XOR<MessageCreateWithoutChatInput, MessageUncheckedCreateWithoutChatInput>
  }

  export type MessageCreateManyChatInputEnvelope = {
    data: Enumerable<MessageCreateManyChatInput>
    skipDuplicates?: boolean
  }

  export type UserChatCreateWithoutChatInput = {
    isOwner: boolean
    isBlocked: boolean
    permissions: string
    user: UserCreateNestedOneWithoutChatsInput
  }

  export type UserChatUncheckedCreateWithoutChatInput = {
    userId: number
    isOwner: boolean
    isBlocked: boolean
    permissions: string
  }

  export type UserChatCreateOrConnectWithoutChatInput = {
    where: UserChatWhereUniqueInput
    create: XOR<UserChatCreateWithoutChatInput, UserChatUncheckedCreateWithoutChatInput>
  }

  export type UserChatCreateManyChatInputEnvelope = {
    data: Enumerable<UserChatCreateManyChatInput>
    skipDuplicates?: boolean
  }

  export type MessageUpsertWithWhereUniqueWithoutChatInput = {
    where: MessageWhereUniqueInput
    update: XOR<MessageUpdateWithoutChatInput, MessageUncheckedUpdateWithoutChatInput>
    create: XOR<MessageCreateWithoutChatInput, MessageUncheckedCreateWithoutChatInput>
  }

  export type MessageUpdateWithWhereUniqueWithoutChatInput = {
    where: MessageWhereUniqueInput
    data: XOR<MessageUpdateWithoutChatInput, MessageUncheckedUpdateWithoutChatInput>
  }

  export type MessageUpdateManyWithWhereWithoutChatInput = {
    where: MessageScalarWhereInput
    data: XOR<MessageUpdateManyMutationInput, MessageUncheckedUpdateManyWithoutMessagesInput>
  }

  export type UserChatUpsertWithWhereUniqueWithoutChatInput = {
    where: UserChatWhereUniqueInput
    update: XOR<UserChatUpdateWithoutChatInput, UserChatUncheckedUpdateWithoutChatInput>
    create: XOR<UserChatCreateWithoutChatInput, UserChatUncheckedCreateWithoutChatInput>
  }

  export type UserChatUpdateWithWhereUniqueWithoutChatInput = {
    where: UserChatWhereUniqueInput
    data: XOR<UserChatUpdateWithoutChatInput, UserChatUncheckedUpdateWithoutChatInput>
  }

  export type UserChatUpdateManyWithWhereWithoutChatInput = {
    where: UserChatScalarWhereInput
    data: XOR<UserChatUpdateManyMutationInput, UserChatUncheckedUpdateManyWithoutUsersInput>
  }

  export type UserCreateWithoutMessagesInput = {
    createdAt?: Date | string
    updatedAt?: Date | string
    name: string
    hash: string
    wins?: number
    losses?: number
    ladder_level?: number
    oauthId: string
    connected?: boolean
    userFriends?: UserFriendCreateNestedManyWithoutUserInput
    friendUsers?: UserFriendCreateNestedManyWithoutFriendInput
    userBlocks?: UserBlockCreateNestedManyWithoutUserInput
    blockedUsers?: UserBlockCreateNestedManyWithoutBlockedUserInput
    history?: MatchHistoryCreateNestedManyWithoutUserInput
    chats?: UserChatCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutMessagesInput = {
    id?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    name: string
    hash: string
    wins?: number
    losses?: number
    ladder_level?: number
    oauthId: string
    connected?: boolean
    userFriends?: UserFriendUncheckedCreateNestedManyWithoutUserInput
    friendUsers?: UserFriendUncheckedCreateNestedManyWithoutFriendInput
    userBlocks?: UserBlockUncheckedCreateNestedManyWithoutUserInput
    blockedUsers?: UserBlockUncheckedCreateNestedManyWithoutBlockedUserInput
    history?: MatchHistoryUncheckedCreateNestedManyWithoutUserInput
    chats?: UserChatUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutMessagesInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutMessagesInput, UserUncheckedCreateWithoutMessagesInput>
  }

  export type ChatCreateWithoutMessagesInput = {
    createdAt?: Date | string
    updatedAt?: Date | string
    name: string
    type?: ChatType
    password?: string | null
    users?: UserChatCreateNestedManyWithoutChatInput
  }

  export type ChatUncheckedCreateWithoutMessagesInput = {
    id?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    name: string
    type?: ChatType
    password?: string | null
    users?: UserChatUncheckedCreateNestedManyWithoutChatInput
  }

  export type ChatCreateOrConnectWithoutMessagesInput = {
    where: ChatWhereUniqueInput
    create: XOR<ChatCreateWithoutMessagesInput, ChatUncheckedCreateWithoutMessagesInput>
  }

  export type UserUpsertWithoutMessagesInput = {
    update: XOR<UserUpdateWithoutMessagesInput, UserUncheckedUpdateWithoutMessagesInput>
    create: XOR<UserCreateWithoutMessagesInput, UserUncheckedCreateWithoutMessagesInput>
  }

  export type UserUpdateWithoutMessagesInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    name?: StringFieldUpdateOperationsInput | string
    hash?: StringFieldUpdateOperationsInput | string
    wins?: IntFieldUpdateOperationsInput | number
    losses?: IntFieldUpdateOperationsInput | number
    ladder_level?: IntFieldUpdateOperationsInput | number
    oauthId?: StringFieldUpdateOperationsInput | string
    connected?: BoolFieldUpdateOperationsInput | boolean
    userFriends?: UserFriendUpdateManyWithoutUserNestedInput
    friendUsers?: UserFriendUpdateManyWithoutFriendNestedInput
    userBlocks?: UserBlockUpdateManyWithoutUserNestedInput
    blockedUsers?: UserBlockUpdateManyWithoutBlockedUserNestedInput
    history?: MatchHistoryUpdateManyWithoutUserNestedInput
    chats?: UserChatUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutMessagesInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    name?: StringFieldUpdateOperationsInput | string
    hash?: StringFieldUpdateOperationsInput | string
    wins?: IntFieldUpdateOperationsInput | number
    losses?: IntFieldUpdateOperationsInput | number
    ladder_level?: IntFieldUpdateOperationsInput | number
    oauthId?: StringFieldUpdateOperationsInput | string
    connected?: BoolFieldUpdateOperationsInput | boolean
    userFriends?: UserFriendUncheckedUpdateManyWithoutUserNestedInput
    friendUsers?: UserFriendUncheckedUpdateManyWithoutFriendNestedInput
    userBlocks?: UserBlockUncheckedUpdateManyWithoutUserNestedInput
    blockedUsers?: UserBlockUncheckedUpdateManyWithoutBlockedUserNestedInput
    history?: MatchHistoryUncheckedUpdateManyWithoutUserNestedInput
    chats?: UserChatUncheckedUpdateManyWithoutUserNestedInput
  }

  export type ChatUpsertWithoutMessagesInput = {
    update: XOR<ChatUpdateWithoutMessagesInput, ChatUncheckedUpdateWithoutMessagesInput>
    create: XOR<ChatCreateWithoutMessagesInput, ChatUncheckedCreateWithoutMessagesInput>
  }

  export type ChatUpdateWithoutMessagesInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    name?: StringFieldUpdateOperationsInput | string
    type?: EnumChatTypeFieldUpdateOperationsInput | ChatType
    password?: NullableStringFieldUpdateOperationsInput | string | null
    users?: UserChatUpdateManyWithoutChatNestedInput
  }

  export type ChatUncheckedUpdateWithoutMessagesInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    name?: StringFieldUpdateOperationsInput | string
    type?: EnumChatTypeFieldUpdateOperationsInput | ChatType
    password?: NullableStringFieldUpdateOperationsInput | string | null
    users?: UserChatUncheckedUpdateManyWithoutChatNestedInput
  }

  export type UserCreateWithoutChatsInput = {
    createdAt?: Date | string
    updatedAt?: Date | string
    name: string
    hash: string
    wins?: number
    losses?: number
    ladder_level?: number
    oauthId: string
    connected?: boolean
    userFriends?: UserFriendCreateNestedManyWithoutUserInput
    friendUsers?: UserFriendCreateNestedManyWithoutFriendInput
    userBlocks?: UserBlockCreateNestedManyWithoutUserInput
    blockedUsers?: UserBlockCreateNestedManyWithoutBlockedUserInput
    history?: MatchHistoryCreateNestedManyWithoutUserInput
    messages?: MessageCreateNestedManyWithoutSenderInput
  }

  export type UserUncheckedCreateWithoutChatsInput = {
    id?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    name: string
    hash: string
    wins?: number
    losses?: number
    ladder_level?: number
    oauthId: string
    connected?: boolean
    userFriends?: UserFriendUncheckedCreateNestedManyWithoutUserInput
    friendUsers?: UserFriendUncheckedCreateNestedManyWithoutFriendInput
    userBlocks?: UserBlockUncheckedCreateNestedManyWithoutUserInput
    blockedUsers?: UserBlockUncheckedCreateNestedManyWithoutBlockedUserInput
    history?: MatchHistoryUncheckedCreateNestedManyWithoutUserInput
    messages?: MessageUncheckedCreateNestedManyWithoutSenderInput
  }

  export type UserCreateOrConnectWithoutChatsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutChatsInput, UserUncheckedCreateWithoutChatsInput>
  }

  export type ChatCreateWithoutUsersInput = {
    createdAt?: Date | string
    updatedAt?: Date | string
    name: string
    type?: ChatType
    password?: string | null
    messages?: MessageCreateNestedManyWithoutChatInput
  }

  export type ChatUncheckedCreateWithoutUsersInput = {
    id?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    name: string
    type?: ChatType
    password?: string | null
    messages?: MessageUncheckedCreateNestedManyWithoutChatInput
  }

  export type ChatCreateOrConnectWithoutUsersInput = {
    where: ChatWhereUniqueInput
    create: XOR<ChatCreateWithoutUsersInput, ChatUncheckedCreateWithoutUsersInput>
  }

  export type UserUpsertWithoutChatsInput = {
    update: XOR<UserUpdateWithoutChatsInput, UserUncheckedUpdateWithoutChatsInput>
    create: XOR<UserCreateWithoutChatsInput, UserUncheckedCreateWithoutChatsInput>
  }

  export type UserUpdateWithoutChatsInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    name?: StringFieldUpdateOperationsInput | string
    hash?: StringFieldUpdateOperationsInput | string
    wins?: IntFieldUpdateOperationsInput | number
    losses?: IntFieldUpdateOperationsInput | number
    ladder_level?: IntFieldUpdateOperationsInput | number
    oauthId?: StringFieldUpdateOperationsInput | string
    connected?: BoolFieldUpdateOperationsInput | boolean
    userFriends?: UserFriendUpdateManyWithoutUserNestedInput
    friendUsers?: UserFriendUpdateManyWithoutFriendNestedInput
    userBlocks?: UserBlockUpdateManyWithoutUserNestedInput
    blockedUsers?: UserBlockUpdateManyWithoutBlockedUserNestedInput
    history?: MatchHistoryUpdateManyWithoutUserNestedInput
    messages?: MessageUpdateManyWithoutSenderNestedInput
  }

  export type UserUncheckedUpdateWithoutChatsInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    name?: StringFieldUpdateOperationsInput | string
    hash?: StringFieldUpdateOperationsInput | string
    wins?: IntFieldUpdateOperationsInput | number
    losses?: IntFieldUpdateOperationsInput | number
    ladder_level?: IntFieldUpdateOperationsInput | number
    oauthId?: StringFieldUpdateOperationsInput | string
    connected?: BoolFieldUpdateOperationsInput | boolean
    userFriends?: UserFriendUncheckedUpdateManyWithoutUserNestedInput
    friendUsers?: UserFriendUncheckedUpdateManyWithoutFriendNestedInput
    userBlocks?: UserBlockUncheckedUpdateManyWithoutUserNestedInput
    blockedUsers?: UserBlockUncheckedUpdateManyWithoutBlockedUserNestedInput
    history?: MatchHistoryUncheckedUpdateManyWithoutUserNestedInput
    messages?: MessageUncheckedUpdateManyWithoutSenderNestedInput
  }

  export type ChatUpsertWithoutUsersInput = {
    update: XOR<ChatUpdateWithoutUsersInput, ChatUncheckedUpdateWithoutUsersInput>
    create: XOR<ChatCreateWithoutUsersInput, ChatUncheckedCreateWithoutUsersInput>
  }

  export type ChatUpdateWithoutUsersInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    name?: StringFieldUpdateOperationsInput | string
    type?: EnumChatTypeFieldUpdateOperationsInput | ChatType
    password?: NullableStringFieldUpdateOperationsInput | string | null
    messages?: MessageUpdateManyWithoutChatNestedInput
  }

  export type ChatUncheckedUpdateWithoutUsersInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    name?: StringFieldUpdateOperationsInput | string
    type?: EnumChatTypeFieldUpdateOperationsInput | ChatType
    password?: NullableStringFieldUpdateOperationsInput | string | null
    messages?: MessageUncheckedUpdateManyWithoutChatNestedInput
  }

  export type UserFriendCreateManyUserInput = {
    id?: number
    friendId: number
    createdAt?: Date | string
  }

  export type UserFriendCreateManyFriendInput = {
    id?: number
    userId: number
    createdAt?: Date | string
  }

  export type UserBlockCreateManyUserInput = {
    id?: number
    blockedId: number
    createdAt?: Date | string
  }

  export type UserBlockCreateManyBlockedUserInput = {
    id?: number
    userId: number
    createdAt?: Date | string
  }

  export type MatchHistoryCreateManyUserInput = {
    id?: number
    userName: string
    opponentName: string
    createdAt?: Date | string
    ladder: number
    won?: boolean
  }

  export type UserChatCreateManyUserInput = {
    chatId: number
    isOwner: boolean
    isBlocked: boolean
    permissions: string
  }

  export type MessageCreateManySenderInput = {
    id?: number
    createdAt?: Date | string
    content: string
    chatId: number
  }

  export type UserFriendUpdateWithoutUserInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    friend?: UserUpdateOneRequiredWithoutFriendUsersNestedInput
  }

  export type UserFriendUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    friendId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserFriendUncheckedUpdateManyWithoutUserFriendsInput = {
    id?: IntFieldUpdateOperationsInput | number
    friendId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserFriendUpdateWithoutFriendInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutUserFriendsNestedInput
  }

  export type UserFriendUncheckedUpdateWithoutFriendInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserFriendUncheckedUpdateManyWithoutFriendUsersInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserBlockUpdateWithoutUserInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    blockedUser?: UserUpdateOneRequiredWithoutBlockedUsersNestedInput
  }

  export type UserBlockUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    blockedId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserBlockUncheckedUpdateManyWithoutUserBlocksInput = {
    id?: IntFieldUpdateOperationsInput | number
    blockedId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserBlockUpdateWithoutBlockedUserInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutUserBlocksNestedInput
  }

  export type UserBlockUncheckedUpdateWithoutBlockedUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserBlockUncheckedUpdateManyWithoutBlockedUsersInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MatchHistoryUpdateWithoutUserInput = {
    userName?: StringFieldUpdateOperationsInput | string
    opponentName?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    ladder?: IntFieldUpdateOperationsInput | number
    won?: BoolFieldUpdateOperationsInput | boolean
  }

  export type MatchHistoryUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    userName?: StringFieldUpdateOperationsInput | string
    opponentName?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    ladder?: IntFieldUpdateOperationsInput | number
    won?: BoolFieldUpdateOperationsInput | boolean
  }

  export type MatchHistoryUncheckedUpdateManyWithoutHistoryInput = {
    id?: IntFieldUpdateOperationsInput | number
    userName?: StringFieldUpdateOperationsInput | string
    opponentName?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    ladder?: IntFieldUpdateOperationsInput | number
    won?: BoolFieldUpdateOperationsInput | boolean
  }

  export type UserChatUpdateWithoutUserInput = {
    isOwner?: BoolFieldUpdateOperationsInput | boolean
    isBlocked?: BoolFieldUpdateOperationsInput | boolean
    permissions?: StringFieldUpdateOperationsInput | string
    chat?: ChatUpdateOneRequiredWithoutUsersNestedInput
  }

  export type UserChatUncheckedUpdateWithoutUserInput = {
    chatId?: IntFieldUpdateOperationsInput | number
    isOwner?: BoolFieldUpdateOperationsInput | boolean
    isBlocked?: BoolFieldUpdateOperationsInput | boolean
    permissions?: StringFieldUpdateOperationsInput | string
  }

  export type UserChatUncheckedUpdateManyWithoutChatsInput = {
    chatId?: IntFieldUpdateOperationsInput | number
    isOwner?: BoolFieldUpdateOperationsInput | boolean
    isBlocked?: BoolFieldUpdateOperationsInput | boolean
    permissions?: StringFieldUpdateOperationsInput | string
  }

  export type MessageUpdateWithoutSenderInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    content?: StringFieldUpdateOperationsInput | string
    chat?: ChatUpdateOneRequiredWithoutMessagesNestedInput
  }

  export type MessageUncheckedUpdateWithoutSenderInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    content?: StringFieldUpdateOperationsInput | string
    chatId?: IntFieldUpdateOperationsInput | number
  }

  export type MessageUncheckedUpdateManyWithoutMessagesInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    content?: StringFieldUpdateOperationsInput | string
    chatId?: IntFieldUpdateOperationsInput | number
  }

  export type MessageCreateManyChatInput = {
    id?: number
    createdAt?: Date | string
    content: string
    userId: number
  }

  export type UserChatCreateManyChatInput = {
    userId: number
    isOwner: boolean
    isBlocked: boolean
    permissions: string
  }

  export type MessageUpdateWithoutChatInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    content?: StringFieldUpdateOperationsInput | string
    sender?: UserUpdateOneRequiredWithoutMessagesNestedInput
  }

  export type MessageUncheckedUpdateWithoutChatInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    content?: StringFieldUpdateOperationsInput | string
    userId?: IntFieldUpdateOperationsInput | number
  }

  export type UserChatUpdateWithoutChatInput = {
    isOwner?: BoolFieldUpdateOperationsInput | boolean
    isBlocked?: BoolFieldUpdateOperationsInput | boolean
    permissions?: StringFieldUpdateOperationsInput | string
    user?: UserUpdateOneRequiredWithoutChatsNestedInput
  }

  export type UserChatUncheckedUpdateWithoutChatInput = {
    userId?: IntFieldUpdateOperationsInput | number
    isOwner?: BoolFieldUpdateOperationsInput | boolean
    isBlocked?: BoolFieldUpdateOperationsInput | boolean
    permissions?: StringFieldUpdateOperationsInput | string
  }

  export type UserChatUncheckedUpdateManyWithoutUsersInput = {
    userId?: IntFieldUpdateOperationsInput | number
    isOwner?: BoolFieldUpdateOperationsInput | boolean
    isBlocked?: BoolFieldUpdateOperationsInput | boolean
    permissions?: StringFieldUpdateOperationsInput | string
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}