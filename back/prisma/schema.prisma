generator client {
	provider = "prisma-client-js"
}

datasource db {
	provider = "postgresql"
	url		 = env("DATABASE_URL")
}

model User {
	id						Int @id @default(autoincrement())
	createdAt				DateTime @default(now())
	updatedAt				DateTime @updatedAt
	name					String @unique
	hash					String
	wins					Int @default(0)
	losses					Int @default(0)
	ladder_level			Int @default(1)
	oauthId					String
	connected				Boolean @default(false)
	isPlaying				Boolean @default(false)
	tfa						Boolean @default(false)
	tfa_key					String
	ladders					Int[]
	wons					Boolean[]
	gameDates				String[]
	exp						Int @default(0)
	playing					Boolean @default(false)
	userFriends				UserFriend[] @relation("UserFriendUser")
	friendUsers				UserFriend[] @relation("UserFriendFriend")
	userBlocks				UserBlock[] @relation("UserBlockUser")
	blockedUsers			UserBlock[] @relation("UserBlockBlocked")
	pongInvitationsSent		PongInvitation[] @relation("PongInvitationsSent")
	pongInvitationsReceived	PongInvitation[] @relation("PongInvitationsReceived")
	channels				Channel[] @relation("UserChannels")
	owner					Channel[] @relation("owner")
	messages				Message[] @relation("UserMessage")
	sentDMs					DirectMessage[] @relation("UserDMs")
	receivedDMs				DirectMessage[] @relation("UserDMsReceived")

	@@map("users")
}

model PongInvitation {
	id			Int @id @default(autoincrement())
	createdAt	DateTime @default(now())
	userId		Int
	invitedId	Int
	accepted	Boolean @default(false)
	refused		Boolean @default(false)
	user		User @relation("PongInvitationsSent", fields: [userId], references: [id], onDelete: Cascade)
	invited		User @relation("PongInvitationsReceived", fields: [invitedId], references: [id], onDelete: Cascade)

	@@map("pong_invitations")
}

model UserFriend {
	id			Int @id @default(autoincrement())
	createdAt	DateTime @default(now())
	userId		Int
	friendId	Int
	user		User @relation("UserFriendUser", fields: [userId], references: [id], onDelete: Cascade)
	friend		User @relation("UserFriendFriend", fields: [friendId], references: [id], onDelete: Cascade)

	@@map("user_friends")
}

model UserBlock {
	id			Int @id @default(autoincrement())
	createdAt	DateTime @default(now())
	userId		Int
	blockedId	Int
	user		User @relation("UserBlockUser", fields: [userId], references: [id], onDelete: Cascade)
	blockedUser	User @relation("UserBlockBlocked", fields: [blockedId], references: [id], onDelete: Cascade)

	@@map("user_blocks")
	@@unique([userId, blockedId])
}

model DirectMessage {
	id			Int @id @default(autoincrement())
	createdAt	DateTime @default(now())
	content		String
	senderId	Int
	receiverId	Int
	sender		User @relation("UserDMs", fields: [senderId], references: [id], onDelete: Cascade)
	receiver	User @relation("UserDMsReceived", fields: [receiverId], references: [id], onDelete: Cascade)

	@@map("direct_messages")
}

model Message {
	id			Int @id @default(autoincrement())
	createdAt	DateTime @default(now())
	content		String
	sender		User @relation("UserMessage", fields: [userId], references: [id])
	userId		Int
	chat		Chat @relation(fields: [chatId], references: [id])
	chatId		Int

	@@map("messages")
}

model Channel {
  id			Int @id @default(autoincrement())
  createdAt 	DateTime @default(now())
  updatedAt		DateTime @updatedAt
  name			String @unique
  password		String?
  ispassword	Boolean @default(false)
  private		Boolean @default(false)
  users			User[] @relation("UserChannels")
  type			ChatType @default(PUBLIC)
  owner			User[] @relation("owner")

  @@map("channels")
}

model Chat {
	id			Int @id @default(autoincrement())
	createdAt	DateTime @default(now())
	updatedAt	DateTime @updatedAt
	name		String @unique
	messages	Message[]
	type		ChatType @default(PUBLIC)
	password	String?

	@@map("chats")
}

enum ChatType {
	PUBLIC
	PRIVATE
	PASSWORD
}
