generator client {
	provider = "prisma-client-js"
}

datasource db {
	provider = "postgresql"
	url		 = env("DATABASE_URL")
}

model User {
	id				Int @id @default(autoincrement())
	createdAt		DateTime @default(now())
	updatedAt		DateTime @updatedAt
	name			String @unique
	hash			String
	userFriends		UserFriend[] @relation("UserFriendUser")	// user actuel a init la demande d'ami
	friendUsers		UserFriend[] @relation("UserFriendFriend")	// user actuel est le destinataire de la demande
	userBlocks		UserBlock[] @relation("UserBlockUser")		// liste des users que l'user actuel a bloqué
	blockedUsers	UserBlock[] @relation("UserBlockBlocked")	// liste des users qui ont bloqué l'user actuel
	channels        Channel[]   @relation("UserChannels")
	ownedChannels           Channel[] @relation("owner")
	wins			Int @default(0)
	losses			Int @default(0)
	ladder_level	Int @default(1)
	history			MatchHistory[]
	oauthId			String
	connected		Boolean @default(false)
	isPlaying		Boolean @default(false)
	messages		ChanMessage[] @relation("UserMessage")
	sentDMs			DirectMessage[] @relation("UserDMs")
	receivedDMs		DirectMessage[] @relation("UserDMsReceived")
	tfa				Boolean @default(false)
	tfa_key			String

	@@map("users")
}

model DirectMessage {
	id			Int @id @default(autoincrement())
	createdAt	DateTime @default(now())
	content		String
	senderId	Int
	receiverId	Int
	sender User @relation("UserDMs", fields: [senderId], references: [id], onDelete: Cascade)
	receiver User @relation("UserDMsReceived", fields: [receiverId], references: [id], onDelete: Cascade)

	@@map("direct_messages")
}

model UserBlock {
	id			Int @id @default(autoincrement())
	blockerId	Int
	blockedId	Int
	createdAt	DateTime @default(now())
	user		User @relation("UserBlockUser", fields: [blockerId], references: [id], onDelete: Cascade)
	blockedUser	User @relation("UserBlockBlocked", fields: [blockedId], references: [id], onDelete: Cascade)

	@@map("user_blocks")
	@@unique([blockerId, blockedId])
}

model Channel {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  name      String   @unique
  password  String?

  ispassword Boolean @default(false)
  private Boolean @default(false)
  

  users     User[]   @relation("UserChannels")
  type      ChatType @default(PUBLIC)

  message ChanMessage[]
  ownerId Int
  owner User @relation("owner", fields: [ownerId], references:[id])

  @@map("channels")
}

model ChanMessage {
	id			Int @id @default(autoincrement())
	createdAt	DateTime @default(now())

	content		String

	sender		User @relation("UserMessage", fields: [senderId], references: [id])
	senderId		Int
	
	channel		Channel @relation(fields: [channelId], references: [id])
	channelId		Int

	@@map("Chanmessages")
}



model UserFriend {
	id			Int @id @default(autoincrement())
	userId		Int
	friendId	Int
	createdAt	DateTime @default(now())
	user		User @relation("UserFriendUser", fields: [userId], references: [id])
	friend		User @relation("UserFriendFriend", fields: [friendId], references: [id])

	@@map("user_friends")
}

model MatchHistory {
	id				Int @id @default(autoincrement())
	user			User @relation(fields: [userId], references: [id])
	userId			Int
	userName		String
	opponentName	String
	createdAt		DateTime @default(now())
	ladder			Int
	won				Boolean @default(false)

	@@map("matchhistory")
}


enum ChatType {
	PUBLIC
	PRIVATE
	PASSWORD
}
