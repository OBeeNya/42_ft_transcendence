generator client {
	provider = "prisma-client-js"
}

datasource db {
	provider = "postgresql"
	url		 = env("DATABASE_URL")
}

model User {
	id				Int @id @default(autoincrement())
	createdAt		DateTime @default(now())
	updatedAt		DateTime @updatedAt
	name			String @unique
	hash			String
	wins			Int @default(0)
	losses			Int @default(0)
	ladder_level	Int @default(1)
	history			MatchHistory[]
	oauthId			String
	connected		Boolean @default(false)
	isPlaying		Boolean @default(false)
	chats			UserChat[]
	messages		Message[] @relation("UserMessage")
	sentDMs			DirectMessage[] @relation("UserDMs")
	receivedDMs		DirectMessage[] @relation("UserDMsReceived")
	tfa				Boolean @default(false)
	tfa_key			String

	blocked   User[] @relation("blocked") // Chaque User a une liste des users qu'il a bloqué
	blockedOf User[] @relation("blocked") // Et une liste des users qui l'ont bloqué
	// friends   User[] @relation("friends")
	// friendsOf User[] @relation("friends")
	// pendings   User[] @relation("pending")
	// pendingsOf User[] @relation("pending")

	@@map("users")
}

model MatchHistory {
	id				Int @id @default(autoincrement())
	user			User @relation(fields: [userId], references: [id])
	userId			Int
	userName		String
	opponentName	String
	createdAt		DateTime @default(now())
	ladder			Int
	won				Boolean @default(false)

	@@map("matchhistory")
}

model Chat {
	id			Int @id @default(autoincrement())
	createdAt	DateTime @default(now())
	updatedAt	DateTime @updatedAt
	name		String @unique
	messages	Message[]
	type		ChatType @default(PUBLIC)
	users		UserChat[]
	password	String?

	@@map("chats")
}

enum ChatType {
	PUBLIC
	PRIVATE
	PASSWORD
}

model Message {
	id			Int @id @default(autoincrement())
	createdAt	DateTime @default(now())
	content		String
	sender		User @relation("UserMessage", fields: [userId], references: [id])
	userId		Int
	chat		Chat @relation(fields: [chatId], references: [id])
	chatId		Int

	@@map("messages")
}

model UserChat {
	userId		Int
	chatId		Int
	user		User @relation(fields: [userId], references: [id])
	chat		Chat @relation(fields: [chatId], references: [id])
	isOwner		Boolean
	isBlocked	Boolean
	permissions	String

	@@id([userId, chatId])
	@@map("user_chats")
}

model DirectMessage {
	id			Int @id @default(autoincrement())
	createdAt	DateTime @default(now())
	content		String
	senderId	Int
	receiverId	Int
	sender		User @relation("UserDMs", fields: [senderId], references: [id])
	receiver	User @relation("UserDMsReceived", fields: [receiverId], references: [id])

	@@map("direct_messages")
}
