{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ParseArrayPipe = void 0;\nconst tslib_1 = require(\"tslib\");\nconst injectable_decorator_1 = require(\"../decorators/core/injectable.decorator\");\nconst optional_decorator_1 = require(\"../decorators/core/optional.decorator\");\nconst http_status_enum_1 = require(\"../enums/http-status.enum\");\nconst http_error_by_code_util_1 = require(\"../utils/http-error-by-code.util\");\nconst shared_utils_1 = require(\"../utils/shared.utils\");\nconst validation_pipe_1 = require(\"./validation.pipe\");\nconst VALIDATION_ERROR_MESSAGE = 'Validation failed (parsable array expected)';\nconst DEFAULT_ARRAY_SEPARATOR = ',';\n/**\n * Defines the built-in ParseArray Pipe\n *\n * @see [Built-in Pipes](https://docs.nestjs.com/pipes#built-in-pipes)\n *\n * @publicApi\n */\nlet ParseArrayPipe = class ParseArrayPipe {\n  constructor() {\n    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    this.options = options;\n    this.validationPipe = new validation_pipe_1.ValidationPipe(Object.assign({\n      transform: true,\n      validateCustomDecorators: true\n    }, options));\n    const {\n      exceptionFactory,\n      errorHttpStatusCode = http_status_enum_1.HttpStatus.BAD_REQUEST\n    } = options;\n    this.exceptionFactory = exceptionFactory || (error => new http_error_by_code_util_1.HttpErrorByCode[errorHttpStatusCode](error));\n  }\n  /**\n   * Method that accesses and performs optional transformation on argument for\n   * in-flight requests.\n   *\n   * @param value currently processed route argument\n   * @param metadata contains metadata about the currently processed route argument\n   */\n  async transform(value, metadata) {\n    if (!value && !this.options.optional) {\n      throw this.exceptionFactory(VALIDATION_ERROR_MESSAGE);\n    } else if ((0, shared_utils_1.isNil)(value) && this.options.optional) {\n      return value;\n    }\n    if (!Array.isArray(value)) {\n      if (!(0, shared_utils_1.isString)(value)) {\n        throw this.exceptionFactory(VALIDATION_ERROR_MESSAGE);\n      } else {\n        try {\n          value = value.trim().split(this.options.separator || DEFAULT_ARRAY_SEPARATOR);\n        } catch (_a) {\n          throw this.exceptionFactory(VALIDATION_ERROR_MESSAGE);\n        }\n      }\n    }\n    if (this.options.items) {\n      const validationMetadata = {\n        metatype: this.options.items,\n        type: 'query'\n      };\n      const isExpectedTypePrimitive = this.isExpectedTypePrimitive();\n      const toClassInstance = (item, index) => {\n        if (this.options.items !== String) {\n          try {\n            item = JSON.parse(item);\n          } catch (_a) {}\n        }\n        if (isExpectedTypePrimitive) {\n          return this.validatePrimitive(item, index);\n        }\n        return this.validationPipe.transform(item, validationMetadata);\n      };\n      if (this.options.stopAtFirstError === false) {\n        // strict compare to \"false\" to make sure\n        // that this option is disabled by default\n        let errors = [];\n        const targetArray = value;\n        for (let i = 0; i < targetArray.length; i++) {\n          try {\n            targetArray[i] = await toClassInstance(targetArray[i]);\n          } catch (err) {\n            let message;\n            if (err.getResponse) {\n              const response = err.getResponse();\n              if (Array.isArray(response.message)) {\n                message = response.message.map(item => `[${i}] ${item}`);\n              } else {\n                message = `[${i}] ${response.message}`;\n              }\n            } else {\n              message = err;\n            }\n            errors = errors.concat(message);\n          }\n        }\n        if (errors.length > 0) {\n          throw this.exceptionFactory(errors);\n        }\n        return targetArray;\n      } else {\n        value = await Promise.all(value.map(toClassInstance));\n      }\n    }\n    return value;\n  }\n  isExpectedTypePrimitive() {\n    return [Boolean, Number, String].includes(this.options.items);\n  }\n  validatePrimitive(originalValue, index) {\n    if (this.options.items === Number) {\n      const value = originalValue !== null && originalValue !== '' ? +originalValue : NaN;\n      if (isNaN(value)) {\n        throw this.exceptionFactory(`${(0, shared_utils_1.isUndefined)(index) ? '' : `[${index}] `}item must be a number`);\n      }\n      return value;\n    } else if (this.options.items === String) {\n      if (!(0, shared_utils_1.isString)(originalValue)) {\n        return `${originalValue}`;\n      }\n    } else if (this.options.items === Boolean) {\n      if (typeof originalValue !== 'boolean') {\n        throw this.exceptionFactory(`${(0, shared_utils_1.isUndefined)(index) ? '' : `[${index}] `}item must be a boolean value`);\n      }\n    }\n    return originalValue;\n  }\n};\nParseArrayPipe = tslib_1.__decorate([(0, injectable_decorator_1.Injectable)(), tslib_1.__param(0, (0, optional_decorator_1.Optional)()), tslib_1.__metadata(\"design:paramtypes\", [Object])], ParseArrayPipe);\nexports.ParseArrayPipe = ParseArrayPipe;","map":{"version":3,"names":["Object","defineProperty","exports","value","ParseArrayPipe","tslib_1","require","injectable_decorator_1","optional_decorator_1","http_status_enum_1","http_error_by_code_util_1","shared_utils_1","validation_pipe_1","VALIDATION_ERROR_MESSAGE","DEFAULT_ARRAY_SEPARATOR","constructor","options","arguments","length","undefined","validationPipe","ValidationPipe","assign","transform","validateCustomDecorators","exceptionFactory","errorHttpStatusCode","HttpStatus","BAD_REQUEST","error","HttpErrorByCode","metadata","optional","isNil","Array","isArray","isString","trim","split","separator","_a","items","validationMetadata","metatype","type","isExpectedTypePrimitive","toClassInstance","item","index","String","JSON","parse","validatePrimitive","stopAtFirstError","errors","targetArray","i","err","message","getResponse","response","map","concat","Promise","all","Boolean","Number","includes","originalValue","NaN","isNaN","isUndefined","__decorate","Injectable","__param","Optional","__metadata"],"sources":["/home/benjamin/Documents/42/42_ft_transcendence/front/node_modules/@nestjs/common/pipes/parse-array.pipe.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ParseArrayPipe = void 0;\nconst tslib_1 = require(\"tslib\");\nconst injectable_decorator_1 = require(\"../decorators/core/injectable.decorator\");\nconst optional_decorator_1 = require(\"../decorators/core/optional.decorator\");\nconst http_status_enum_1 = require(\"../enums/http-status.enum\");\nconst http_error_by_code_util_1 = require(\"../utils/http-error-by-code.util\");\nconst shared_utils_1 = require(\"../utils/shared.utils\");\nconst validation_pipe_1 = require(\"./validation.pipe\");\nconst VALIDATION_ERROR_MESSAGE = 'Validation failed (parsable array expected)';\nconst DEFAULT_ARRAY_SEPARATOR = ',';\n/**\n * Defines the built-in ParseArray Pipe\n *\n * @see [Built-in Pipes](https://docs.nestjs.com/pipes#built-in-pipes)\n *\n * @publicApi\n */\nlet ParseArrayPipe = class ParseArrayPipe {\n    constructor(options = {}) {\n        this.options = options;\n        this.validationPipe = new validation_pipe_1.ValidationPipe(Object.assign({ transform: true, validateCustomDecorators: true }, options));\n        const { exceptionFactory, errorHttpStatusCode = http_status_enum_1.HttpStatus.BAD_REQUEST } = options;\n        this.exceptionFactory =\n            exceptionFactory ||\n                (error => new http_error_by_code_util_1.HttpErrorByCode[errorHttpStatusCode](error));\n    }\n    /**\n     * Method that accesses and performs optional transformation on argument for\n     * in-flight requests.\n     *\n     * @param value currently processed route argument\n     * @param metadata contains metadata about the currently processed route argument\n     */\n    async transform(value, metadata) {\n        if (!value && !this.options.optional) {\n            throw this.exceptionFactory(VALIDATION_ERROR_MESSAGE);\n        }\n        else if ((0, shared_utils_1.isNil)(value) && this.options.optional) {\n            return value;\n        }\n        if (!Array.isArray(value)) {\n            if (!(0, shared_utils_1.isString)(value)) {\n                throw this.exceptionFactory(VALIDATION_ERROR_MESSAGE);\n            }\n            else {\n                try {\n                    value = value\n                        .trim()\n                        .split(this.options.separator || DEFAULT_ARRAY_SEPARATOR);\n                }\n                catch (_a) {\n                    throw this.exceptionFactory(VALIDATION_ERROR_MESSAGE);\n                }\n            }\n        }\n        if (this.options.items) {\n            const validationMetadata = {\n                metatype: this.options.items,\n                type: 'query',\n            };\n            const isExpectedTypePrimitive = this.isExpectedTypePrimitive();\n            const toClassInstance = (item, index) => {\n                if (this.options.items !== String) {\n                    try {\n                        item = JSON.parse(item);\n                    }\n                    catch (_a) { }\n                }\n                if (isExpectedTypePrimitive) {\n                    return this.validatePrimitive(item, index);\n                }\n                return this.validationPipe.transform(item, validationMetadata);\n            };\n            if (this.options.stopAtFirstError === false) {\n                // strict compare to \"false\" to make sure\n                // that this option is disabled by default\n                let errors = [];\n                const targetArray = value;\n                for (let i = 0; i < targetArray.length; i++) {\n                    try {\n                        targetArray[i] = await toClassInstance(targetArray[i]);\n                    }\n                    catch (err) {\n                        let message;\n                        if (err.getResponse) {\n                            const response = err.getResponse();\n                            if (Array.isArray(response.message)) {\n                                message = response.message.map((item) => `[${i}] ${item}`);\n                            }\n                            else {\n                                message = `[${i}] ${response.message}`;\n                            }\n                        }\n                        else {\n                            message = err;\n                        }\n                        errors = errors.concat(message);\n                    }\n                }\n                if (errors.length > 0) {\n                    throw this.exceptionFactory(errors);\n                }\n                return targetArray;\n            }\n            else {\n                value = await Promise.all(value.map(toClassInstance));\n            }\n        }\n        return value;\n    }\n    isExpectedTypePrimitive() {\n        return [Boolean, Number, String].includes(this.options.items);\n    }\n    validatePrimitive(originalValue, index) {\n        if (this.options.items === Number) {\n            const value = originalValue !== null && originalValue !== '' ? +originalValue : NaN;\n            if (isNaN(value)) {\n                throw this.exceptionFactory(`${(0, shared_utils_1.isUndefined)(index) ? '' : `[${index}] `}item must be a number`);\n            }\n            return value;\n        }\n        else if (this.options.items === String) {\n            if (!(0, shared_utils_1.isString)(originalValue)) {\n                return `${originalValue}`;\n            }\n        }\n        else if (this.options.items === Boolean) {\n            if (typeof originalValue !== 'boolean') {\n                throw this.exceptionFactory(`${(0, shared_utils_1.isUndefined)(index) ? '' : `[${index}] `}item must be a boolean value`);\n            }\n        }\n        return originalValue;\n    }\n};\nParseArrayPipe = tslib_1.__decorate([\n    (0, injectable_decorator_1.Injectable)(),\n    tslib_1.__param(0, (0, optional_decorator_1.Optional)()),\n    tslib_1.__metadata(\"design:paramtypes\", [Object])\n], ParseArrayPipe);\nexports.ParseArrayPipe = ParseArrayPipe;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}