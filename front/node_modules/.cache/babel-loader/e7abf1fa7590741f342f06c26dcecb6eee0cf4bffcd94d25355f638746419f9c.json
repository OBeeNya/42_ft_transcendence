{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ParseEnumPipe = void 0;\nconst tslib_1 = require(\"tslib\");\nconst index_1 = require(\"../index\");\nconst http_error_by_code_util_1 = require(\"../utils/http-error-by-code.util\");\n/**\n * Defines the built-in ParseEnum Pipe\n *\n * @see [Built-in Pipes](https://docs.nestjs.com/pipes#built-in-pipes)\n *\n * @publicApi\n */\nlet ParseEnumPipe = class ParseEnumPipe {\n  constructor(enumType, options) {\n    this.enumType = enumType;\n    if (!enumType) {\n      throw new Error(`\"ParseEnumPipe\" requires \"enumType\" argument specified (to validate input values).`);\n    }\n    options = options || {};\n    const {\n      exceptionFactory,\n      errorHttpStatusCode = index_1.HttpStatus.BAD_REQUEST\n    } = options;\n    this.exceptionFactory = exceptionFactory || (error => new http_error_by_code_util_1.HttpErrorByCode[errorHttpStatusCode](error));\n  }\n  /**\n   * Method that accesses and performs optional transformation on argument for\n   * in-flight requests.\n   *\n   * @param value currently processed route argument\n   * @param metadata contains metadata about the currently processed route argument\n   */\n  async transform(value, metadata) {\n    if (!this.isEnum(value)) {\n      throw this.exceptionFactory('Validation failed (enum string is expected)');\n    }\n    return value;\n  }\n  isEnum(value) {\n    const enumValues = Object.keys(this.enumType).map(item => this.enumType[item]);\n    return enumValues.includes(value);\n  }\n};\nParseEnumPipe = tslib_1.__decorate([(0, index_1.Injectable)(), tslib_1.__param(1, (0, index_1.Optional)()), tslib_1.__metadata(\"design:paramtypes\", [Object, Object])], ParseEnumPipe);\nexports.ParseEnumPipe = ParseEnumPipe;","map":{"version":3,"names":["Object","defineProperty","exports","value","ParseEnumPipe","tslib_1","require","index_1","http_error_by_code_util_1","constructor","enumType","options","Error","exceptionFactory","errorHttpStatusCode","HttpStatus","BAD_REQUEST","error","HttpErrorByCode","transform","metadata","isEnum","enumValues","keys","map","item","includes","__decorate","Injectable","__param","Optional","__metadata"],"sources":["/home/benjamin/Documents/42/42_ft_transcendence/front/node_modules/@nestjs/common/pipes/parse-enum.pipe.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ParseEnumPipe = void 0;\nconst tslib_1 = require(\"tslib\");\nconst index_1 = require(\"../index\");\nconst http_error_by_code_util_1 = require(\"../utils/http-error-by-code.util\");\n/**\n * Defines the built-in ParseEnum Pipe\n *\n * @see [Built-in Pipes](https://docs.nestjs.com/pipes#built-in-pipes)\n *\n * @publicApi\n */\nlet ParseEnumPipe = class ParseEnumPipe {\n    constructor(enumType, options) {\n        this.enumType = enumType;\n        if (!enumType) {\n            throw new Error(`\"ParseEnumPipe\" requires \"enumType\" argument specified (to validate input values).`);\n        }\n        options = options || {};\n        const { exceptionFactory, errorHttpStatusCode = index_1.HttpStatus.BAD_REQUEST } = options;\n        this.exceptionFactory =\n            exceptionFactory ||\n                (error => new http_error_by_code_util_1.HttpErrorByCode[errorHttpStatusCode](error));\n    }\n    /**\n     * Method that accesses and performs optional transformation on argument for\n     * in-flight requests.\n     *\n     * @param value currently processed route argument\n     * @param metadata contains metadata about the currently processed route argument\n     */\n    async transform(value, metadata) {\n        if (!this.isEnum(value)) {\n            throw this.exceptionFactory('Validation failed (enum string is expected)');\n        }\n        return value;\n    }\n    isEnum(value) {\n        const enumValues = Object.keys(this.enumType).map(item => this.enumType[item]);\n        return enumValues.includes(value);\n    }\n};\nParseEnumPipe = tslib_1.__decorate([\n    (0, index_1.Injectable)(),\n    tslib_1.__param(1, (0, index_1.Optional)()),\n    tslib_1.__metadata(\"design:paramtypes\", [Object, Object])\n], ParseEnumPipe);\nexports.ParseEnumPipe = ParseEnumPipe;\n"],"mappings":"AAAA,YAAY;;AACZA,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAAEC,KAAK,EAAE;AAAK,CAAC,CAAC;AAC7DD,OAAO,CAACE,aAAa,GAAG,KAAK,CAAC;AAC9B,MAAMC,OAAO,GAAGC,OAAO,CAAC,OAAO,CAAC;AAChC,MAAMC,OAAO,GAAGD,OAAO,CAAC,UAAU,CAAC;AACnC,MAAME,yBAAyB,GAAGF,OAAO,CAAC,kCAAkC,CAAC;AAC7E;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAIF,aAAa,GAAG,MAAMA,aAAa,CAAC;EACpCK,WAAWA,CAACC,QAAQ,EAAEC,OAAO,EAAE;IAC3B,IAAI,CAACD,QAAQ,GAAGA,QAAQ;IACxB,IAAI,CAACA,QAAQ,EAAE;MACX,MAAM,IAAIE,KAAK,CAAE,oFAAmF,CAAC;IACzG;IACAD,OAAO,GAAGA,OAAO,IAAI,CAAC,CAAC;IACvB,MAAM;MAAEE,gBAAgB;MAAEC,mBAAmB,GAAGP,OAAO,CAACQ,UAAU,CAACC;IAAY,CAAC,GAAGL,OAAO;IAC1F,IAAI,CAACE,gBAAgB,GACjBA,gBAAgB,KACXI,KAAK,IAAI,IAAIT,yBAAyB,CAACU,eAAe,CAACJ,mBAAmB,CAAC,CAACG,KAAK,CAAC,CAAC;EAChG;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;EACI,MAAME,SAASA,CAAChB,KAAK,EAAEiB,QAAQ,EAAE;IAC7B,IAAI,CAAC,IAAI,CAACC,MAAM,CAAClB,KAAK,CAAC,EAAE;MACrB,MAAM,IAAI,CAACU,gBAAgB,CAAC,6CAA6C,CAAC;IAC9E;IACA,OAAOV,KAAK;EAChB;EACAkB,MAAMA,CAAClB,KAAK,EAAE;IACV,MAAMmB,UAAU,GAAGtB,MAAM,CAACuB,IAAI,CAAC,IAAI,CAACb,QAAQ,CAAC,CAACc,GAAG,CAACC,IAAI,IAAI,IAAI,CAACf,QAAQ,CAACe,IAAI,CAAC,CAAC;IAC9E,OAAOH,UAAU,CAACI,QAAQ,CAACvB,KAAK,CAAC;EACrC;AACJ,CAAC;AACDC,aAAa,GAAGC,OAAO,CAACsB,UAAU,CAAC,CAC/B,CAAC,CAAC,EAAEpB,OAAO,CAACqB,UAAU,EAAE,CAAC,EACzBvB,OAAO,CAACwB,OAAO,CAAC,CAAC,EAAE,CAAC,CAAC,EAAEtB,OAAO,CAACuB,QAAQ,EAAE,CAAC,CAAC,EAC3CzB,OAAO,CAAC0B,UAAU,CAAC,mBAAmB,EAAE,CAAC/B,MAAM,EAAEA,MAAM,CAAC,CAAC,CAC5D,EAAEI,aAAa,CAAC;AACjBF,OAAO,CAACE,aAAa,GAAGA,aAAa"},"metadata":{},"sourceType":"script","externalDependencies":[]}