{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.FileTypeValidator = void 0;\nconst file_validator_interface_1 = require(\"./file-validator.interface\");\n/**\n * Defines the built-in FileType File Validator. It validates incoming files mime-type\n * matching a string or a regular expression. Note that this validator uses a naive strategy\n * to check the mime-type and could be fooled if the client provided a file with renamed extension.\n * (for instance, renaming a 'malicious.bat' to 'malicious.jpeg'). To handle such security issues\n * with more reliability, consider checking against the file's [magic-numbers](https://en.wikipedia.org/wiki/Magic_number_%28programming%29)\n *\n * @see [File Validators](https://docs.nestjs.com/techniques/file-upload#validators)\n *\n * @publicApi\n */\nclass FileTypeValidator extends file_validator_interface_1.FileValidator {\n  buildErrorMessage() {\n    return `Validation failed (expected type is ${this.validationOptions.fileType})`;\n  }\n  isValid(file) {\n    if (!this.validationOptions) {\n      return true;\n    }\n    if (!file.mimetype) {\n      return false;\n    }\n    return Boolean(file.mimetype.match(this.validationOptions.fileType));\n  }\n}\nexports.FileTypeValidator = FileTypeValidator;","map":{"version":3,"names":["Object","defineProperty","exports","value","FileTypeValidator","file_validator_interface_1","require","FileValidator","buildErrorMessage","validationOptions","fileType","isValid","file","mimetype","Boolean","match"],"sources":["/home/benjamin/Documents/42/42_ft_transcendence/front/node_modules/@nestjs/common/pipes/file/file-type.validator.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.FileTypeValidator = void 0;\nconst file_validator_interface_1 = require(\"./file-validator.interface\");\n/**\n * Defines the built-in FileType File Validator. It validates incoming files mime-type\n * matching a string or a regular expression. Note that this validator uses a naive strategy\n * to check the mime-type and could be fooled if the client provided a file with renamed extension.\n * (for instance, renaming a 'malicious.bat' to 'malicious.jpeg'). To handle such security issues\n * with more reliability, consider checking against the file's [magic-numbers](https://en.wikipedia.org/wiki/Magic_number_%28programming%29)\n *\n * @see [File Validators](https://docs.nestjs.com/techniques/file-upload#validators)\n *\n * @publicApi\n */\nclass FileTypeValidator extends file_validator_interface_1.FileValidator {\n    buildErrorMessage() {\n        return `Validation failed (expected type is ${this.validationOptions.fileType})`;\n    }\n    isValid(file) {\n        if (!this.validationOptions) {\n            return true;\n        }\n        if (!file.mimetype) {\n            return false;\n        }\n        return Boolean(file.mimetype.match(this.validationOptions.fileType));\n    }\n}\nexports.FileTypeValidator = FileTypeValidator;\n"],"mappings":"AAAA,YAAY;;AACZA,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAAEC,KAAK,EAAE;AAAK,CAAC,CAAC;AAC7DD,OAAO,CAACE,iBAAiB,GAAG,KAAK,CAAC;AAClC,MAAMC,0BAA0B,GAAGC,OAAO,CAAC,4BAA4B,CAAC;AACxE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMF,iBAAiB,SAASC,0BAA0B,CAACE,aAAa,CAAC;EACrEC,iBAAiBA,CAAA,EAAG;IAChB,OAAQ,uCAAsC,IAAI,CAACC,iBAAiB,CAACC,QAAS,GAAE;EACpF;EACAC,OAAOA,CAACC,IAAI,EAAE;IACV,IAAI,CAAC,IAAI,CAACH,iBAAiB,EAAE;MACzB,OAAO,IAAI;IACf;IACA,IAAI,CAACG,IAAI,CAACC,QAAQ,EAAE;MAChB,OAAO,KAAK;IAChB;IACA,OAAOC,OAAO,CAACF,IAAI,CAACC,QAAQ,CAACE,KAAK,CAAC,IAAI,CAACN,iBAAiB,CAACC,QAAQ,CAAC,CAAC;EACxE;AACJ;AACAR,OAAO,CAACE,iBAAiB,GAAGA,iBAAiB"},"metadata":{},"sourceType":"script","externalDependencies":[]}