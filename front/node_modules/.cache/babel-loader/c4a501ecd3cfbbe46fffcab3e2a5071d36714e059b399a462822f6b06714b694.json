{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.UsePipes = void 0;\nconst constants_1 = require(\"../../constants\");\nconst extend_metadata_util_1 = require(\"../../utils/extend-metadata.util\");\nconst shared_utils_1 = require(\"../../utils/shared.utils\");\nconst validate_each_util_1 = require(\"../../utils/validate-each.util\");\n/**\n * Decorator that binds pipes to the scope of the controller or method,\n * depending on its context.\n *\n * When `@UsePipes` is used at the controller level, the pipe will be\n * applied to every handler (method) in the controller.\n *\n * When `@UsePipes` is used at the individual handler level, the pipe\n * will apply only to that specific method.\n *\n * @param pipes a single pipe instance or class, or a list of pipe instances or\n * classes.\n *\n * @see [Pipes](https://docs.nestjs.com/pipes)\n *\n * @usageNotes\n * Pipes can also be set up globally for all controllers and routes\n * using `app.useGlobalPipes()`.  [See here for details](https://docs.nestjs.com/pipes#class-validator)\n *\n * @publicApi\n */\nfunction UsePipes() {\n  for (var _len = arguments.length, pipes = new Array(_len), _key = 0; _key < _len; _key++) {\n    pipes[_key] = arguments[_key];\n  }\n  return (target, key, descriptor) => {\n    const isPipeValid = pipe => pipe && ((0, shared_utils_1.isFunction)(pipe) || (0, shared_utils_1.isFunction)(pipe.transform));\n    if (descriptor) {\n      (0, extend_metadata_util_1.extendArrayMetadata)(constants_1.PIPES_METADATA, pipes, descriptor.value);\n      return descriptor;\n    }\n    (0, validate_each_util_1.validateEach)(target, pipes, isPipeValid, '@UsePipes', 'pipe');\n    (0, extend_metadata_util_1.extendArrayMetadata)(constants_1.PIPES_METADATA, pipes, target);\n    return target;\n  };\n}\nexports.UsePipes = UsePipes;","map":{"version":3,"names":["Object","defineProperty","exports","value","UsePipes","constants_1","require","extend_metadata_util_1","shared_utils_1","validate_each_util_1","_len","arguments","length","pipes","Array","_key","target","key","descriptor","isPipeValid","pipe","isFunction","transform","extendArrayMetadata","PIPES_METADATA","validateEach"],"sources":["/home/benjamin/Documents/42/42_ft_transcendence/front/node_modules/@nestjs/common/decorators/core/use-pipes.decorator.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.UsePipes = void 0;\nconst constants_1 = require(\"../../constants\");\nconst extend_metadata_util_1 = require(\"../../utils/extend-metadata.util\");\nconst shared_utils_1 = require(\"../../utils/shared.utils\");\nconst validate_each_util_1 = require(\"../../utils/validate-each.util\");\n/**\n * Decorator that binds pipes to the scope of the controller or method,\n * depending on its context.\n *\n * When `@UsePipes` is used at the controller level, the pipe will be\n * applied to every handler (method) in the controller.\n *\n * When `@UsePipes` is used at the individual handler level, the pipe\n * will apply only to that specific method.\n *\n * @param pipes a single pipe instance or class, or a list of pipe instances or\n * classes.\n *\n * @see [Pipes](https://docs.nestjs.com/pipes)\n *\n * @usageNotes\n * Pipes can also be set up globally for all controllers and routes\n * using `app.useGlobalPipes()`.  [See here for details](https://docs.nestjs.com/pipes#class-validator)\n *\n * @publicApi\n */\nfunction UsePipes(...pipes) {\n    return (target, key, descriptor) => {\n        const isPipeValid = (pipe) => pipe &&\n            ((0, shared_utils_1.isFunction)(pipe) || (0, shared_utils_1.isFunction)(pipe.transform));\n        if (descriptor) {\n            (0, extend_metadata_util_1.extendArrayMetadata)(constants_1.PIPES_METADATA, pipes, descriptor.value);\n            return descriptor;\n        }\n        (0, validate_each_util_1.validateEach)(target, pipes, isPipeValid, '@UsePipes', 'pipe');\n        (0, extend_metadata_util_1.extendArrayMetadata)(constants_1.PIPES_METADATA, pipes, target);\n        return target;\n    };\n}\nexports.UsePipes = UsePipes;\n"],"mappings":"AAAA,YAAY;;AACZA,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAAEC,KAAK,EAAE;AAAK,CAAC,CAAC;AAC7DD,OAAO,CAACE,QAAQ,GAAG,KAAK,CAAC;AACzB,MAAMC,WAAW,GAAGC,OAAO,CAAC,iBAAiB,CAAC;AAC9C,MAAMC,sBAAsB,GAAGD,OAAO,CAAC,kCAAkC,CAAC;AAC1E,MAAME,cAAc,GAAGF,OAAO,CAAC,0BAA0B,CAAC;AAC1D,MAAMG,oBAAoB,GAAGH,OAAO,CAAC,gCAAgC,CAAC;AACtE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASF,QAAQA,CAAA,EAAW;EAAA,SAAAM,IAAA,GAAAC,SAAA,CAAAC,MAAA,EAAPC,KAAK,OAAAC,KAAA,CAAAJ,IAAA,GAAAK,IAAA,MAAAA,IAAA,GAAAL,IAAA,EAAAK,IAAA;IAALF,KAAK,CAAAE,IAAA,IAAAJ,SAAA,CAAAI,IAAA;EAAA;EACtB,OAAO,CAACC,MAAM,EAAEC,GAAG,EAAEC,UAAU,KAAK;IAChC,MAAMC,WAAW,GAAIC,IAAI,IAAKA,IAAI,KAC7B,CAAC,CAAC,EAAEZ,cAAc,CAACa,UAAU,EAAED,IAAI,CAAC,IAAI,CAAC,CAAC,EAAEZ,cAAc,CAACa,UAAU,EAAED,IAAI,CAACE,SAAS,CAAC,CAAC;IAC5F,IAAIJ,UAAU,EAAE;MACZ,CAAC,CAAC,EAAEX,sBAAsB,CAACgB,mBAAmB,EAAElB,WAAW,CAACmB,cAAc,EAAEX,KAAK,EAAEK,UAAU,CAACf,KAAK,CAAC;MACpG,OAAOe,UAAU;IACrB;IACA,CAAC,CAAC,EAAET,oBAAoB,CAACgB,YAAY,EAAET,MAAM,EAAEH,KAAK,EAAEM,WAAW,EAAE,WAAW,EAAE,MAAM,CAAC;IACvF,CAAC,CAAC,EAAEZ,sBAAsB,CAACgB,mBAAmB,EAAElB,WAAW,CAACmB,cAAc,EAAEX,KAAK,EAAEG,MAAM,CAAC;IAC1F,OAAOA,MAAM;EACjB,CAAC;AACL;AACAd,OAAO,CAACE,QAAQ,GAAGA,QAAQ"},"metadata":{},"sourceType":"script","externalDependencies":[]}