{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ParseFloatPipe = void 0;\nconst tslib_1 = require(\"tslib\");\nconst index_1 = require(\"../index\");\nconst http_error_by_code_util_1 = require(\"../utils/http-error-by-code.util\");\n/**\n * Defines the built-in ParseFloat Pipe\n *\n * @see [Built-in Pipes](https://docs.nestjs.com/pipes#built-in-pipes)\n *\n * @publicApi\n */\nlet ParseFloatPipe = class ParseFloatPipe {\n  constructor(options) {\n    options = options || {};\n    const {\n      exceptionFactory,\n      errorHttpStatusCode = index_1.HttpStatus.BAD_REQUEST\n    } = options;\n    this.exceptionFactory = exceptionFactory || (error => new http_error_by_code_util_1.HttpErrorByCode[errorHttpStatusCode](error));\n  }\n  /**\n   * Method that accesses and performs optional transformation on argument for\n   * in-flight requests.\n   *\n   * @param value currently processed route argument\n   * @param metadata contains metadata about the currently processed route argument\n   */\n  async transform(value, metadata) {\n    if (!this.isNumeric(value)) {\n      throw this.exceptionFactory('Validation failed (numeric string is expected)');\n    }\n    return parseFloat(value);\n  }\n  /**\n   * @param value currently processed route argument\n   * @returns `true` if `value` is a valid float number\n   */\n  isNumeric(value) {\n    return ['string', 'number'].includes(typeof value) && !isNaN(parseFloat(value)) && isFinite(value);\n  }\n};\nParseFloatPipe = tslib_1.__decorate([(0, index_1.Injectable)(), tslib_1.__param(0, (0, index_1.Optional)()), tslib_1.__metadata(\"design:paramtypes\", [Object])], ParseFloatPipe);\nexports.ParseFloatPipe = ParseFloatPipe;","map":{"version":3,"names":["Object","defineProperty","exports","value","ParseFloatPipe","tslib_1","require","index_1","http_error_by_code_util_1","constructor","options","exceptionFactory","errorHttpStatusCode","HttpStatus","BAD_REQUEST","error","HttpErrorByCode","transform","metadata","isNumeric","parseFloat","includes","isNaN","isFinite","__decorate","Injectable","__param","Optional","__metadata"],"sources":["/home/benjamin/Documents/42/42_ft_transcendence/front/node_modules/@nestjs/common/pipes/parse-float.pipe.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ParseFloatPipe = void 0;\nconst tslib_1 = require(\"tslib\");\nconst index_1 = require(\"../index\");\nconst http_error_by_code_util_1 = require(\"../utils/http-error-by-code.util\");\n/**\n * Defines the built-in ParseFloat Pipe\n *\n * @see [Built-in Pipes](https://docs.nestjs.com/pipes#built-in-pipes)\n *\n * @publicApi\n */\nlet ParseFloatPipe = class ParseFloatPipe {\n    constructor(options) {\n        options = options || {};\n        const { exceptionFactory, errorHttpStatusCode = index_1.HttpStatus.BAD_REQUEST } = options;\n        this.exceptionFactory =\n            exceptionFactory ||\n                (error => new http_error_by_code_util_1.HttpErrorByCode[errorHttpStatusCode](error));\n    }\n    /**\n     * Method that accesses and performs optional transformation on argument for\n     * in-flight requests.\n     *\n     * @param value currently processed route argument\n     * @param metadata contains metadata about the currently processed route argument\n     */\n    async transform(value, metadata) {\n        if (!this.isNumeric(value)) {\n            throw this.exceptionFactory('Validation failed (numeric string is expected)');\n        }\n        return parseFloat(value);\n    }\n    /**\n     * @param value currently processed route argument\n     * @returns `true` if `value` is a valid float number\n     */\n    isNumeric(value) {\n        return (['string', 'number'].includes(typeof value) &&\n            !isNaN(parseFloat(value)) &&\n            isFinite(value));\n    }\n};\nParseFloatPipe = tslib_1.__decorate([\n    (0, index_1.Injectable)(),\n    tslib_1.__param(0, (0, index_1.Optional)()),\n    tslib_1.__metadata(\"design:paramtypes\", [Object])\n], ParseFloatPipe);\nexports.ParseFloatPipe = ParseFloatPipe;\n"],"mappings":"AAAA,YAAY;;AACZA,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAAEC,KAAK,EAAE;AAAK,CAAC,CAAC;AAC7DD,OAAO,CAACE,cAAc,GAAG,KAAK,CAAC;AAC/B,MAAMC,OAAO,GAAGC,OAAO,CAAC,OAAO,CAAC;AAChC,MAAMC,OAAO,GAAGD,OAAO,CAAC,UAAU,CAAC;AACnC,MAAME,yBAAyB,GAAGF,OAAO,CAAC,kCAAkC,CAAC;AAC7E;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAIF,cAAc,GAAG,MAAMA,cAAc,CAAC;EACtCK,WAAWA,CAACC,OAAO,EAAE;IACjBA,OAAO,GAAGA,OAAO,IAAI,CAAC,CAAC;IACvB,MAAM;MAAEC,gBAAgB;MAAEC,mBAAmB,GAAGL,OAAO,CAACM,UAAU,CAACC;IAAY,CAAC,GAAGJ,OAAO;IAC1F,IAAI,CAACC,gBAAgB,GACjBA,gBAAgB,KACXI,KAAK,IAAI,IAAIP,yBAAyB,CAACQ,eAAe,CAACJ,mBAAmB,CAAC,CAACG,KAAK,CAAC,CAAC;EAChG;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;EACI,MAAME,SAASA,CAACd,KAAK,EAAEe,QAAQ,EAAE;IAC7B,IAAI,CAAC,IAAI,CAACC,SAAS,CAAChB,KAAK,CAAC,EAAE;MACxB,MAAM,IAAI,CAACQ,gBAAgB,CAAC,gDAAgD,CAAC;IACjF;IACA,OAAOS,UAAU,CAACjB,KAAK,CAAC;EAC5B;EACA;AACJ;AACA;AACA;EACIgB,SAASA,CAAChB,KAAK,EAAE;IACb,OAAQ,CAAC,QAAQ,EAAE,QAAQ,CAAC,CAACkB,QAAQ,CAAC,OAAOlB,KAAK,CAAC,IAC/C,CAACmB,KAAK,CAACF,UAAU,CAACjB,KAAK,CAAC,CAAC,IACzBoB,QAAQ,CAACpB,KAAK,CAAC;EACvB;AACJ,CAAC;AACDC,cAAc,GAAGC,OAAO,CAACmB,UAAU,CAAC,CAChC,CAAC,CAAC,EAAEjB,OAAO,CAACkB,UAAU,EAAE,CAAC,EACzBpB,OAAO,CAACqB,OAAO,CAAC,CAAC,EAAE,CAAC,CAAC,EAAEnB,OAAO,CAACoB,QAAQ,EAAE,CAAC,CAAC,EAC3CtB,OAAO,CAACuB,UAAU,CAAC,mBAAmB,EAAE,CAAC5B,MAAM,CAAC,CAAC,CACpD,EAAEI,cAAc,CAAC;AAClBF,OAAO,CAACE,cAAc,GAAGA,cAAc"},"metadata":{},"sourceType":"script","externalDependencies":[]}