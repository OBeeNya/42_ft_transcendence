{"ast":null,"code":"\"use strict\";\n\nvar ConsoleLogger_1;\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ConsoleLogger = void 0;\nconst tslib_1 = require(\"tslib\");\nconst core_1 = require(\"../decorators/core\");\nconst cli_colors_util_1 = require(\"../utils/cli-colors.util\");\nconst shared_utils_1 = require(\"../utils/shared.utils\");\nconst utils_1 = require(\"./utils\");\nconst DEFAULT_LOG_LEVELS = ['log', 'error', 'warn', 'debug', 'verbose'];\nconst dateTimeFormatter = new Intl.DateTimeFormat(undefined, {\n  year: 'numeric',\n  hour: 'numeric',\n  minute: 'numeric',\n  second: 'numeric',\n  day: '2-digit',\n  month: '2-digit'\n});\nlet ConsoleLogger = ConsoleLogger_1 = class ConsoleLogger {\n  constructor(context) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    this.context = context;\n    this.options = options;\n    if (!options.logLevels) {\n      options.logLevels = DEFAULT_LOG_LEVELS;\n    }\n    if (context) {\n      this.originalContext = context;\n    }\n  }\n  log(message) {\n    if (!this.isLevelEnabled('log')) {\n      return;\n    }\n    for (var _len = arguments.length, optionalParams = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n      optionalParams[_key - 1] = arguments[_key];\n    }\n    const {\n      messages,\n      context\n    } = this.getContextAndMessagesToPrint([message, ...optionalParams]);\n    this.printMessages(messages, context, 'log');\n  }\n  error(message) {\n    if (!this.isLevelEnabled('error')) {\n      return;\n    }\n    for (var _len2 = arguments.length, optionalParams = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {\n      optionalParams[_key2 - 1] = arguments[_key2];\n    }\n    const {\n      messages,\n      context,\n      stack\n    } = this.getContextAndStackAndMessagesToPrint([message, ...optionalParams]);\n    this.printMessages(messages, context, 'error', 'stderr');\n    this.printStackTrace(stack);\n  }\n  warn(message) {\n    if (!this.isLevelEnabled('warn')) {\n      return;\n    }\n    for (var _len3 = arguments.length, optionalParams = new Array(_len3 > 1 ? _len3 - 1 : 0), _key3 = 1; _key3 < _len3; _key3++) {\n      optionalParams[_key3 - 1] = arguments[_key3];\n    }\n    const {\n      messages,\n      context\n    } = this.getContextAndMessagesToPrint([message, ...optionalParams]);\n    this.printMessages(messages, context, 'warn');\n  }\n  debug(message) {\n    if (!this.isLevelEnabled('debug')) {\n      return;\n    }\n    for (var _len4 = arguments.length, optionalParams = new Array(_len4 > 1 ? _len4 - 1 : 0), _key4 = 1; _key4 < _len4; _key4++) {\n      optionalParams[_key4 - 1] = arguments[_key4];\n    }\n    const {\n      messages,\n      context\n    } = this.getContextAndMessagesToPrint([message, ...optionalParams]);\n    this.printMessages(messages, context, 'debug');\n  }\n  verbose(message) {\n    if (!this.isLevelEnabled('verbose')) {\n      return;\n    }\n    for (var _len5 = arguments.length, optionalParams = new Array(_len5 > 1 ? _len5 - 1 : 0), _key5 = 1; _key5 < _len5; _key5++) {\n      optionalParams[_key5 - 1] = arguments[_key5];\n    }\n    const {\n      messages,\n      context\n    } = this.getContextAndMessagesToPrint([message, ...optionalParams]);\n    this.printMessages(messages, context, 'verbose');\n  }\n  /**\n   * Set log levels\n   * @param levels log levels\n   */\n  setLogLevels(levels) {\n    if (!this.options) {\n      this.options = {};\n    }\n    this.options.logLevels = levels;\n  }\n  /**\n   * Set logger context\n   * @param context context\n   */\n  setContext(context) {\n    this.context = context;\n  }\n  /**\n   * Resets the logger context to the value that was passed in the constructor.\n   */\n  resetContext() {\n    this.context = this.originalContext;\n  }\n  isLevelEnabled(level) {\n    var _a;\n    const logLevels = (_a = this.options) === null || _a === void 0 ? void 0 : _a.logLevels;\n    return (0, utils_1.isLogLevelEnabled)(level, logLevels);\n  }\n  getTimestamp() {\n    return dateTimeFormatter.format(Date.now());\n  }\n  printMessages(messages) {\n    let context = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';\n    let logLevel = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'log';\n    let writeStreamType = arguments.length > 3 ? arguments[3] : undefined;\n    messages.forEach(message => {\n      const pidMessage = this.formatPid(process.pid);\n      const contextMessage = this.formatContext(context);\n      const timestampDiff = this.updateAndGetTimestampDiff();\n      const formattedLogLevel = logLevel.toUpperCase().padStart(7, ' ');\n      const formattedMessage = this.formatMessage(logLevel, message, pidMessage, formattedLogLevel, contextMessage, timestampDiff);\n      process[writeStreamType !== null && writeStreamType !== void 0 ? writeStreamType : 'stdout'].write(formattedMessage);\n    });\n  }\n  formatPid(pid) {\n    return `[Nest] ${pid}  - `;\n  }\n  formatContext(context) {\n    return context ? (0, cli_colors_util_1.yellow)(`[${context}] `) : '';\n  }\n  formatMessage(logLevel, message, pidMessage, formattedLogLevel, contextMessage, timestampDiff) {\n    const output = this.stringifyMessage(message, logLevel);\n    pidMessage = this.colorize(pidMessage, logLevel);\n    formattedLogLevel = this.colorize(formattedLogLevel, logLevel);\n    return `${pidMessage}${this.getTimestamp()} ${formattedLogLevel} ${contextMessage}${output}${timestampDiff}\\n`;\n  }\n  stringifyMessage(message, logLevel) {\n    // If the message is a function, call it and re-resolve its value.\n    return (0, shared_utils_1.isFunction)(message) ? this.stringifyMessage(message(), logLevel) : (0, shared_utils_1.isPlainObject)(message) || Array.isArray(message) ? `${this.colorize('Object:', logLevel)}\\n${JSON.stringify(message, (key, value) => typeof value === 'bigint' ? value.toString() : value, 2)}\\n` : this.colorize(message, logLevel);\n  }\n  colorize(message, logLevel) {\n    const color = this.getColorByLogLevel(logLevel);\n    return color(message);\n  }\n  printStackTrace(stack) {\n    if (!stack) {\n      return;\n    }\n    process.stderr.write(`${stack}\\n`);\n  }\n  updateAndGetTimestampDiff() {\n    var _a;\n    const includeTimestamp = ConsoleLogger_1.lastTimestampAt && ((_a = this.options) === null || _a === void 0 ? void 0 : _a.timestamp);\n    const result = includeTimestamp ? this.formatTimestampDiff(Date.now() - ConsoleLogger_1.lastTimestampAt) : '';\n    ConsoleLogger_1.lastTimestampAt = Date.now();\n    return result;\n  }\n  formatTimestampDiff(timestampDiff) {\n    return (0, cli_colors_util_1.yellow)(` +${timestampDiff}ms`);\n  }\n  getContextAndMessagesToPrint(args) {\n    if ((args === null || args === void 0 ? void 0 : args.length) <= 1) {\n      return {\n        messages: args,\n        context: this.context\n      };\n    }\n    const lastElement = args[args.length - 1];\n    const isContext = (0, shared_utils_1.isString)(lastElement);\n    if (!isContext) {\n      return {\n        messages: args,\n        context: this.context\n      };\n    }\n    return {\n      context: lastElement,\n      messages: args.slice(0, args.length - 1)\n    };\n  }\n  getContextAndStackAndMessagesToPrint(args) {\n    const {\n      messages,\n      context\n    } = this.getContextAndMessagesToPrint(args);\n    if ((messages === null || messages === void 0 ? void 0 : messages.length) <= 1) {\n      return {\n        messages,\n        context\n      };\n    }\n    const lastElement = messages[messages.length - 1];\n    const isStack = (0, shared_utils_1.isString)(lastElement);\n    // https://github.com/nestjs/nest/issues/11074#issuecomment-1421680060\n    if (!isStack && !(0, shared_utils_1.isUndefined)(lastElement)) {\n      return {\n        messages,\n        context\n      };\n    }\n    return {\n      stack: lastElement,\n      messages: messages.slice(0, messages.length - 1),\n      context\n    };\n  }\n  getColorByLogLevel(level) {\n    switch (level) {\n      case 'debug':\n        return cli_colors_util_1.clc.magentaBright;\n      case 'warn':\n        return cli_colors_util_1.clc.yellow;\n      case 'error':\n        return cli_colors_util_1.clc.red;\n      case 'verbose':\n        return cli_colors_util_1.clc.cyanBright;\n      default:\n        return cli_colors_util_1.clc.green;\n    }\n  }\n};\nConsoleLogger = ConsoleLogger_1 = tslib_1.__decorate([(0, core_1.Injectable)(), tslib_1.__param(0, (0, core_1.Optional)()), tslib_1.__param(1, (0, core_1.Optional)()), tslib_1.__metadata(\"design:paramtypes\", [String, Object])], ConsoleLogger);\nexports.ConsoleLogger = ConsoleLogger;","map":{"version":3,"names":["ConsoleLogger_1","Object","defineProperty","exports","value","ConsoleLogger","tslib_1","require","core_1","cli_colors_util_1","shared_utils_1","utils_1","DEFAULT_LOG_LEVELS","dateTimeFormatter","Intl","DateTimeFormat","undefined","year","hour","minute","second","day","month","constructor","context","options","arguments","length","logLevels","originalContext","log","message","isLevelEnabled","_len","optionalParams","Array","_key","messages","getContextAndMessagesToPrint","printMessages","error","_len2","_key2","stack","getContextAndStackAndMessagesToPrint","printStackTrace","warn","_len3","_key3","debug","_len4","_key4","verbose","_len5","_key5","setLogLevels","levels","setContext","resetContext","level","_a","isLogLevelEnabled","getTimestamp","format","Date","now","logLevel","writeStreamType","forEach","pidMessage","formatPid","process","pid","contextMessage","formatContext","timestampDiff","updateAndGetTimestampDiff","formattedLogLevel","toUpperCase","padStart","formattedMessage","formatMessage","write","yellow","output","stringifyMessage","colorize","isFunction","isPlainObject","isArray","JSON","stringify","key","toString","color","getColorByLogLevel","stderr","includeTimestamp","lastTimestampAt","timestamp","result","formatTimestampDiff","args","lastElement","isContext","isString","slice","isStack","isUndefined","clc","magentaBright","red","cyanBright","green","__decorate","Injectable","__param","Optional","__metadata","String"],"sources":["/home/benjamin/Documents/42/42_ft_transcendence/front/node_modules/@nestjs/common/services/console-logger.service.js"],"sourcesContent":["\"use strict\";\nvar ConsoleLogger_1;\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ConsoleLogger = void 0;\nconst tslib_1 = require(\"tslib\");\nconst core_1 = require(\"../decorators/core\");\nconst cli_colors_util_1 = require(\"../utils/cli-colors.util\");\nconst shared_utils_1 = require(\"../utils/shared.utils\");\nconst utils_1 = require(\"./utils\");\nconst DEFAULT_LOG_LEVELS = [\n    'log',\n    'error',\n    'warn',\n    'debug',\n    'verbose',\n];\nconst dateTimeFormatter = new Intl.DateTimeFormat(undefined, {\n    year: 'numeric',\n    hour: 'numeric',\n    minute: 'numeric',\n    second: 'numeric',\n    day: '2-digit',\n    month: '2-digit',\n});\nlet ConsoleLogger = ConsoleLogger_1 = class ConsoleLogger {\n    constructor(context, options = {}) {\n        this.context = context;\n        this.options = options;\n        if (!options.logLevels) {\n            options.logLevels = DEFAULT_LOG_LEVELS;\n        }\n        if (context) {\n            this.originalContext = context;\n        }\n    }\n    log(message, ...optionalParams) {\n        if (!this.isLevelEnabled('log')) {\n            return;\n        }\n        const { messages, context } = this.getContextAndMessagesToPrint([\n            message,\n            ...optionalParams,\n        ]);\n        this.printMessages(messages, context, 'log');\n    }\n    error(message, ...optionalParams) {\n        if (!this.isLevelEnabled('error')) {\n            return;\n        }\n        const { messages, context, stack } = this.getContextAndStackAndMessagesToPrint([message, ...optionalParams]);\n        this.printMessages(messages, context, 'error', 'stderr');\n        this.printStackTrace(stack);\n    }\n    warn(message, ...optionalParams) {\n        if (!this.isLevelEnabled('warn')) {\n            return;\n        }\n        const { messages, context } = this.getContextAndMessagesToPrint([\n            message,\n            ...optionalParams,\n        ]);\n        this.printMessages(messages, context, 'warn');\n    }\n    debug(message, ...optionalParams) {\n        if (!this.isLevelEnabled('debug')) {\n            return;\n        }\n        const { messages, context } = this.getContextAndMessagesToPrint([\n            message,\n            ...optionalParams,\n        ]);\n        this.printMessages(messages, context, 'debug');\n    }\n    verbose(message, ...optionalParams) {\n        if (!this.isLevelEnabled('verbose')) {\n            return;\n        }\n        const { messages, context } = this.getContextAndMessagesToPrint([\n            message,\n            ...optionalParams,\n        ]);\n        this.printMessages(messages, context, 'verbose');\n    }\n    /**\n     * Set log levels\n     * @param levels log levels\n     */\n    setLogLevels(levels) {\n        if (!this.options) {\n            this.options = {};\n        }\n        this.options.logLevels = levels;\n    }\n    /**\n     * Set logger context\n     * @param context context\n     */\n    setContext(context) {\n        this.context = context;\n    }\n    /**\n     * Resets the logger context to the value that was passed in the constructor.\n     */\n    resetContext() {\n        this.context = this.originalContext;\n    }\n    isLevelEnabled(level) {\n        var _a;\n        const logLevels = (_a = this.options) === null || _a === void 0 ? void 0 : _a.logLevels;\n        return (0, utils_1.isLogLevelEnabled)(level, logLevels);\n    }\n    getTimestamp() {\n        return dateTimeFormatter.format(Date.now());\n    }\n    printMessages(messages, context = '', logLevel = 'log', writeStreamType) {\n        messages.forEach(message => {\n            const pidMessage = this.formatPid(process.pid);\n            const contextMessage = this.formatContext(context);\n            const timestampDiff = this.updateAndGetTimestampDiff();\n            const formattedLogLevel = logLevel.toUpperCase().padStart(7, ' ');\n            const formattedMessage = this.formatMessage(logLevel, message, pidMessage, formattedLogLevel, contextMessage, timestampDiff);\n            process[writeStreamType !== null && writeStreamType !== void 0 ? writeStreamType : 'stdout'].write(formattedMessage);\n        });\n    }\n    formatPid(pid) {\n        return `[Nest] ${pid}  - `;\n    }\n    formatContext(context) {\n        return context ? (0, cli_colors_util_1.yellow)(`[${context}] `) : '';\n    }\n    formatMessage(logLevel, message, pidMessage, formattedLogLevel, contextMessage, timestampDiff) {\n        const output = this.stringifyMessage(message, logLevel);\n        pidMessage = this.colorize(pidMessage, logLevel);\n        formattedLogLevel = this.colorize(formattedLogLevel, logLevel);\n        return `${pidMessage}${this.getTimestamp()} ${formattedLogLevel} ${contextMessage}${output}${timestampDiff}\\n`;\n    }\n    stringifyMessage(message, logLevel) {\n        // If the message is a function, call it and re-resolve its value.\n        return (0, shared_utils_1.isFunction)(message)\n            ? this.stringifyMessage(message(), logLevel)\n            : (0, shared_utils_1.isPlainObject)(message) || Array.isArray(message)\n                ? `${this.colorize('Object:', logLevel)}\\n${JSON.stringify(message, (key, value) => typeof value === 'bigint' ? value.toString() : value, 2)}\\n`\n                : this.colorize(message, logLevel);\n    }\n    colorize(message, logLevel) {\n        const color = this.getColorByLogLevel(logLevel);\n        return color(message);\n    }\n    printStackTrace(stack) {\n        if (!stack) {\n            return;\n        }\n        process.stderr.write(`${stack}\\n`);\n    }\n    updateAndGetTimestampDiff() {\n        var _a;\n        const includeTimestamp = ConsoleLogger_1.lastTimestampAt && ((_a = this.options) === null || _a === void 0 ? void 0 : _a.timestamp);\n        const result = includeTimestamp\n            ? this.formatTimestampDiff(Date.now() - ConsoleLogger_1.lastTimestampAt)\n            : '';\n        ConsoleLogger_1.lastTimestampAt = Date.now();\n        return result;\n    }\n    formatTimestampDiff(timestampDiff) {\n        return (0, cli_colors_util_1.yellow)(` +${timestampDiff}ms`);\n    }\n    getContextAndMessagesToPrint(args) {\n        if ((args === null || args === void 0 ? void 0 : args.length) <= 1) {\n            return { messages: args, context: this.context };\n        }\n        const lastElement = args[args.length - 1];\n        const isContext = (0, shared_utils_1.isString)(lastElement);\n        if (!isContext) {\n            return { messages: args, context: this.context };\n        }\n        return {\n            context: lastElement,\n            messages: args.slice(0, args.length - 1),\n        };\n    }\n    getContextAndStackAndMessagesToPrint(args) {\n        const { messages, context } = this.getContextAndMessagesToPrint(args);\n        if ((messages === null || messages === void 0 ? void 0 : messages.length) <= 1) {\n            return { messages, context };\n        }\n        const lastElement = messages[messages.length - 1];\n        const isStack = (0, shared_utils_1.isString)(lastElement);\n        // https://github.com/nestjs/nest/issues/11074#issuecomment-1421680060\n        if (!isStack && !(0, shared_utils_1.isUndefined)(lastElement)) {\n            return { messages, context };\n        }\n        return {\n            stack: lastElement,\n            messages: messages.slice(0, messages.length - 1),\n            context,\n        };\n    }\n    getColorByLogLevel(level) {\n        switch (level) {\n            case 'debug':\n                return cli_colors_util_1.clc.magentaBright;\n            case 'warn':\n                return cli_colors_util_1.clc.yellow;\n            case 'error':\n                return cli_colors_util_1.clc.red;\n            case 'verbose':\n                return cli_colors_util_1.clc.cyanBright;\n            default:\n                return cli_colors_util_1.clc.green;\n        }\n    }\n};\nConsoleLogger = ConsoleLogger_1 = tslib_1.__decorate([\n    (0, core_1.Injectable)(),\n    tslib_1.__param(0, (0, core_1.Optional)()),\n    tslib_1.__param(1, (0, core_1.Optional)()),\n    tslib_1.__metadata(\"design:paramtypes\", [String, Object])\n], ConsoleLogger);\nexports.ConsoleLogger = ConsoleLogger;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}