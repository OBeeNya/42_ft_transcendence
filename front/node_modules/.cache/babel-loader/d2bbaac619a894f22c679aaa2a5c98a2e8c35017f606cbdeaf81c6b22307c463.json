{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ConflictException = void 0;\nconst http_status_enum_1 = require(\"../enums/http-status.enum\");\nconst http_exception_1 = require(\"./http.exception\");\n/**\n * Defines an HTTP exception for *Conflict* type errors.\n *\n * @see [Built-in HTTP exceptions](https://docs.nestjs.com/exception-filters#built-in-http-exceptions)\n *\n * @publicApi\n */\nclass ConflictException extends http_exception_1.HttpException {\n  /**\n   * Instantiate a `ConflictException` Exception.\n   *\n   * @example\n   * `throw new ConflictException()`\n   *\n   * @usageNotes\n   * The HTTP response status code will be 409.\n   * - The `objectOrError` argument defines the JSON response body or the message string.\n   * - The `descriptionOrOptions` argument contains either a short description of the HTTP error or an options object used to provide an underlying error cause.\n   *\n   * By default, the JSON response body contains two properties:\n   * - `statusCode`: this will be the value 409.\n   * - `message`: the string `'Conflict'` by default; override this by supplying\n   * a string in the `objectOrError` parameter.\n   *\n   * If the parameter `objectOrError` is a string, the response body will contain an\n   * additional property, `error`, with a short description of the HTTP error. To override the\n   * entire JSON response body, pass an object instead. Nest will serialize the object\n   * and return it as the JSON response body.\n   *\n   * @param objectOrError string or object describing the error condition.\n   * @param descriptionOrOptions either a short description of the HTTP error or an options object used to provide an underlying error cause\n   */\n  constructor(objectOrError) {\n    let descriptionOrOptions = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'Conflict';\n    const {\n      description,\n      httpExceptionOptions\n    } = http_exception_1.HttpException.extractDescriptionAndOptionsFrom(descriptionOrOptions);\n    super(http_exception_1.HttpException.createBody(objectOrError, description, http_status_enum_1.HttpStatus.CONFLICT), http_status_enum_1.HttpStatus.CONFLICT, httpExceptionOptions);\n  }\n}\nexports.ConflictException = ConflictException;","map":{"version":3,"names":["Object","defineProperty","exports","value","ConflictException","http_status_enum_1","require","http_exception_1","HttpException","constructor","objectOrError","descriptionOrOptions","arguments","length","undefined","description","httpExceptionOptions","extractDescriptionAndOptionsFrom","createBody","HttpStatus","CONFLICT"],"sources":["/home/benjamin/Documents/42/42_ft_transcendence/front/node_modules/@nestjs/common/exceptions/conflict.exception.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ConflictException = void 0;\nconst http_status_enum_1 = require(\"../enums/http-status.enum\");\nconst http_exception_1 = require(\"./http.exception\");\n/**\n * Defines an HTTP exception for *Conflict* type errors.\n *\n * @see [Built-in HTTP exceptions](https://docs.nestjs.com/exception-filters#built-in-http-exceptions)\n *\n * @publicApi\n */\nclass ConflictException extends http_exception_1.HttpException {\n    /**\n     * Instantiate a `ConflictException` Exception.\n     *\n     * @example\n     * `throw new ConflictException()`\n     *\n     * @usageNotes\n     * The HTTP response status code will be 409.\n     * - The `objectOrError` argument defines the JSON response body or the message string.\n     * - The `descriptionOrOptions` argument contains either a short description of the HTTP error or an options object used to provide an underlying error cause.\n     *\n     * By default, the JSON response body contains two properties:\n     * - `statusCode`: this will be the value 409.\n     * - `message`: the string `'Conflict'` by default; override this by supplying\n     * a string in the `objectOrError` parameter.\n     *\n     * If the parameter `objectOrError` is a string, the response body will contain an\n     * additional property, `error`, with a short description of the HTTP error. To override the\n     * entire JSON response body, pass an object instead. Nest will serialize the object\n     * and return it as the JSON response body.\n     *\n     * @param objectOrError string or object describing the error condition.\n     * @param descriptionOrOptions either a short description of the HTTP error or an options object used to provide an underlying error cause\n     */\n    constructor(objectOrError, descriptionOrOptions = 'Conflict') {\n        const { description, httpExceptionOptions } = http_exception_1.HttpException.extractDescriptionAndOptionsFrom(descriptionOrOptions);\n        super(http_exception_1.HttpException.createBody(objectOrError, description, http_status_enum_1.HttpStatus.CONFLICT), http_status_enum_1.HttpStatus.CONFLICT, httpExceptionOptions);\n    }\n}\nexports.ConflictException = ConflictException;\n"],"mappings":"AAAA,YAAY;;AACZA,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAAEC,KAAK,EAAE;AAAK,CAAC,CAAC;AAC7DD,OAAO,CAACE,iBAAiB,GAAG,KAAK,CAAC;AAClC,MAAMC,kBAAkB,GAAGC,OAAO,CAAC,2BAA2B,CAAC;AAC/D,MAAMC,gBAAgB,GAAGD,OAAO,CAAC,kBAAkB,CAAC;AACpD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMF,iBAAiB,SAASG,gBAAgB,CAACC,aAAa,CAAC;EAC3D;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACIC,WAAWA,CAACC,aAAa,EAAqC;IAAA,IAAnCC,oBAAoB,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,UAAU;IACxD,MAAM;MAAEG,WAAW;MAAEC;IAAqB,CAAC,GAAGT,gBAAgB,CAACC,aAAa,CAACS,gCAAgC,CAACN,oBAAoB,CAAC;IACnI,KAAK,CAACJ,gBAAgB,CAACC,aAAa,CAACU,UAAU,CAACR,aAAa,EAAEK,WAAW,EAAEV,kBAAkB,CAACc,UAAU,CAACC,QAAQ,CAAC,EAAEf,kBAAkB,CAACc,UAAU,CAACC,QAAQ,EAAEJ,oBAAoB,CAAC;EACtL;AACJ;AACAd,OAAO,CAACE,iBAAiB,GAAGA,iBAAiB"},"metadata":{},"sourceType":"script","externalDependencies":[]}