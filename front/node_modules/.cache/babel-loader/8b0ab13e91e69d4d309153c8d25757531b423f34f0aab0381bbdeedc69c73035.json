{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nconst concat_1 = require(\"./concat\");\nconst filter_1 = require(\"./filter\");\nconst flatten_1 = require(\"./flatten\");\nconst map_1 = require(\"./map\");\nconst slice_1 = require(\"./slice\");\nconst utils_1 = require(\"./utils\");\nconst zip_1 = require(\"./zip\");\nclass IteratorWithOperators {\n  /**\n   * @param source Iterator to wrap\n   */\n  constructor(source) {\n    this.source = source;\n  }\n  /**\n   * Returns a `{ value, done }` object that adheres to the Iterator protocol\n   */\n  next() {\n    return this.source.next();\n  }\n  /**\n   * The presence of this method makes the Iterator itself Iterable.\n   * This makes it possible to pass it to `for of` and Iterable-accepting functions like `Array.from()`\n   */\n  [Symbol.iterator]() {\n    return this;\n  }\n  /**\n   * Returns a new Iterator by running each element thru iteratee\n   */\n  map(iteratee) {\n    return new IteratorWithOperators(new map_1.MapIterator(this.source, iteratee));\n  }\n  filter(predicate) {\n    return new IteratorWithOperators(new filter_1.FilterIterator(this.source, predicate));\n  }\n  /**\n   * Returns a new Iterator concatenating the Iterator with an additional Iterator or Iterable\n   */\n  concat(collection) {\n    return new IteratorWithOperators(new concat_1.ConcatIterator([this.source, utils_1.toIterator(collection)]));\n  }\n  /**\n   * Returns a new Iterator that emits slice of the source with n elements taken from the beginning\n   *\n   * @param limit The number of elements to take.\n   */\n  take(limit) {\n    return new IteratorWithOperators(new slice_1.SliceIterator(this.source, 0, limit + 1));\n  }\n  /**\n   * Returns a new Iterator that emits slice of the source with n elements dropped from the beginning\n   *\n   * @param n The number of elements to drop.\n   */\n  drop(n) {\n    return new IteratorWithOperators(new slice_1.SliceIterator(this.source, n, Infinity));\n  }\n  /**\n   * Returns a new Iterator that emits a slice of the source\n   *\n   * @param {number} start Zero-based positive start index, inclusive\n   * @param {number} end Zero-based positive end index, exclusive, defaults to end of iterator\n   */\n  slice(start) {\n    let end = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : Infinity;\n    return new IteratorWithOperators(new slice_1.SliceIterator(this.source, start, end));\n  }\n  /**\n   * Returns a new Iterator that flattens items emitted by the Iterator a single level deep\n   */\n  flatten() {\n    return new IteratorWithOperators(new flatten_1.FlattenIterator(this.source));\n  }\n  reduce(iteratee, accumulator) {\n    let result;\n    if (accumulator === undefined) {\n      result = this.source.next();\n      if (result.done) {\n        throw new TypeError('Reduce of empty Iterator with no initial value');\n      }\n      accumulator = result.value;\n    }\n    while (true) {\n      result = this.source.next();\n      if (result.done) {\n        break;\n      }\n      accumulator = iteratee(accumulator, result.value);\n    }\n    return accumulator;\n  }\n  find(predicate) {\n    let result;\n    while (true) {\n      result = this.source.next();\n      if (result.done) {\n        return undefined;\n      }\n      if (predicate(result.value)) {\n        return result.value;\n      }\n    }\n  }\n  /**\n   * Iterates and checks if `value` is emitted by the Iterator\n   *\n   * @param value The value to search\n   */\n  includes(value) {\n    let result;\n    do {\n      result = this.source.next();\n      if (!result.done && result.value === value) {\n        return true;\n      }\n    } while (!result.done);\n    return false;\n  }\n  /**\n   * Iterates and checks if `predicate` returns truthy for any element emitted by the Iterator\n   */\n  some(predicate) {\n    let result;\n    do {\n      result = this.source.next();\n      if (!result.done && predicate(result.value)) {\n        return true;\n      }\n    } while (!result.done);\n    return false;\n  }\n  /**\n   * Iterates and checks if `predicate` returns truthy for all elements emitted by the Iterator\n   */\n  every(predicate) {\n    let result;\n    do {\n      result = this.source.next();\n      if (!result.done && !predicate(result.value)) {\n        return false;\n      }\n    } while (!result.done);\n    return true;\n  }\n  /**\n   * Iterates and invokes `iteratee` for every element emitted by the Iterator\n   */\n  forEach(iteratee) {\n    let result;\n    while (true) {\n      result = this.source.next();\n      if (result.done) {\n        break;\n      }\n      iteratee(result.value);\n    }\n  }\n  /**\n   * Iterates and joins all elements emitted by the Iterator together as a string separated by an optional separator\n   */\n  join() {\n    let separator = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : ',';\n    let joined = '';\n    let result;\n    while (true) {\n      result = this.source.next();\n      if (result.done) {\n        break;\n      }\n      joined += separator + result.value;\n    }\n    return joined.substr(separator.length);\n  }\n  /**\n   * Iterates and returns all items emitted by the Iterator as an array.\n   * Equivalent to passing the Iterator to `Array.from()`\n   */\n  toArray() {\n    return Array.from(this);\n  }\n  /**\n   * Iterates and returns all items emitted by the Iterator as an ES6 Set.\n   * Equivalent to passing the Iterator to `new Set()`\n   */\n  toSet() {\n    const set = new Set();\n    while (true) {\n      const {\n        value,\n        done\n      } = this.next();\n      if (done) {\n        return set;\n      }\n      set.add(value);\n    }\n  }\n  /**\n   * Iterates and returns all `[key, value]` paris emitted by the Iterator as an ES6 Map.\n   * Equivalent to passing the Iterator to `new Map()`\n   */\n  toMap() {\n    return new Map(this);\n  }\n}\nexports.IteratorWithOperators = IteratorWithOperators;\n/**\n * Creates an Iterator with advanced chainable operator methods for any Iterable or Iterator\n */\nfunction iterate(collection) {\n  return new IteratorWithOperators(utils_1.toIterator(collection));\n}\nexports.iterate = iterate;\n/**\n * Creates an Iterator that emits pairs of values from the two passed Iterators\n */\nfunction zip(a, b) {\n  return new IteratorWithOperators(new zip_1.ZipIterator(utils_1.toIterator(a), utils_1.toIterator(b)));\n}\nexports.zip = zip;\nexports.default = iterate;","map":{"version":3,"names":["concat_1","require","filter_1","flatten_1","map_1","slice_1","utils_1","zip_1","IteratorWithOperators","constructor","source","next","Symbol","iterator","map","iteratee","MapIterator","filter","predicate","FilterIterator","concat","collection","ConcatIterator","toIterator","take","limit","SliceIterator","drop","n","Infinity","slice","start","end","arguments","length","undefined","flatten","FlattenIterator","reduce","accumulator","result","done","TypeError","value","find","includes","some","every","forEach","join","separator","joined","substr","toArray","Array","from","toSet","set","Set","add","toMap","Map","exports","iterate","zip","a","b","ZipIterator","default"],"sources":["../src/iterate.ts"],"sourcesContent":[null],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}