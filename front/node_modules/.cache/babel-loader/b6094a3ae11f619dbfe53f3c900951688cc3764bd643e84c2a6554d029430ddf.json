{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ParseFilePipe = void 0;\nconst tslib_1 = require(\"tslib\");\nconst core_1 = require(\"../../decorators/core\");\nconst enums_1 = require(\"../../enums\");\nconst http_error_by_code_util_1 = require(\"../../utils/http-error-by-code.util\");\nconst shared_utils_1 = require(\"../../utils/shared.utils\");\n/**\n * Defines the built-in ParseFile Pipe. This pipe can be used to validate incoming files\n * with `@UploadedFile()` decorator. You can use either other specific built-in validators\n * or provide one of your own, simply implementing it through FileValidator interface\n * and adding it to ParseFilePipe's constructor.\n *\n * @see [Built-in Pipes](https://docs.nestjs.com/pipes#built-in-pipes)\n *\n * @publicApi\n */\nlet ParseFilePipe = class ParseFilePipe {\n  constructor() {\n    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    const {\n      exceptionFactory,\n      errorHttpStatusCode = enums_1.HttpStatus.BAD_REQUEST,\n      validators = [],\n      fileIsRequired\n    } = options;\n    this.exceptionFactory = exceptionFactory || (error => new http_error_by_code_util_1.HttpErrorByCode[errorHttpStatusCode](error));\n    this.validators = validators;\n    this.fileIsRequired = fileIsRequired !== null && fileIsRequired !== void 0 ? fileIsRequired : true;\n  }\n  async transform(value) {\n    const areThereAnyFilesIn = this.thereAreNoFilesIn(value);\n    if (areThereAnyFilesIn && this.fileIsRequired) {\n      throw this.exceptionFactory('File is required');\n    }\n    if (!areThereAnyFilesIn && this.validators.length) {\n      await this.validateFilesOrFile(value);\n    }\n    return value;\n  }\n  async validateFilesOrFile(value) {\n    if (Array.isArray(value)) {\n      await Promise.all(value.map(f => this.validate(f)));\n    } else {\n      await this.validate(value);\n    }\n  }\n  thereAreNoFilesIn(value) {\n    const isEmptyArray = Array.isArray(value) && (0, shared_utils_1.isEmpty)(value);\n    const isEmptyObject = (0, shared_utils_1.isObject)(value) && (0, shared_utils_1.isEmpty)(Object.keys(value));\n    return (0, shared_utils_1.isUndefined)(value) || isEmptyArray || isEmptyObject;\n  }\n  async validate(file) {\n    for (const validator of this.validators) {\n      await this.validateOrThrow(file, validator);\n    }\n    return file;\n  }\n  async validateOrThrow(file, validator) {\n    const isValid = await validator.isValid(file);\n    if (!isValid) {\n      const errorMessage = validator.buildErrorMessage(file);\n      throw this.exceptionFactory(errorMessage);\n    }\n  }\n  /**\n   * @returns list of validators used in this pipe.\n   */\n  getValidators() {\n    return this.validators;\n  }\n};\nParseFilePipe = tslib_1.__decorate([(0, core_1.Injectable)(), tslib_1.__param(0, (0, core_1.Optional)()), tslib_1.__metadata(\"design:paramtypes\", [Object])], ParseFilePipe);\nexports.ParseFilePipe = ParseFilePipe;","map":{"version":3,"names":["Object","defineProperty","exports","value","ParseFilePipe","tslib_1","require","core_1","enums_1","http_error_by_code_util_1","shared_utils_1","constructor","options","arguments","length","undefined","exceptionFactory","errorHttpStatusCode","HttpStatus","BAD_REQUEST","validators","fileIsRequired","error","HttpErrorByCode","transform","areThereAnyFilesIn","thereAreNoFilesIn","validateFilesOrFile","Array","isArray","Promise","all","map","f","validate","isEmptyArray","isEmpty","isEmptyObject","isObject","keys","isUndefined","file","validator","validateOrThrow","isValid","errorMessage","buildErrorMessage","getValidators","__decorate","Injectable","__param","Optional","__metadata"],"sources":["/home/benjamin/Documents/42/42_ft_transcendence/front/node_modules/@nestjs/common/pipes/file/parse-file.pipe.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ParseFilePipe = void 0;\nconst tslib_1 = require(\"tslib\");\nconst core_1 = require(\"../../decorators/core\");\nconst enums_1 = require(\"../../enums\");\nconst http_error_by_code_util_1 = require(\"../../utils/http-error-by-code.util\");\nconst shared_utils_1 = require(\"../../utils/shared.utils\");\n/**\n * Defines the built-in ParseFile Pipe. This pipe can be used to validate incoming files\n * with `@UploadedFile()` decorator. You can use either other specific built-in validators\n * or provide one of your own, simply implementing it through FileValidator interface\n * and adding it to ParseFilePipe's constructor.\n *\n * @see [Built-in Pipes](https://docs.nestjs.com/pipes#built-in-pipes)\n *\n * @publicApi\n */\nlet ParseFilePipe = class ParseFilePipe {\n    constructor(options = {}) {\n        const { exceptionFactory, errorHttpStatusCode = enums_1.HttpStatus.BAD_REQUEST, validators = [], fileIsRequired, } = options;\n        this.exceptionFactory =\n            exceptionFactory ||\n                (error => new http_error_by_code_util_1.HttpErrorByCode[errorHttpStatusCode](error));\n        this.validators = validators;\n        this.fileIsRequired = fileIsRequired !== null && fileIsRequired !== void 0 ? fileIsRequired : true;\n    }\n    async transform(value) {\n        const areThereAnyFilesIn = this.thereAreNoFilesIn(value);\n        if (areThereAnyFilesIn && this.fileIsRequired) {\n            throw this.exceptionFactory('File is required');\n        }\n        if (!areThereAnyFilesIn && this.validators.length) {\n            await this.validateFilesOrFile(value);\n        }\n        return value;\n    }\n    async validateFilesOrFile(value) {\n        if (Array.isArray(value)) {\n            await Promise.all(value.map(f => this.validate(f)));\n        }\n        else {\n            await this.validate(value);\n        }\n    }\n    thereAreNoFilesIn(value) {\n        const isEmptyArray = Array.isArray(value) && (0, shared_utils_1.isEmpty)(value);\n        const isEmptyObject = (0, shared_utils_1.isObject)(value) && (0, shared_utils_1.isEmpty)(Object.keys(value));\n        return (0, shared_utils_1.isUndefined)(value) || isEmptyArray || isEmptyObject;\n    }\n    async validate(file) {\n        for (const validator of this.validators) {\n            await this.validateOrThrow(file, validator);\n        }\n        return file;\n    }\n    async validateOrThrow(file, validator) {\n        const isValid = await validator.isValid(file);\n        if (!isValid) {\n            const errorMessage = validator.buildErrorMessage(file);\n            throw this.exceptionFactory(errorMessage);\n        }\n    }\n    /**\n     * @returns list of validators used in this pipe.\n     */\n    getValidators() {\n        return this.validators;\n    }\n};\nParseFilePipe = tslib_1.__decorate([\n    (0, core_1.Injectable)(),\n    tslib_1.__param(0, (0, core_1.Optional)()),\n    tslib_1.__metadata(\"design:paramtypes\", [Object])\n], ParseFilePipe);\nexports.ParseFilePipe = ParseFilePipe;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}