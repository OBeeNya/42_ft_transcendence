{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ConfigurableModuleBuilder = void 0;\nconst logger_service_1 = require(\"../services/logger.service\");\nconst random_string_generator_util_1 = require(\"../utils/random-string-generator.util\");\nconst constants_1 = require(\"./constants\");\nconst utils_1 = require(\"./utils\");\n/**\n * Factory that lets you create configurable modules and\n * provides a way to reduce the majority of dynamic module boilerplate.\n *\n * @publicApi\n */\nclass ConfigurableModuleBuilder {\n  constructor() {\n    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    let parentBuilder = arguments.length > 1 ? arguments[1] : undefined;\n    this.options = options;\n    this.logger = new logger_service_1.Logger(ConfigurableModuleBuilder.name);\n    if (parentBuilder) {\n      this.staticMethodKey = parentBuilder.staticMethodKey;\n      this.factoryClassMethodKey = parentBuilder.factoryClassMethodKey;\n      this.transformModuleDefinition = parentBuilder.transformModuleDefinition;\n      this.extras = parentBuilder.extras;\n    }\n  }\n  /**\n   * Registers the \"extras\" object (a set of extra options that can be used to modify the dynamic module definition).\n   * Values you specify within the \"extras\" object will be used as default values (that can be overridden by module consumers).\n   *\n   * This method also applies the so-called \"module definition transform function\" that takes the auto-generated\n   * dynamic module object (\"DynamicModule\") and the actual consumer \"extras\" object as input parameters.\n   * The \"extras\" object consists of values explicitly specified by module consumers and default values.\n   *\n   * @example\n   * ```typescript\n   * .setExtras<{ isGlobal?: boolean }>({ isGlobal: false }, (definition, extras) =>\n   *    ({ ...definition, global: extras.isGlobal })\n   * )\n   * ```\n   */\n  setExtras(extras) {\n    let transformDefinition = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : def => def;\n    const builder = new ConfigurableModuleBuilder(this.options, this);\n    builder.extras = extras;\n    builder.transformModuleDefinition = transformDefinition;\n    return builder;\n  }\n  /**\n   * Dynamic modules must expose public static methods that let you pass in\n   * configuration parameters (control the module's behavior from the outside).\n   * Some frequently used names that you may have seen in other modules are:\n   * \"forRoot\", \"forFeature\", \"register\", \"configure\".\n   *\n   * This method \"setClassMethodName\" lets you specify the name of the\n   * method that will be auto-generated.\n   *\n   * @param key name of the method\n   */\n  setClassMethodName(key) {\n    const builder = new ConfigurableModuleBuilder(this.options, this);\n    builder.staticMethodKey = key;\n    return builder;\n  }\n  /**\n   * Asynchronously configured modules (that rely on other modules, i.e. \"ConfigModule\")\n   * let you pass the configuration factory class that will be registered and instantiated as a provider.\n   * This provider then will be used to retrieve the module's configuration. To provide the configuration,\n   * the corresponding factory method must be implemented.\n   *\n   * This method (\"setFactoryMethodName\") lets you control what method name will have to be\n   * implemented by the config factory (default is \"create\").\n   *\n   * @param key name of the method\n   */\n  setFactoryMethodName(key) {\n    const builder = new ConfigurableModuleBuilder(this.options, this);\n    builder.factoryClassMethodKey = key;\n    return builder;\n  }\n  /**\n   * Returns an object consisting of multiple properties that lets you\n   * easily construct dynamic configurable modules. See \"ConfigurableModuleHost\" interface for more details.\n   */\n  build() {\n    var _a, _b, _c, _d;\n    var _e;\n    (_a = this.staticMethodKey) !== null && _a !== void 0 ? _a : this.staticMethodKey = constants_1.DEFAULT_METHOD_KEY;\n    (_b = this.factoryClassMethodKey) !== null && _b !== void 0 ? _b : this.factoryClassMethodKey = constants_1.DEFAULT_FACTORY_CLASS_METHOD_KEY;\n    (_c = (_e = this.options).optionsInjectionToken) !== null && _c !== void 0 ? _c : _e.optionsInjectionToken = this.options.moduleName ? this.constructInjectionTokenString() : (0, utils_1.generateOptionsInjectionToken)();\n    (_d = this.transformModuleDefinition) !== null && _d !== void 0 ? _d : this.transformModuleDefinition = definition => definition;\n    return {\n      ConfigurableModuleClass: this.createConfigurableModuleCls(),\n      MODULE_OPTIONS_TOKEN: this.options.optionsInjectionToken,\n      ASYNC_OPTIONS_TYPE: this.createTypeProxy('ASYNC_OPTIONS_TYPE'),\n      OPTIONS_TYPE: this.createTypeProxy('OPTIONS_TYPE')\n    };\n  }\n  constructInjectionTokenString() {\n    const moduleNameInSnakeCase = this.options.moduleName.trim().split(/(?=[A-Z])/).join('_').toUpperCase();\n    return `${moduleNameInSnakeCase}_MODULE_OPTIONS`;\n  }\n  createConfigurableModuleCls() {\n    // eslint-disable-next-line @typescript-eslint/no-this-alias\n    const self = this;\n    const asyncMethodKey = this.staticMethodKey + constants_1.ASYNC_METHOD_SUFFIX;\n    class InternalModuleClass {\n      static [self.staticMethodKey](options) {\n        const providers = [{\n          provide: self.options.optionsInjectionToken,\n          useValue: this.omitExtras(options, self.extras)\n        }];\n        if (self.options.alwaysTransient) {\n          providers.push({\n            provide: constants_1.CONFIGURABLE_MODULE_ID,\n            useValue: (0, random_string_generator_util_1.randomStringGenerator)()\n          });\n        }\n        return self.transformModuleDefinition({\n          module: this,\n          providers\n        }, Object.assign(Object.assign({}, self.extras), options));\n      }\n      static [asyncMethodKey](options) {\n        const providers = this.createAsyncProviders(options);\n        if (self.options.alwaysTransient) {\n          providers.push({\n            provide: constants_1.CONFIGURABLE_MODULE_ID,\n            useValue: (0, random_string_generator_util_1.randomStringGenerator)()\n          });\n        }\n        return self.transformModuleDefinition({\n          module: this,\n          imports: options.imports || [],\n          providers\n        }, Object.assign(Object.assign({}, self.extras), options));\n      }\n      static omitExtras(input, extras) {\n        if (!extras) {\n          return input;\n        }\n        const moduleOptions = {};\n        const extrasKeys = Object.keys(extras);\n        Object.keys(input).filter(key => !extrasKeys.includes(key)).forEach(key => {\n          moduleOptions[key] = input[key];\n        });\n        return moduleOptions;\n      }\n      static createAsyncProviders(options) {\n        if (options.useExisting || options.useFactory) {\n          if (options.inject && options.provideInjectionTokensFrom) {\n            return [this.createAsyncOptionsProvider(options), ...(0, utils_1.getInjectionProviders)(options.provideInjectionTokensFrom, options.inject)];\n          }\n          return [this.createAsyncOptionsProvider(options)];\n        }\n        return [this.createAsyncOptionsProvider(options), {\n          provide: options.useClass,\n          useClass: options.useClass\n        }];\n      }\n      static createAsyncOptionsProvider(options) {\n        if (options.useFactory) {\n          return {\n            provide: self.options.optionsInjectionToken,\n            useFactory: options.useFactory,\n            inject: options.inject || []\n          };\n        }\n        return {\n          provide: self.options.optionsInjectionToken,\n          useFactory: async optionsFactory => await optionsFactory[self.factoryClassMethodKey](),\n          inject: [options.useExisting || options.useClass]\n        };\n      }\n    }\n    return InternalModuleClass;\n  }\n  createTypeProxy(typeName) {\n    const proxy = new Proxy({}, {\n      get: () => {\n        throw new Error(`\"${typeName}\" is not supposed to be used as a value.`);\n      }\n    });\n    return proxy;\n  }\n}\nexports.ConfigurableModuleBuilder = ConfigurableModuleBuilder;","map":{"version":3,"names":["Object","defineProperty","exports","value","ConfigurableModuleBuilder","logger_service_1","require","random_string_generator_util_1","constants_1","utils_1","constructor","options","arguments","length","undefined","parentBuilder","logger","Logger","name","staticMethodKey","factoryClassMethodKey","transformModuleDefinition","extras","setExtras","transformDefinition","def","builder","setClassMethodName","key","setFactoryMethodName","build","_a","_b","_c","_d","_e","DEFAULT_METHOD_KEY","DEFAULT_FACTORY_CLASS_METHOD_KEY","optionsInjectionToken","moduleName","constructInjectionTokenString","generateOptionsInjectionToken","definition","ConfigurableModuleClass","createConfigurableModuleCls","MODULE_OPTIONS_TOKEN","ASYNC_OPTIONS_TYPE","createTypeProxy","OPTIONS_TYPE","moduleNameInSnakeCase","trim","split","join","toUpperCase","self","asyncMethodKey","ASYNC_METHOD_SUFFIX","InternalModuleClass","providers","provide","useValue","omitExtras","alwaysTransient","push","CONFIGURABLE_MODULE_ID","randomStringGenerator","module","assign","createAsyncProviders","imports","input","moduleOptions","extrasKeys","keys","filter","includes","forEach","useExisting","useFactory","inject","provideInjectionTokensFrom","createAsyncOptionsProvider","getInjectionProviders","useClass","optionsFactory","typeName","proxy","Proxy","get","Error"],"sources":["/home/benjamin/Documents/42/42_ft_transcendence/front/node_modules/@nestjs/common/module-utils/configurable-module.builder.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ConfigurableModuleBuilder = void 0;\nconst logger_service_1 = require(\"../services/logger.service\");\nconst random_string_generator_util_1 = require(\"../utils/random-string-generator.util\");\nconst constants_1 = require(\"./constants\");\nconst utils_1 = require(\"./utils\");\n/**\n * Factory that lets you create configurable modules and\n * provides a way to reduce the majority of dynamic module boilerplate.\n *\n * @publicApi\n */\nclass ConfigurableModuleBuilder {\n    constructor(options = {}, parentBuilder) {\n        this.options = options;\n        this.logger = new logger_service_1.Logger(ConfigurableModuleBuilder.name);\n        if (parentBuilder) {\n            this.staticMethodKey = parentBuilder.staticMethodKey;\n            this.factoryClassMethodKey =\n                parentBuilder.factoryClassMethodKey;\n            this.transformModuleDefinition = parentBuilder.transformModuleDefinition;\n            this.extras = parentBuilder.extras;\n        }\n    }\n    /**\n     * Registers the \"extras\" object (a set of extra options that can be used to modify the dynamic module definition).\n     * Values you specify within the \"extras\" object will be used as default values (that can be overridden by module consumers).\n     *\n     * This method also applies the so-called \"module definition transform function\" that takes the auto-generated\n     * dynamic module object (\"DynamicModule\") and the actual consumer \"extras\" object as input parameters.\n     * The \"extras\" object consists of values explicitly specified by module consumers and default values.\n     *\n     * @example\n     * ```typescript\n     * .setExtras<{ isGlobal?: boolean }>({ isGlobal: false }, (definition, extras) =>\n     *    ({ ...definition, global: extras.isGlobal })\n     * )\n     * ```\n     */\n    setExtras(extras, transformDefinition = def => def) {\n        const builder = new ConfigurableModuleBuilder(this.options, this);\n        builder.extras = extras;\n        builder.transformModuleDefinition = transformDefinition;\n        return builder;\n    }\n    /**\n     * Dynamic modules must expose public static methods that let you pass in\n     * configuration parameters (control the module's behavior from the outside).\n     * Some frequently used names that you may have seen in other modules are:\n     * \"forRoot\", \"forFeature\", \"register\", \"configure\".\n     *\n     * This method \"setClassMethodName\" lets you specify the name of the\n     * method that will be auto-generated.\n     *\n     * @param key name of the method\n     */\n    setClassMethodName(key) {\n        const builder = new ConfigurableModuleBuilder(this.options, this);\n        builder.staticMethodKey = key;\n        return builder;\n    }\n    /**\n     * Asynchronously configured modules (that rely on other modules, i.e. \"ConfigModule\")\n     * let you pass the configuration factory class that will be registered and instantiated as a provider.\n     * This provider then will be used to retrieve the module's configuration. To provide the configuration,\n     * the corresponding factory method must be implemented.\n     *\n     * This method (\"setFactoryMethodName\") lets you control what method name will have to be\n     * implemented by the config factory (default is \"create\").\n     *\n     * @param key name of the method\n     */\n    setFactoryMethodName(key) {\n        const builder = new ConfigurableModuleBuilder(this.options, this);\n        builder.factoryClassMethodKey = key;\n        return builder;\n    }\n    /**\n     * Returns an object consisting of multiple properties that lets you\n     * easily construct dynamic configurable modules. See \"ConfigurableModuleHost\" interface for more details.\n     */\n    build() {\n        var _a, _b, _c, _d;\n        var _e;\n        (_a = this.staticMethodKey) !== null && _a !== void 0 ? _a : (this.staticMethodKey = constants_1.DEFAULT_METHOD_KEY);\n        (_b = this.factoryClassMethodKey) !== null && _b !== void 0 ? _b : (this.factoryClassMethodKey = constants_1.DEFAULT_FACTORY_CLASS_METHOD_KEY);\n        (_c = (_e = this.options).optionsInjectionToken) !== null && _c !== void 0 ? _c : (_e.optionsInjectionToken = this.options.moduleName\n            ? this.constructInjectionTokenString()\n            : (0, utils_1.generateOptionsInjectionToken)());\n        (_d = this.transformModuleDefinition) !== null && _d !== void 0 ? _d : (this.transformModuleDefinition = definition => definition);\n        return {\n            ConfigurableModuleClass: this.createConfigurableModuleCls(),\n            MODULE_OPTIONS_TOKEN: this.options.optionsInjectionToken,\n            ASYNC_OPTIONS_TYPE: this.createTypeProxy('ASYNC_OPTIONS_TYPE'),\n            OPTIONS_TYPE: this.createTypeProxy('OPTIONS_TYPE'),\n        };\n    }\n    constructInjectionTokenString() {\n        const moduleNameInSnakeCase = this.options.moduleName\n            .trim()\n            .split(/(?=[A-Z])/)\n            .join('_')\n            .toUpperCase();\n        return `${moduleNameInSnakeCase}_MODULE_OPTIONS`;\n    }\n    createConfigurableModuleCls() {\n        // eslint-disable-next-line @typescript-eslint/no-this-alias\n        const self = this;\n        const asyncMethodKey = this.staticMethodKey + constants_1.ASYNC_METHOD_SUFFIX;\n        class InternalModuleClass {\n            static [self.staticMethodKey](options) {\n                const providers = [\n                    {\n                        provide: self.options.optionsInjectionToken,\n                        useValue: this.omitExtras(options, self.extras),\n                    },\n                ];\n                if (self.options.alwaysTransient) {\n                    providers.push({\n                        provide: constants_1.CONFIGURABLE_MODULE_ID,\n                        useValue: (0, random_string_generator_util_1.randomStringGenerator)(),\n                    });\n                }\n                return self.transformModuleDefinition({\n                    module: this,\n                    providers,\n                }, Object.assign(Object.assign({}, self.extras), options));\n            }\n            static [asyncMethodKey](options) {\n                const providers = this.createAsyncProviders(options);\n                if (self.options.alwaysTransient) {\n                    providers.push({\n                        provide: constants_1.CONFIGURABLE_MODULE_ID,\n                        useValue: (0, random_string_generator_util_1.randomStringGenerator)(),\n                    });\n                }\n                return self.transformModuleDefinition({\n                    module: this,\n                    imports: options.imports || [],\n                    providers,\n                }, Object.assign(Object.assign({}, self.extras), options));\n            }\n            static omitExtras(input, extras) {\n                if (!extras) {\n                    return input;\n                }\n                const moduleOptions = {};\n                const extrasKeys = Object.keys(extras);\n                Object.keys(input)\n                    .filter(key => !extrasKeys.includes(key))\n                    .forEach(key => {\n                    moduleOptions[key] = input[key];\n                });\n                return moduleOptions;\n            }\n            static createAsyncProviders(options) {\n                if (options.useExisting || options.useFactory) {\n                    if (options.inject && options.provideInjectionTokensFrom) {\n                        return [\n                            this.createAsyncOptionsProvider(options),\n                            ...(0, utils_1.getInjectionProviders)(options.provideInjectionTokensFrom, options.inject),\n                        ];\n                    }\n                    return [this.createAsyncOptionsProvider(options)];\n                }\n                return [\n                    this.createAsyncOptionsProvider(options),\n                    {\n                        provide: options.useClass,\n                        useClass: options.useClass,\n                    },\n                ];\n            }\n            static createAsyncOptionsProvider(options) {\n                if (options.useFactory) {\n                    return {\n                        provide: self.options.optionsInjectionToken,\n                        useFactory: options.useFactory,\n                        inject: options.inject || [],\n                    };\n                }\n                return {\n                    provide: self.options.optionsInjectionToken,\n                    useFactory: async (optionsFactory) => await optionsFactory[self.factoryClassMethodKey](),\n                    inject: [options.useExisting || options.useClass],\n                };\n            }\n        }\n        return InternalModuleClass;\n    }\n    createTypeProxy(typeName) {\n        const proxy = new Proxy({}, {\n            get: () => {\n                throw new Error(`\"${typeName}\" is not supposed to be used as a value.`);\n            },\n        });\n        return proxy;\n    }\n}\nexports.ConfigurableModuleBuilder = ConfigurableModuleBuilder;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}