{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ValidationPipe = void 0;\nconst tslib_1 = require(\"tslib\");\nconst iterare_1 = require(\"iterare\");\nconst util_1 = require(\"util\");\nconst decorators_1 = require(\"../decorators\");\nconst core_1 = require(\"../decorators/core\");\nconst http_status_enum_1 = require(\"../enums/http-status.enum\");\nconst http_error_by_code_util_1 = require(\"../utils/http-error-by-code.util\");\nconst load_package_util_1 = require(\"../utils/load-package.util\");\nconst shared_utils_1 = require(\"../utils/shared.utils\");\nlet classValidator = {};\nlet classTransformer = {};\n/**\n * @see [Validation](https://docs.nestjs.com/techniques/validation)\n *\n * @publicApi\n */\nlet ValidationPipe = class ValidationPipe {\n  constructor(options) {\n    options = options || {};\n    const {\n        transform,\n        disableErrorMessages,\n        errorHttpStatusCode,\n        expectedType,\n        transformOptions,\n        validateCustomDecorators\n      } = options,\n      validatorOptions = tslib_1.__rest(options, [\"transform\", \"disableErrorMessages\", \"errorHttpStatusCode\", \"expectedType\", \"transformOptions\", \"validateCustomDecorators\"]);\n    // @see https://github.com/nestjs/nest/issues/10683#issuecomment-1413690508\n    this.validatorOptions = Object.assign({\n      forbidUnknownValues: false\n    }, validatorOptions);\n    this.isTransformEnabled = !!transform;\n    this.transformOptions = transformOptions;\n    this.isDetailedOutputDisabled = disableErrorMessages;\n    this.validateCustomDecorators = validateCustomDecorators || false;\n    this.errorHttpStatusCode = errorHttpStatusCode || http_status_enum_1.HttpStatus.BAD_REQUEST;\n    this.expectedType = expectedType;\n    this.exceptionFactory = options.exceptionFactory || this.createExceptionFactory();\n    classValidator = this.loadValidator(options.validatorPackage);\n    classTransformer = this.loadTransformer(options.transformerPackage);\n  }\n  loadValidator(validatorPackage) {\n    return validatorPackage !== null && validatorPackage !== void 0 ? validatorPackage : (0, load_package_util_1.loadPackage)('class-validator', 'ValidationPipe', () => require('class-validator'));\n  }\n  loadTransformer(transformerPackage) {\n    return transformerPackage !== null && transformerPackage !== void 0 ? transformerPackage : (0, load_package_util_1.loadPackage)('class-transformer', 'ValidationPipe', () => require('class-transformer'));\n  }\n  async transform(value, metadata) {\n    if (this.expectedType) {\n      metadata = Object.assign(Object.assign({}, metadata), {\n        metatype: this.expectedType\n      });\n    }\n    const metatype = metadata.metatype;\n    if (!metatype || !this.toValidate(metadata)) {\n      return this.isTransformEnabled ? this.transformPrimitive(value, metadata) : value;\n    }\n    const originalValue = value;\n    value = this.toEmptyIfNil(value);\n    const isNil = value !== originalValue;\n    const isPrimitive = this.isPrimitive(value);\n    this.stripProtoKeys(value);\n    let entity = classTransformer.plainToClass(metatype, value, this.transformOptions);\n    const originalEntity = entity;\n    const isCtorNotEqual = entity.constructor !== metatype;\n    if (isCtorNotEqual && !isPrimitive) {\n      entity.constructor = metatype;\n    } else if (isCtorNotEqual) {\n      // when \"entity\" is a primitive value, we have to temporarily\n      // replace the entity to perform the validation against the original\n      // metatype defined inside the handler\n      entity = {\n        constructor: metatype\n      };\n    }\n    const errors = await this.validate(entity, this.validatorOptions);\n    if (errors.length > 0) {\n      throw await this.exceptionFactory(errors);\n    }\n    if (isPrimitive) {\n      // if the value is a primitive value and the validation process has been successfully completed\n      // we have to revert the original value passed through the pipe\n      entity = originalEntity;\n    }\n    if (this.isTransformEnabled) {\n      return entity;\n    }\n    if (isNil) {\n      // if the value was originally undefined or null, revert it back\n      return originalValue;\n    }\n    // we check if the number of keys of the \"validatorOptions\" is higher than 1 (instead of 0)\n    // because the \"forbidUnknownValues\" now fallbacks to \"false\" (in case it wasn't explicitly specified)\n    const shouldTransformToPlain = Object.keys(this.validatorOptions).length > 1;\n    return shouldTransformToPlain ? classTransformer.classToPlain(entity, this.transformOptions) : value;\n  }\n  createExceptionFactory() {\n    var _this = this;\n    return function () {\n      let validationErrors = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n      if (_this.isDetailedOutputDisabled) {\n        return new http_error_by_code_util_1.HttpErrorByCode[_this.errorHttpStatusCode]();\n      }\n      const errors = _this.flattenValidationErrors(validationErrors);\n      return new http_error_by_code_util_1.HttpErrorByCode[_this.errorHttpStatusCode](errors);\n    };\n  }\n  toValidate(metadata) {\n    const {\n      metatype,\n      type\n    } = metadata;\n    if (type === 'custom' && !this.validateCustomDecorators) {\n      return false;\n    }\n    const types = [String, Boolean, Number, Array, Object, Buffer];\n    return !types.some(t => metatype === t) && !(0, shared_utils_1.isNil)(metatype);\n  }\n  transformPrimitive(value, metadata) {\n    if (!metadata.data) {\n      // leave top-level query/param objects unmodified\n      return value;\n    }\n    const {\n      type,\n      metatype\n    } = metadata;\n    if (type !== 'param' && type !== 'query') {\n      return value;\n    }\n    if (metatype === Boolean) {\n      return value === true || value === 'true';\n    }\n    if (metatype === Number) {\n      return +value;\n    }\n    return value;\n  }\n  toEmptyIfNil(value) {\n    return (0, shared_utils_1.isNil)(value) ? {} : value;\n  }\n  stripProtoKeys(value) {\n    if (value == null || typeof value !== 'object' || util_1.types.isTypedArray(value)) {\n      return;\n    }\n    if (Array.isArray(value)) {\n      for (const v of value) {\n        this.stripProtoKeys(v);\n      }\n      return;\n    }\n    delete value.__proto__;\n    for (const key in value) {\n      this.stripProtoKeys(value[key]);\n    }\n  }\n  isPrimitive(value) {\n    return ['number', 'boolean', 'string'].includes(typeof value);\n  }\n  validate(object, validatorOptions) {\n    return classValidator.validate(object, validatorOptions);\n  }\n  flattenValidationErrors(validationErrors) {\n    return (0, iterare_1.iterate)(validationErrors).map(error => this.mapChildrenToValidationErrors(error)).flatten().filter(item => !!item.constraints).map(item => Object.values(item.constraints)).flatten().toArray();\n  }\n  mapChildrenToValidationErrors(error, parentPath) {\n    if (!(error.children && error.children.length)) {\n      return [error];\n    }\n    const validationErrors = [];\n    parentPath = parentPath ? `${parentPath}.${error.property}` : error.property;\n    for (const item of error.children) {\n      if (item.children && item.children.length) {\n        validationErrors.push(...this.mapChildrenToValidationErrors(item, parentPath));\n      }\n      validationErrors.push(this.prependConstraintsWithParentProp(parentPath, item));\n    }\n    return validationErrors;\n  }\n  prependConstraintsWithParentProp(parentPath, error) {\n    const constraints = {};\n    for (const key in error.constraints) {\n      constraints[key] = `${parentPath}.${error.constraints[key]}`;\n    }\n    return Object.assign(Object.assign({}, error), {\n      constraints\n    });\n  }\n};\nValidationPipe = tslib_1.__decorate([(0, core_1.Injectable)(), tslib_1.__param(0, (0, decorators_1.Optional)()), tslib_1.__metadata(\"design:paramtypes\", [Object])], ValidationPipe);\nexports.ValidationPipe = ValidationPipe;","map":{"version":3,"names":["Object","defineProperty","exports","value","ValidationPipe","tslib_1","require","iterare_1","util_1","decorators_1","core_1","http_status_enum_1","http_error_by_code_util_1","load_package_util_1","shared_utils_1","classValidator","classTransformer","constructor","options","transform","disableErrorMessages","errorHttpStatusCode","expectedType","transformOptions","validateCustomDecorators","validatorOptions","__rest","assign","forbidUnknownValues","isTransformEnabled","isDetailedOutputDisabled","HttpStatus","BAD_REQUEST","exceptionFactory","createExceptionFactory","loadValidator","validatorPackage","loadTransformer","transformerPackage","loadPackage","metadata","metatype","toValidate","transformPrimitive","originalValue","toEmptyIfNil","isNil","isPrimitive","stripProtoKeys","entity","plainToClass","originalEntity","isCtorNotEqual","errors","validate","length","shouldTransformToPlain","keys","classToPlain","_this","validationErrors","arguments","undefined","HttpErrorByCode","flattenValidationErrors","type","types","String","Boolean","Number","Array","Buffer","some","t","data","isTypedArray","isArray","v","__proto__","key","includes","object","iterate","map","error","mapChildrenToValidationErrors","flatten","filter","item","constraints","values","toArray","parentPath","children","property","push","prependConstraintsWithParentProp","__decorate","Injectable","__param","Optional","__metadata"],"sources":["/home/benjamin/Documents/42/42_ft_transcendence/front/node_modules/@nestjs/common/pipes/validation.pipe.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ValidationPipe = void 0;\nconst tslib_1 = require(\"tslib\");\nconst iterare_1 = require(\"iterare\");\nconst util_1 = require(\"util\");\nconst decorators_1 = require(\"../decorators\");\nconst core_1 = require(\"../decorators/core\");\nconst http_status_enum_1 = require(\"../enums/http-status.enum\");\nconst http_error_by_code_util_1 = require(\"../utils/http-error-by-code.util\");\nconst load_package_util_1 = require(\"../utils/load-package.util\");\nconst shared_utils_1 = require(\"../utils/shared.utils\");\nlet classValidator = {};\nlet classTransformer = {};\n/**\n * @see [Validation](https://docs.nestjs.com/techniques/validation)\n *\n * @publicApi\n */\nlet ValidationPipe = class ValidationPipe {\n    constructor(options) {\n        options = options || {};\n        const { transform, disableErrorMessages, errorHttpStatusCode, expectedType, transformOptions, validateCustomDecorators } = options, validatorOptions = tslib_1.__rest(options, [\"transform\", \"disableErrorMessages\", \"errorHttpStatusCode\", \"expectedType\", \"transformOptions\", \"validateCustomDecorators\"]);\n        // @see https://github.com/nestjs/nest/issues/10683#issuecomment-1413690508\n        this.validatorOptions = Object.assign({ forbidUnknownValues: false }, validatorOptions);\n        this.isTransformEnabled = !!transform;\n        this.transformOptions = transformOptions;\n        this.isDetailedOutputDisabled = disableErrorMessages;\n        this.validateCustomDecorators = validateCustomDecorators || false;\n        this.errorHttpStatusCode = errorHttpStatusCode || http_status_enum_1.HttpStatus.BAD_REQUEST;\n        this.expectedType = expectedType;\n        this.exceptionFactory =\n            options.exceptionFactory || this.createExceptionFactory();\n        classValidator = this.loadValidator(options.validatorPackage);\n        classTransformer = this.loadTransformer(options.transformerPackage);\n    }\n    loadValidator(validatorPackage) {\n        return (validatorPackage !== null && validatorPackage !== void 0 ? validatorPackage : (0, load_package_util_1.loadPackage)('class-validator', 'ValidationPipe', () => require('class-validator')));\n    }\n    loadTransformer(transformerPackage) {\n        return (transformerPackage !== null && transformerPackage !== void 0 ? transformerPackage : (0, load_package_util_1.loadPackage)('class-transformer', 'ValidationPipe', () => require('class-transformer')));\n    }\n    async transform(value, metadata) {\n        if (this.expectedType) {\n            metadata = Object.assign(Object.assign({}, metadata), { metatype: this.expectedType });\n        }\n        const metatype = metadata.metatype;\n        if (!metatype || !this.toValidate(metadata)) {\n            return this.isTransformEnabled\n                ? this.transformPrimitive(value, metadata)\n                : value;\n        }\n        const originalValue = value;\n        value = this.toEmptyIfNil(value);\n        const isNil = value !== originalValue;\n        const isPrimitive = this.isPrimitive(value);\n        this.stripProtoKeys(value);\n        let entity = classTransformer.plainToClass(metatype, value, this.transformOptions);\n        const originalEntity = entity;\n        const isCtorNotEqual = entity.constructor !== metatype;\n        if (isCtorNotEqual && !isPrimitive) {\n            entity.constructor = metatype;\n        }\n        else if (isCtorNotEqual) {\n            // when \"entity\" is a primitive value, we have to temporarily\n            // replace the entity to perform the validation against the original\n            // metatype defined inside the handler\n            entity = { constructor: metatype };\n        }\n        const errors = await this.validate(entity, this.validatorOptions);\n        if (errors.length > 0) {\n            throw await this.exceptionFactory(errors);\n        }\n        if (isPrimitive) {\n            // if the value is a primitive value and the validation process has been successfully completed\n            // we have to revert the original value passed through the pipe\n            entity = originalEntity;\n        }\n        if (this.isTransformEnabled) {\n            return entity;\n        }\n        if (isNil) {\n            // if the value was originally undefined or null, revert it back\n            return originalValue;\n        }\n        // we check if the number of keys of the \"validatorOptions\" is higher than 1 (instead of 0)\n        // because the \"forbidUnknownValues\" now fallbacks to \"false\" (in case it wasn't explicitly specified)\n        const shouldTransformToPlain = Object.keys(this.validatorOptions).length > 1;\n        return shouldTransformToPlain\n            ? classTransformer.classToPlain(entity, this.transformOptions)\n            : value;\n    }\n    createExceptionFactory() {\n        return (validationErrors = []) => {\n            if (this.isDetailedOutputDisabled) {\n                return new http_error_by_code_util_1.HttpErrorByCode[this.errorHttpStatusCode]();\n            }\n            const errors = this.flattenValidationErrors(validationErrors);\n            return new http_error_by_code_util_1.HttpErrorByCode[this.errorHttpStatusCode](errors);\n        };\n    }\n    toValidate(metadata) {\n        const { metatype, type } = metadata;\n        if (type === 'custom' && !this.validateCustomDecorators) {\n            return false;\n        }\n        const types = [String, Boolean, Number, Array, Object, Buffer];\n        return !types.some(t => metatype === t) && !(0, shared_utils_1.isNil)(metatype);\n    }\n    transformPrimitive(value, metadata) {\n        if (!metadata.data) {\n            // leave top-level query/param objects unmodified\n            return value;\n        }\n        const { type, metatype } = metadata;\n        if (type !== 'param' && type !== 'query') {\n            return value;\n        }\n        if (metatype === Boolean) {\n            return value === true || value === 'true';\n        }\n        if (metatype === Number) {\n            return +value;\n        }\n        return value;\n    }\n    toEmptyIfNil(value) {\n        return (0, shared_utils_1.isNil)(value) ? {} : value;\n    }\n    stripProtoKeys(value) {\n        if (value == null ||\n            typeof value !== 'object' ||\n            util_1.types.isTypedArray(value)) {\n            return;\n        }\n        if (Array.isArray(value)) {\n            for (const v of value) {\n                this.stripProtoKeys(v);\n            }\n            return;\n        }\n        delete value.__proto__;\n        for (const key in value) {\n            this.stripProtoKeys(value[key]);\n        }\n    }\n    isPrimitive(value) {\n        return ['number', 'boolean', 'string'].includes(typeof value);\n    }\n    validate(object, validatorOptions) {\n        return classValidator.validate(object, validatorOptions);\n    }\n    flattenValidationErrors(validationErrors) {\n        return (0, iterare_1.iterate)(validationErrors)\n            .map(error => this.mapChildrenToValidationErrors(error))\n            .flatten()\n            .filter(item => !!item.constraints)\n            .map(item => Object.values(item.constraints))\n            .flatten()\n            .toArray();\n    }\n    mapChildrenToValidationErrors(error, parentPath) {\n        if (!(error.children && error.children.length)) {\n            return [error];\n        }\n        const validationErrors = [];\n        parentPath = parentPath\n            ? `${parentPath}.${error.property}`\n            : error.property;\n        for (const item of error.children) {\n            if (item.children && item.children.length) {\n                validationErrors.push(...this.mapChildrenToValidationErrors(item, parentPath));\n            }\n            validationErrors.push(this.prependConstraintsWithParentProp(parentPath, item));\n        }\n        return validationErrors;\n    }\n    prependConstraintsWithParentProp(parentPath, error) {\n        const constraints = {};\n        for (const key in error.constraints) {\n            constraints[key] = `${parentPath}.${error.constraints[key]}`;\n        }\n        return Object.assign(Object.assign({}, error), { constraints });\n    }\n};\nValidationPipe = tslib_1.__decorate([\n    (0, core_1.Injectable)(),\n    tslib_1.__param(0, (0, decorators_1.Optional)()),\n    tslib_1.__metadata(\"design:paramtypes\", [Object])\n], ValidationPipe);\nexports.ValidationPipe = ValidationPipe;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}