{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.UseInterceptors = void 0;\nconst constants_1 = require(\"../../constants\");\nconst extend_metadata_util_1 = require(\"../../utils/extend-metadata.util\");\nconst shared_utils_1 = require(\"../../utils/shared.utils\");\nconst validate_each_util_1 = require(\"../../utils/validate-each.util\");\n/**\n * Decorator that binds interceptors to the scope of the controller or method,\n * depending on its context.\n *\n * When `@UseInterceptors` is used at the controller level, the interceptor will\n * be applied to every handler (method) in the controller.\n *\n * When `@UseInterceptors` is used at the individual handler level, the interceptor\n * will apply only to that specific method.\n *\n * @param interceptors a single interceptor instance or class, or a list of\n * interceptor instances or classes.\n *\n * @see [Interceptors](https://docs.nestjs.com/interceptors)\n *\n * @usageNotes\n * Interceptors can also be set up globally for all controllers and routes\n * using `app.useGlobalInterceptors()`.  [See here for details](https://docs.nestjs.com/interceptors#binding-interceptors)\n *\n * @publicApi\n */\nfunction UseInterceptors() {\n  for (var _len = arguments.length, interceptors = new Array(_len), _key = 0; _key < _len; _key++) {\n    interceptors[_key] = arguments[_key];\n  }\n  return (target, key, descriptor) => {\n    const isInterceptorValid = interceptor => interceptor && ((0, shared_utils_1.isFunction)(interceptor) || (0, shared_utils_1.isFunction)(interceptor.intercept));\n    if (descriptor) {\n      (0, validate_each_util_1.validateEach)(target.constructor, interceptors, isInterceptorValid, '@UseInterceptors', 'interceptor');\n      (0, extend_metadata_util_1.extendArrayMetadata)(constants_1.INTERCEPTORS_METADATA, interceptors, descriptor.value);\n      return descriptor;\n    }\n    (0, validate_each_util_1.validateEach)(target, interceptors, isInterceptorValid, '@UseInterceptors', 'interceptor');\n    (0, extend_metadata_util_1.extendArrayMetadata)(constants_1.INTERCEPTORS_METADATA, interceptors, target);\n    return target;\n  };\n}\nexports.UseInterceptors = UseInterceptors;","map":{"version":3,"names":["Object","defineProperty","exports","value","UseInterceptors","constants_1","require","extend_metadata_util_1","shared_utils_1","validate_each_util_1","_len","arguments","length","interceptors","Array","_key","target","key","descriptor","isInterceptorValid","interceptor","isFunction","intercept","validateEach","constructor","extendArrayMetadata","INTERCEPTORS_METADATA"],"sources":["/home/benjamin/Documents/42/42_ft_transcendence/front/node_modules/@nestjs/common/decorators/core/use-interceptors.decorator.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.UseInterceptors = void 0;\nconst constants_1 = require(\"../../constants\");\nconst extend_metadata_util_1 = require(\"../../utils/extend-metadata.util\");\nconst shared_utils_1 = require(\"../../utils/shared.utils\");\nconst validate_each_util_1 = require(\"../../utils/validate-each.util\");\n/**\n * Decorator that binds interceptors to the scope of the controller or method,\n * depending on its context.\n *\n * When `@UseInterceptors` is used at the controller level, the interceptor will\n * be applied to every handler (method) in the controller.\n *\n * When `@UseInterceptors` is used at the individual handler level, the interceptor\n * will apply only to that specific method.\n *\n * @param interceptors a single interceptor instance or class, or a list of\n * interceptor instances or classes.\n *\n * @see [Interceptors](https://docs.nestjs.com/interceptors)\n *\n * @usageNotes\n * Interceptors can also be set up globally for all controllers and routes\n * using `app.useGlobalInterceptors()`.  [See here for details](https://docs.nestjs.com/interceptors#binding-interceptors)\n *\n * @publicApi\n */\nfunction UseInterceptors(...interceptors) {\n    return (target, key, descriptor) => {\n        const isInterceptorValid = (interceptor) => interceptor &&\n            ((0, shared_utils_1.isFunction)(interceptor) ||\n                (0, shared_utils_1.isFunction)(interceptor.intercept));\n        if (descriptor) {\n            (0, validate_each_util_1.validateEach)(target.constructor, interceptors, isInterceptorValid, '@UseInterceptors', 'interceptor');\n            (0, extend_metadata_util_1.extendArrayMetadata)(constants_1.INTERCEPTORS_METADATA, interceptors, descriptor.value);\n            return descriptor;\n        }\n        (0, validate_each_util_1.validateEach)(target, interceptors, isInterceptorValid, '@UseInterceptors', 'interceptor');\n        (0, extend_metadata_util_1.extendArrayMetadata)(constants_1.INTERCEPTORS_METADATA, interceptors, target);\n        return target;\n    };\n}\nexports.UseInterceptors = UseInterceptors;\n"],"mappings":"AAAA,YAAY;;AACZA,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAAEC,KAAK,EAAE;AAAK,CAAC,CAAC;AAC7DD,OAAO,CAACE,eAAe,GAAG,KAAK,CAAC;AAChC,MAAMC,WAAW,GAAGC,OAAO,CAAC,iBAAiB,CAAC;AAC9C,MAAMC,sBAAsB,GAAGD,OAAO,CAAC,kCAAkC,CAAC;AAC1E,MAAME,cAAc,GAAGF,OAAO,CAAC,0BAA0B,CAAC;AAC1D,MAAMG,oBAAoB,GAAGH,OAAO,CAAC,gCAAgC,CAAC;AACtE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASF,eAAeA,CAAA,EAAkB;EAAA,SAAAM,IAAA,GAAAC,SAAA,CAAAC,MAAA,EAAdC,YAAY,OAAAC,KAAA,CAAAJ,IAAA,GAAAK,IAAA,MAAAA,IAAA,GAAAL,IAAA,EAAAK,IAAA;IAAZF,YAAY,CAAAE,IAAA,IAAAJ,SAAA,CAAAI,IAAA;EAAA;EACpC,OAAO,CAACC,MAAM,EAAEC,GAAG,EAAEC,UAAU,KAAK;IAChC,MAAMC,kBAAkB,GAAIC,WAAW,IAAKA,WAAW,KAClD,CAAC,CAAC,EAAEZ,cAAc,CAACa,UAAU,EAAED,WAAW,CAAC,IACxC,CAAC,CAAC,EAAEZ,cAAc,CAACa,UAAU,EAAED,WAAW,CAACE,SAAS,CAAC,CAAC;IAC9D,IAAIJ,UAAU,EAAE;MACZ,CAAC,CAAC,EAAET,oBAAoB,CAACc,YAAY,EAAEP,MAAM,CAACQ,WAAW,EAAEX,YAAY,EAAEM,kBAAkB,EAAE,kBAAkB,EAAE,aAAa,CAAC;MAC/H,CAAC,CAAC,EAAEZ,sBAAsB,CAACkB,mBAAmB,EAAEpB,WAAW,CAACqB,qBAAqB,EAAEb,YAAY,EAAEK,UAAU,CAACf,KAAK,CAAC;MAClH,OAAOe,UAAU;IACrB;IACA,CAAC,CAAC,EAAET,oBAAoB,CAACc,YAAY,EAAEP,MAAM,EAAEH,YAAY,EAAEM,kBAAkB,EAAE,kBAAkB,EAAE,aAAa,CAAC;IACnH,CAAC,CAAC,EAAEZ,sBAAsB,CAACkB,mBAAmB,EAAEpB,WAAW,CAACqB,qBAAqB,EAAEb,YAAY,EAAEG,MAAM,CAAC;IACxG,OAAOA,MAAM;EACjB,CAAC;AACL;AACAd,OAAO,CAACE,eAAe,GAAGA,eAAe"},"metadata":{},"sourceType":"script","externalDependencies":[]}