Un utilisateur essaye de rejoindre un channel :

- l'utilisateur n'est pas membre du channel et ce dernier est public --> il le rejoint

- le channel est privé --> l'utilisateur a besoin d'une invitation 
  ET/OU le propriétaire du channel doit approuver la demande pour rejoindre

- le channel est protégé par mot de passe : l'utilisateur doit fournir le bon mdp pour rejoindre

- l'utilisateur est deja membre du channel

- Le channel est plein

- L'utilisateur a ete bloque par le propriétaire du channel ou
  par l'administrateur

- L'utilisateur a été banni du channel

-------------------------------------------------------------------------------
TODO :

1) Je ne dois pas pouvoir m'envoyer un message
2) Gérer le cas de l'utilisateur débloqué
3) Empêcher l'utilisateur bloqué d'envoyer des messages si la conversation est ouverte

------------------------------------------------------------------------------------------------
Comment connecter le backend avec le frontend ?

Je dois socket.emit() l'événement blockUser dans le front.
Par exemple, le bouton "Block" pourrait émettre blockUser avec l'id de l'utilisateur à bloquer
const handleBlock = () =>
{
  socket.emit('blockUser', { blockerId: currentUserId, blockedId: userIdToBlock });
}

Je peux également écouter les événements userBlocked, userUnblocked et error
via un gestionnaire d'events pour maj. l'interface user en fonction de l'event

const socket = io('http://localhost:8080');

socket.on('userBlocked', function(data)
{
  console.log('L'utilisateur a été bloqué : ', data);
  // Ici, vous pouvez mettre à jour votre interface utilisateur en conséquence
});

socket.on('error', function(data)
{
  console.log('Une erreur s'est produite : ', data);
});

------------------------------------------------------------------------------------------------
Logique des DM 

1) L'utilisateur enclenche onDirectMessageClick() en cliquant sur "Direct Message" dans User.

2) onDirectMessageClick() est passee en tant que prop au composant User dans UsersList.

3) Elle met a jour la fonction setPrivateMessageUserId avec l'id de l'user actuel.

4) setPrivateMessageUserId est une fonction de maj. d'etat definie dans MainPage.tsx
   Elle est passee en tant que prop a UsersList.
   Donc onDirectMessageClick, une fois enclenchee, utilise setPrivateMessageUserId pour maj.
   l'etat de privateMessageUserId avec l'id de l'user actuel.

------------------------------------------------------------------------------------------------
Recuperer blockerId et blockedId dans le front

Comment senderId et receiverId sont-il utilises ?

1) 